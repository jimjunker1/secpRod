var.par.2.fun
var.par.3.fun
var.par.4.fun
linf.fun
pars[3]
linf.fun      <- pars[4]
var.linf <- BscVar(var.par.1.fun, var.par.2.fun, var.par.3.fun, var.par.4.fun, linf.fun)
var.linf
source("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/Constrained_Max_Var_New/bsc_cm_plot_func.R")
# This script generates simulated data that mimics that of length frequency data gathered on the #
# blue swimmer crab and provides a testing ground for the algorithm written for estimating growth#
# via a mixture model#
#
# Remove any objects to clear the slate#
#
rm(list=ls())#
#
# First set the directory to write out the results#
#
#setwd("/ibscratch/wrayvisscher/Luke/BSC_RcodesData/Simulation200")#
# Generate three mean curves via von Bertalanffy#
# Generate three mean curves via von Bertalanffy#
# Set some initial paramters that are to be estimated in the next section. We set the seasonal function so that is passes below #
# zero. This allows us to test the algorithm for the ability to deal with this scenario.#
#
days<-seq(0,1,1/366)#
IL<-60#
K0<-1#
T0<-2#
T1<-2#
LINF<-190#
# It is difficult to deal with the space between the mid section of each month and the start of the next year and thus#
# we calculate the means over a fine mesh of values and take the average over the months as a proxy for the mean length#
# for that month. This allows us to calculate the means over a whole year and then just add 1 and 2 to the integral#
# values for the 1 year and 2 year old adults.#
#
KK_store<-array(0,length(days)) # Initialise the array to store the mean values#
#
# Cycle through each day and calculate the integral over the seasonal function#
#
for (i in seq(1,length(days)))#
	{#
	# Calculate if the curve needs to be integrated or not and set the initial month which will be January for the simulation#
  	mm2<-days[i]#
  	yrsold<-0#
  	strmnth<-0#
	strmid<-0#
#
	# Calculate the roots for the seasonal function. This allows us to integrate up to the root and set the integral between #
	# roots to 0. #
	a=T0^2+T1^2#
	b=2*K0*T0#
	c=-(T1^2)+K0^2#
	u1=(-b+sqrt(b^2-4*a*c))/(2*a)#
	u2=(-b-sqrt(b^2-4*a*c))/(2*a)#
	r11=1-acos(u1)/(2*pi)+yrsold#
	r12=acos(u1)/(2*pi)+yrsold#
	r21=1-acos(u2)/(2*pi)+yrsold#
	r22=acos(u2)/(2*pi)+yrsold#
	roots<-c(r11, r12, r21, r22)#
	groot<-K0+T0*cos(2*pi* roots)+T1*sin(2*pi*roots)#
	gmin<-round(groot)#
	# Set the roots#
	r1<-min(roots[which(gmin==0)])#
	r2<-max(roots[which(gmin==0)])#
    # The integral of those months less than root 1#
	if (mm2<r1) {KK = K0*(mm2-strmid) +   (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2)-								cos(2*pi*strmid))}#
	# The integral of those months between root 1 and root 2. This will just be the integral up to root 1.#
	if (mm2>r1&mm2<r2) {KK=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*r1)-										cos(2*pi*strmid))}#
    # The integral of those months after root 2#
	if (mm2>r2)#
	   {#
	   	zMid=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid)) - (T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))#
	   	zEnd=K0*(mm2-r2)    + (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*r2))     - (T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*r2))#
	   	KK<-zEnd+zMid#
	   }#
	# Print it out just to check#
	print(KK)#
	# Store each of the value so that we can calculate the means#
	KK_store[i]<-KK#
}#
# Define the integrals over each year. Subsequent years are just multiples of the first year because the intergal is the same but #
# in multiples for each subsequent year.#
#
KK_yr1=KK_store[1:365]#
KK_yr2=KK_store[1:365]+1.44099#
KK_yr3=KK_store[1:365]+2*1.44099#
# Calculate the mean for each day over the year#
#
MLY1<-(IL + (LINF-IL)*(1-exp(-KK_yr1)))#
MLY2<-(IL + (LINF-IL)*(1-exp(-KK_yr2)))#
MLY3<-(IL + (LINF-IL)*(1-exp(-KK_yr3)))#
# Put each day into a set of months which is designated to be 30 days (only an approximation to true value). We then take the #
# mean over each of the columns to obtain the monthly mean#
#
MLY1 <- colMeans(matrix(MLY1,ncol=12,nrow=30))#
MLY2 <- colMeans(matrix(MLY2,ncol=12,nrow=30))#
MLY3 <- colMeans(matrix(MLY3,ncol=12,nrow=30))#
# Round these means for summary in the manuscript#
#
paste(as.character(signif(MLY1,4)),collapse=" & ")#
paste(as.character(signif(MLY2,4)),collapse=" & ")#
paste(as.character(signif(MLY3,4)),collapse=" & ")#
## Draw from the means to create the groups. Groups are drawn from a normal distribution to mimic our assumptions in real data#
## Draw from the means to create the groups. Groups are drawn from a normal distribution to mimic our assumptions in real data#
# Need to vary the number in each group in each month to better mimic reality#
# Set up the initial parameters for the variance function#
# Variance function test to see shape#
#
VV<-c(40,0.03)#
mu<-seq(0,200,0.5)#
y=VV[1]*mu*exp(-VV[2]*mu)#
plot(mu,y)#
# Set the proportions in each group varying them for each month#
#
P1<-c(0.50, 0.40, 0.30, 0.20, 0.10, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02)#
P3<-c(0.1, 0.15, 0.1, 0.08, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09)#
P2<-1-(P1+P3)#
# Calculate the number of individuals in each group based on the proportions#
#
N=1000 # Number of total individuals#
N1<-as.integer(N*P1)#
N2<-as.integer(N*P2)#
N3<-N-(N1+N2)#
# Make the empty arrays for the individuals to go in#
#
G<-matrix(0,nrow=12,ncol=N)#
#
# For each of the twelve months create the three distributions#
#
for (i in seq(1,12))#
{#
#
# Calculate the variances#
#
var1<-VV[1]*MLY1[i]*exp(-VV[2]*MLY1[i])#
var2<-VV[1]*MLY2[i]*exp(-VV[2]*MLY2[i])#
var3<-VV[1]*MLY3[i]*exp(-VV[2]*MLY3[i])#
#
# Draw the individuals from each of the distributions#
#
G1<-rnorm(N1[i],MLY1[i], sqrt(var1))#
G2<-rnorm(N2[i],MLY2[i], sqrt(var2))#
G3<-rnorm(N3[i],MLY3[i], sqrt(var3))#
#
G[i,]<-c(G1,G2,G3)#
}
pars          <- c(1.02, 1.84, 2.01, 189, 75.5, 40.2, 0.03)
K0    <- pars[1]#
  T0    <- pars[2]#
  T1    <- pars[3]#
  LINF  <- pars[4]#
  M01   <- pars[5]#
  VV[1] <- pars[7]#
  VV[2] <- pars[8]
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")
for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '')#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))),col = 'red',   lwd = 2.5)#
	lines(XX,PI2[mm]*dnorm(XX,MUA(mm,K0,T0,T1,LINF,M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))), col = 'green', lwd= 2.5)#
	lines(XX,(1-(PI1[mm]+PI2[mm]))*dnorm(XX,MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))), col = 'blue',  lwd= 2.5)#
  }
#######################################################################################
#######################################################################################
#######################################################################################
###																				   ####
###			     SCRIPT TO RUN SIMULATIN STUDY FOR BLUE SWIMMER CRABS			   ####
###																				   ###	#
#######################################################################################
#######################################################################################
#######################################################################################
#
# This script generates simulated data that mimics that of length frequency data gathered on the #
# blue swimmer crab and provides a testing ground for the algorithm written for estimating growth#
# via a mixture model#
#
# Remove any objects to clear the slate#
#
rm(list=ls())#
#
# First set the directory to write out the results#
#
#setwd("/ibscratch/wrayvisscher/Luke/BSC_RcodesData/Simulation200")#
# Generate three mean curves via von Bertalanffy#
# Generate three mean curves via von Bertalanffy#
# Set some initial paramters that are to be estimated in the next section. We set the seasonal function so that is passes below #
# zero. This allows us to test the algorithm for the ability to deal with this scenario.#
#
days<-seq(0,1,1/366)#
IL<-60#
K0<-1#
T0<-2#
T1<-2#
LINF<-190#
# It is difficult to deal with the space between the mid section of each month and the start of the next year and thus#
# we calculate the means over a fine mesh of values and take the average over the months as a proxy for the mean length#
# for that month. This allows us to calculate the means over a whole year and then just add 1 and 2 to the integral#
# values for the 1 year and 2 year old adults.#
#
KK_store<-array(0,length(days)) # Initialise the array to store the mean values#
#
# Cycle through each day and calculate the integral over the seasonal function#
#
for (i in seq(1,length(days)))#
	{#
	# Calculate if the curve needs to be integrated or not and set the initial month which will be January for the simulation#
  	mm2<-days[i]#
  	yrsold<-0#
  	strmnth<-0#
	strmid<-0#
#
	# Calculate the roots for the seasonal function. This allows us to integrate up to the root and set the integral between #
	# roots to 0. #
	a=T0^2+T1^2#
	b=2*K0*T0#
	c=-(T1^2)+K0^2#
	u1=(-b+sqrt(b^2-4*a*c))/(2*a)#
	u2=(-b-sqrt(b^2-4*a*c))/(2*a)#
	r11=1-acos(u1)/(2*pi)+yrsold#
	r12=acos(u1)/(2*pi)+yrsold#
	r21=1-acos(u2)/(2*pi)+yrsold#
	r22=acos(u2)/(2*pi)+yrsold#
	roots<-c(r11, r12, r21, r22)#
	groot<-K0+T0*cos(2*pi* roots)+T1*sin(2*pi*roots)#
	gmin<-round(groot)#
	# Set the roots#
	r1<-min(roots[which(gmin==0)])#
	r2<-max(roots[which(gmin==0)])#
    # The integral of those months less than root 1#
	if (mm2<r1) {KK = K0*(mm2-strmid) +   (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2)-								cos(2*pi*strmid))}#
	# The integral of those months between root 1 and root 2. This will just be the integral up to root 1.#
	if (mm2>r1&mm2<r2) {KK=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*r1)-										cos(2*pi*strmid))}#
    # The integral of those months after root 2#
	if (mm2>r2)#
	   {#
	   	zMid=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid)) - (T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))#
	   	zEnd=K0*(mm2-r2)    + (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*r2))     - (T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*r2))#
	   	KK<-zEnd+zMid#
	   }#
	# Print it out just to check#
	print(KK)#
	# Store each of the value so that we can calculate the means#
	KK_store[i]<-KK#
}#
# Define the integrals over each year. Subsequent years are just multiples of the first year because the intergal is the same but #
# in multiples for each subsequent year.#
#
KK_yr1=KK_store[1:365]#
KK_yr2=KK_store[1:365]+1.44099#
KK_yr3=KK_store[1:365]+2*1.44099#
# Calculate the mean for each day over the year#
#
MLY1<-(IL + (LINF-IL)*(1-exp(-KK_yr1)))#
MLY2<-(IL + (LINF-IL)*(1-exp(-KK_yr2)))#
MLY3<-(IL + (LINF-IL)*(1-exp(-KK_yr3)))#
# Put each day into a set of months which is designated to be 30 days (only an approximation to true value). We then take the #
# mean over each of the columns to obtain the monthly mean#
#
MLY1 <- colMeans(matrix(MLY1,ncol=12,nrow=30))#
MLY2 <- colMeans(matrix(MLY2,ncol=12,nrow=30))#
MLY3 <- colMeans(matrix(MLY3,ncol=12,nrow=30))#
# Round these means for summary in the manuscript#
#
paste(as.character(signif(MLY1,4)),collapse=" & ")#
paste(as.character(signif(MLY2,4)),collapse=" & ")#
paste(as.character(signif(MLY3,4)),collapse=" & ")#
## Draw from the means to create the groups. Groups are drawn from a normal distribution to mimic our assumptions in real data#
## Draw from the means to create the groups. Groups are drawn from a normal distribution to mimic our assumptions in real data#
# Need to vary the number in each group in each month to better mimic reality#
# Set up the initial parameters for the variance function#
# Variance function test to see shape#
#
VV<-c(40,0.03)#
mu<-seq(0,200,0.5)#
y=VV[1]*mu*exp(-VV[2]*mu)#
plot(mu,y)#
# Set the proportions in each group varying them for each month#
#
P1<-c(0.50, 0.40, 0.30, 0.20, 0.10, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02)#
P3<-c(0.1, 0.15, 0.1, 0.08, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09, 0.09)#
P2<-1-(P1+P3)#
# Calculate the number of individuals in each group based on the proportions#
#
N=1000 # Number of total individuals#
N1<-as.integer(N*P1)#
N2<-as.integer(N*P2)#
N3<-N-(N1+N2)#
# Make the empty arrays for the individuals to go in#
#
G<-matrix(0,nrow=12,ncol=N)#
#
# For each of the twelve months create the three distributions#
#
for (i in seq(1,12))#
{#
#
# Calculate the variances#
#
var1<-VV[1]*MLY1[i]*exp(-VV[2]*MLY1[i])#
var2<-VV[1]*MLY2[i]*exp(-VV[2]*MLY2[i])#
var3<-VV[1]*MLY3[i]*exp(-VV[2]*MLY3[i])#
#
# Draw the individuals from each of the distributions#
#
G1<-rnorm(N1[i],MLY1[i], sqrt(var1))#
G2<-rnorm(N2[i],MLY2[i], sqrt(var2))#
G3<-rnorm(N3[i],MLY3[i], sqrt(var3))#
#
G[i,]<-c(G1,G2,G3)#
}#
### RUN THE CODE AND GET THE ESTIMATES#
### RUN THE CODE AND GET THE ESTIMATES#
### RUN THE CODE AND GET THE ESTIMATES#
#
# Given that the data are generated we attempt to estimate the true parameters using our model#
# Given that the data are generated we attempt to estimate the true parameters using our model#
MON <- 12#
MONTHS<-rep(seq(0,11),each=N)#
MM<-cbind(matrix(MONTHS,ncol=12,nrow=N))#
MM<-t(MM)#
MM <-as.numeric(MM)#
LL<-as.numeric(G)#
#
# Initialise the model parameters#
#
NN <- length(MM)#
PI1 <- P3#
PI2 <- P2#
K0 <- 1#
LINF <- 185#
M01<-20#
T0 <- 2#
T1 <- 2#
MMLIST <- seq(0,11)#
#
#Initialise the starting values for the variance quadratic update#
#
VV <- c(20,0.04)										#
#
## FUNCTIONS#
## FUNCTIONS#
#
#ASYMPTOTIC MEAN FUNCTION#
#
MU2A <- function(mm,K0,T0,T1,LINF,M01)#
{#
#
  mmval <- MMLIST[mm]%%12#
  yrsold<-2#
  strmnth<-0#
  strmid<-strmnth/12+1/24+yrsold#
  endmid<-strmid+1#
  mm2=(mmval/12)+1/24+yrsold#
  t<-seq(0,1,0.01)#
  g<-K0+T0*cos(2*pi*t)+T1*sin(2*pi*t)#
  #plot(t,g)#
  Isneg<-min(g)#
  Isneg2<-max(g)#
  if (Isneg<0&Isneg2>0)#
  {#
    a=T0^2+T1^2#
	b=2*K0*T0#
	c=-(T1^2)+K0^2#
	u1=(-b+sqrt(b^2-4*a*c))/(2*a)#
	u2=(-b-sqrt(b^2-4*a*c))/(2*a)#
	r11=1-acos(u1)/(2*pi)+yrsold#
	r12=acos(u1)/(2*pi)+yrsold#
	r21=1-acos(u2)/(2*pi)+yrsold#
	r22=acos(u2)/(2*pi)+yrsold#
	roots<-c(r11, r12, r21, r22)#
	groot<-K0+T0*cos(2*pi* roots)+T1*sin(2*pi* roots)#
	gmin<-round(groot)#
	r1<-min(roots[which(gmin==0)])#
	r2<-max(roots[which(gmin==0)])#
    #Regime#
	zMid1=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid)) - (T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))#
    zEnd1=K0*(endmid-r2) + (T0/(2*pi))*(sin(2*pi*endmid)-sin(2*pi*r2)) - (T1/(2*pi))*(cos(2*pi*endmid)-cos(2*pi*r2))#
    KKyr<-yrsold*(zEnd1+zMid1)#
    #Those less than r1#
    if (mm2<r1) {KK = KKyr + K0*(mm2-strmid) +   (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2)-						cos(2*pi*strmid))}#
    #Those between r1 and r2#
    if (mm2>r1&mm2<r2) {KK= KKyr + K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*r1)-								cos(2*pi*strmid))}#
    #Those after r2#
    if (mm2>r2)#
    {#
    zMid=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid)) - (T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))#
    zEnd=K0*(mm2-r2)     + (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*r2))     - (T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*r2))#
    KK<-zEnd+zMid+KKyr#
    }#
  } else #
  {KK=K0*(mm2-strmid)+(T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*strmid)) + 				                           	yrsold*(K0*(endmid-strmid)+(T0/(2*pi))*(sin(2*pi*endmid)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*endmid)-cos(2*pi*strmid)) )}#
  M01 + (LINF-M01)*(1-exp(-KK))#
}#
#1 YEAR OLD ADULT's MEAN FUNCTION#
MUA <- function(mm,K0,T0,T1,LINF,M01)#
{#
  mmval <- MMLIST[mm]%%12#
  yrsold<-1#
  strmnth<-0#
  strmid<-strmnth/12+1/24+yrsold#
  endmid<-strmid+1#
  mm2=(mmval/12)+1/24+yrsold#
  t<-seq(0,1,0.01)#
  g<-K0+T0*cos(2*pi*t)+T1*sin(2*pi*t)#
  Isneg<-min(g)#
  Isneg2<-max(g)#
  if (Isneg<0&Isneg2>0)#
  {#
    a=T0^2+T1^2#
	b=2*K0*T0#
	c=-(T1^2)+K0^2#
	u1=(-b+sqrt(b^2-4*a*c))/(2*a)#
	u2=(-b-sqrt(b^2-4*a*c))/(2*a)#
	r11=1-acos(u1)/(2*pi)+yrsold#
	r12=acos(u1)/(2*pi)+yrsold#
	r21=1-acos(u2)/(2*pi)+yrsold#
	r22=acos(u2)/(2*pi)+yrsold#
	roots<-c(r11, r12, r21, r22)#
	groot<-K0+T0*cos(2*pi* roots)+T1*sin(2*pi* roots)#
	gmin<-round(groot)#
	r1<-min(roots[which(gmin==0)])#
	r2<-max(roots[which(gmin==0)])#
    #Regime#
	zMid1=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid)) - (T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))#
    zEnd1=K0*(endmid-r2) + (T0/(2*pi))*(sin(2*pi*endmid)-sin(2*pi*r2)) - (T1/(2*pi))*(cos(2*pi*endmid)-cos(2*pi*r2))#
    KKyr<-yrsold*(zEnd1+zMid1)#
    	#Those less than r1#
    	if (mm2<r1) {KK = KKyr + K0*(mm2-strmid) +   (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2) -						cos(2*pi*strmid))}#
    	#Those between r1 and r2#
    	if (mm2>r1&mm2<r2) {KK= KKyr + K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*r1) -								cos(2*pi*strmid))}#
    	#Those after r2#
    	if (mm2>r2) {#
    		zMid <- K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid)) - (T1/(2*pi))*(cos(2*pi*r1)-cos(2*pi*strmid))#
    		zEnd <- K0*(mm2-r2)     + (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*r2))     - (T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*r2))#
    		KK   <- zEnd+zMid+KKyr#
    		} }else {#
    		KK  <- K0*(mm2-strmid)+(T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*strmid)) + 					yrsold*(K0*(endmid-strmid)+(T0/(2*pi))*(sin(2*pi*endmid)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*endmid) -						cos(2*pi*strmid)) )}#
  (M01 + (LINF-M01)*(1-exp(-KK)))#
}#
#THE JUVENUILES MEAN FUNCTION#
#
MUJ <- function(mm,K0,T0,T1,LINF,M01)#
{#
	#mm=2#
	mmval <- MMLIST[mm]%%12#
  	yrsold<-0#
  	strmnth<-0#
  	strmid<-strmnth/12+1/24+yrsold#
  	endmid<-strmid+1#
  	mm2=(mmval/12)+1/24+yrsold#
  	t<-seq(0,1,0.01)#
	g<-K0+T0*cos(2*pi*t)+T1*sin(2*pi*t)#
	Isneg<-min(g)#
	Isneg2<-max(g)#
 	if (Isneg<0&Isneg2>0)#
  		{#
    	a=T0^2+T1^2#
		b=2*K0*T0#
		c=-(T1^2)+K0^2#
		u1=(-b+sqrt(b^2-4*a*c))/(2*a)#
		u2=(-b-sqrt(b^2-4*a*c))/(2*a)#
		r11=1-acos(u1)/(2*pi)#
		r12=acos(u1)/(2*pi)#
		r21=1-acos(u2)/(2*pi)#
		r22=acos(u2)/(2*pi)#
		roots<-c(r11, r12, r21, r22)#
		groot<-K0+T0*cos(2*pi* roots)+T1*sin(2*pi* roots)#
		gmin<-round(groot)#
		r1<-min(roots[which(gmin==0)])#
		r2<-max(roots[which(gmin==0)])#
    	#Regime#
#
    	#Those less than r1#
    		if (mm2<r1) {KK = K0*(mm2-strmid) + (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2) -								 cos(2*pi*strmid))}#
    		#Those between r1 and r2#
    		if (mm2>r1&mm2<r2) {KK=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*r1) -										cos(2*pi*strmid))}#
    		#Those after r2#
    		if (mm2>r2)#
    			{#
    			zMid=K0*(r1-strmid) + (T0/(2*pi))*(sin(2*pi*r1)-sin(2*pi*strmid)) - (T1/(2*pi))*(cos(2*pi*r1)  -								cos(2*pi*strmid))#
    			zEnd=K0*(mm2-r2)    + (T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*r2))    - (T1/(2*pi))*(cos(2*pi*mm2) - 								cos(2*pi*r2))#
    			KK<-zEnd+zMid#
    			}} else {#
    	KK=K0*(mm2-strmid)+(T0/(2*pi))*(sin(2*pi*mm2)-sin(2*pi*strmid))-(T1/(2*pi))*(cos(2*pi*mm2)-cos(2*pi*strmid))}	#
 M01 + (LINF-M01)*(1-exp(-KK))#
}#
#INITIALISE THE TAU's which are the inclusion probablities to all be a third#
TAU <- list()#
for (mm in 1:(MON))#
	{#
  		TAU[[mm]] <- matrix(1/3,NN,3)#
	}#
#INITIALISE THE AUXILLARY STORAGE ARRAYS FOR INSIDE LOOP ASSIGNMENT#
#
MU2A_AUX <- c()#
MUA_AUX  <- c()#
MUJ_AUX  <- c()#
for (mm in 1:MON)#
	{#
 	MU2A_AUX[mm] <- MU2A(mm,K0,T0,T1,LINF,M01)#
  	MUA_AUX[mm]  <- MUA(mm,K0,T0,T1,LINF,M01)#
 	MUJ_AUX[mm]  <- MUJ(mm,K0,T0,T1,LINF,M01)#
	}#
#INITIALISE THE VARIANCE FUNCTIONS. THEY ARE ALL QUADRATIC FUNCTIONS OF THE MEAN FOR EACH COHORT#
#
VARJ <- function(mm,VV,K0,T0,T1,LINF,M01)#
	{#
		#Try a heavy tailed function like the Weibull for more flexibility#
		mu=MUJ(mm,K0,T0,T1,LINF,M01)#
		max(VV[1]*mu*exp(-VV[2]*mu),1)#
	}#
#
VARA <- function(mm,VV,K0,T0,T1,LINF,M01)#
	{#
		#Try a heavy tailed function like the Weibull for more flexibility#
		mu=MUA(mm,K0,T0,T1,LINF,M01)#
		max(VV[1]*mu*exp(-VV[2]*mu),1)#
	}#
#
VAR2A <- function(mm,VV,K0,T0,T1,LINF,M01)#
	{#
		#Try a heavy tailed function like the Weibull for more flexibility#
		mu <- MU2A(mm,K0,T0,T1,LINF,M01)#
		max(VV[1]*mu*exp(-VV[2]*mu),1)#
	}#
#INITIALISE THE LIKELIHOOD FUNCTION#
#
LOGLIKE <- 0#
for (mm in 1:MON)#
  {#
	LL2 <- LL[which(MM==MMLIST[mm])]#
	LikGrp1 <- PI1[mm]*dnorm(LL2,MU2A_AUX[mm],sqrt(VAR2A(mm,VV,K0,T0,T1,LINF,M01)))#
	LikGrp2 <- PI2[mm]*dnorm(LL2,MUA_AUX[mm],sqrt(VARA(mm,VV,K0,T0,T1,LINF,M01)))#
	LikGrp3 <- (1 - (PI1[mm] + PI2[mm]))*dnorm(LL2,MUJ_AUX[mm],sqrt(VARJ(mm,VV,K0,T0,T1,LINF,M01)))#
	LOGLIKE <- LOGLIKE + sum(log(LikGrp1 + LikGrp2 + LikGrp3))#
  }#
######WHILE LOOP BEGINS######WHILE LOOP BEGINS######WHILE LOOP BEGINS#
######WHILE LOOP BEGINS######WHILE LOOP BEGINS######WHILE LOOP BEGINS#
######WHILE LOOP BEGINS######WHILE LOOP BEGINS######WHILE LOOP BEGINS#
######WHILE LOOP BEGINS######WHILE LOOP BEGINS######WHILE LOOP BEGINS#
#THIS LOOP DOES ALL THE WORK AND INCLUDES TWO NELDER MEAD STEPS TO OPTIMISE THE NONLINEAR MEANS AND VARIANCES#
TOL <- 10^-6#
LOGOLD <- -Inf#
#
while (LOGLIKE - LOGOLD > TOL)#
{#
  LOGOLD <- LOGLIKE      #Assign the current likelihood value to the an old value so we can evaluate the update#
	# UPDATE THE TAU SCORES AND THEN CALCULATE THE PIs GIVEN THESE TAU SCORES#
#
	for (mm in 1:MON)#
  	{#
    	# Calculate the inclusion probablities for group 1 and 2 which forms the top of the mixture model algorithm#
#
    	Top1<-PI1[mm]*dnorm(LL,MU2A_AUX[mm],sqrt(VAR2A(mm,VV,K0,T0,T1,LINF,M01))) #
    	Top2<-PI2[mm]*dnorm(LL,MUA_AUX[mm],sqrt(VARA(mm,VV,K0,T0,T1,LINF,M01)))								#
    	# Calculate the sum of each of the classes which forms the bottom of the mixture model algorithm#
#
    	Bot<- Top1 + Top2 + (1-(PI1[mm]+PI2[mm]))*dnorm(LL,MUJ_AUX[mm],sqrt(VARJ(mm,VV,K0,T0,T1,LINF,M01)))  #
    	# Calculate the tau scores for each of the groups, where the third group is what's left over from 1 after the first 2#
#
    	TAU[[mm]][,1] <- Top1/Bot																	#
    	TAU[[mm]][,2] <- Top2/Bot#
		TAU[[mm]][,3] <- 1-(TAU[[mm]][,1]+TAU[[mm]][,2])#
		# Work out the PIs for groups 1 and 2#
    	PI1[mm] <- sum((MM==MMLIST[mm])*TAU[[mm]][,1])/sum(MM==MMLIST[mm])					#
		PI2[mm] <- sum((MM==MMLIST[mm])*TAU[[mm]][,2])/sum(MM==MMLIST[mm])										#
	}#
#DEFINE THE LIKELIHOOD FUNCTION OUTSIDE THE LOOP TO UPDATE THE MEANS#
#
  PARA <- c(K0,T0,T1,LINF,M01)#
  OPTIFUN <- function(PARA)#
  {#
  	LOGLIKE <- 0#
  		for (mm in 1:MON)#
  			{#
			LL2 <-LL[which(MM==MMLIST[mm])]#
			LikGrp1 <- PI1[mm]*dnorm(LL2,MU2A(mm,PARA[1],PARA[2],PARA[3],PARA[4],PARA[5]),#
			sqrt(VAR2A(mm,VV,PARA[1],PARA[2],PARA[3],PARA[4],PARA[5])))#
			LikGrp2 <-PI2[mm]*dnorm(LL2,MUA(mm,PARA[1],PARA[2],PARA[3],PARA[4],PARA[5]),#
			sqrt(VARA(mm,VV,PARA[1],PARA[2],PARA[3],PARA[4],PARA[5]))) #
			LikGrp3 <- (1 - (PI1[mm] + PI2[mm]))*dnorm(LL2,MUJ(mm,PARA[1],PARA[2],PARA[3],PARA[4],PARA[5]),#
			sqrt(VARJ(mm,VV,PARA[1],PARA[2],PARA[3],PARA[4],PARA[5])))#
			LOGLIKE <- LOGLIKE + sum(log(LikGrp1 + LikGrp2 + LikGrp3))#
  			}#
	-LOGLIKE#
  }#
  # Run OPTIM to find the best variances given the taus and Pis#
  OPTIM <- optim(PARA,OPTIFUN, control = list(maxit = 10000))		#
  print("Did optim 1 converge?")#
  print(OPTIM$convergence)#
  #Assign the estimates from optim to the parameters#
  K0 <- OPTIM$par[1]#
  T0 <- OPTIM$par[2]#
  T1 <- OPTIM$par[3]#
  LINF <- OPTIM$par[4]#
  M01 <- OPTIM$par[5]#
  #Calculate the means for each group based on these new estimates#
  MU2A_AUX <- c()#
  MUA_AUX <- c()#
  MUJ_AUX <- c()#
  for (mm in 1:MON)#
  {#
  	#Compute the means for each month #
    MU2A_AUX[mm] <- MU2A(mm,K0,T0,T1,LINF,M01)#
    MUA_AUX[mm] <- MUA(mm,K0,T0,T1,LINF,M01)#
    MUJ_AUX[mm] <- MUJ(mm,K0,T0,T1,LINF,M01)#
  }#
  #OPTIMISE THE VARIANCES GIVEN THE NEW MEANS#
  #DEFINE THE LIKELIHOOD FUNCTION OUTSIDE THE LOOP TO UPDATE THE VARIANCES #
  PARA2 <- VV#
  VAROPTIFUN <- function(PARA2)#
  {#
  LOGLIKE <- 0#
  		for (mm in 1:MON)#
  			{#
  			#mm=1#
			LL2<-LL[which(MM==MMLIST[mm])]#
			LikGrp1<- PI1[mm]*dnorm(LL2,MU2A_AUX[mm],sqrt(VAR2A(mm,PARA2,K0,T0,T1,LINF,M01)))#
			LikGrp2<- PI2[mm]*dnorm(LL2,MUA_AUX[mm],sqrt(VARA(mm,PARA2,K0,T0,T1,LINF,M01)))#
			LikGrp3<-(1-(PI1[mm]+PI2[mm]))*dnorm(LL2,MUJ_AUX[mm],sqrt(VARJ(mm,PARA2,K0,T0,T1,LINF,M01)))#
			LOGLIKE <- LOGLIKE + sum(log(LikGrp1 + LikGrp2 + LikGrp3))#
  			}#
	-LOGLIKE#
  }#
  # Run OPTIM to find the best variances given the taus and Pis#
#
  OPTIM2 <- optim(PARA2,VAROPTIFUN,control = list(maxit = 10000))													#
  VV <- OPTIM2$par#
  print("Did optim 2 converge?")#
  print(OPTIM2$convergence)  #
  #COMPUTE THE LIKELIHOOD GIVEN ALL THESE NICE NEW UPDATES#
  LOGLIKE <- 0#
  for (mm in 1:MON)#
  {#
	LL2<-LL[which(MM==MMLIST[mm])]#
	LikGrp1<-PI1[mm]*dnorm(LL2,MU2A_AUX[mm],sqrt(VAR2A(mm,VV,K0,T0,T1,LINF,M01)))#
	LikGrp2<-PI2[mm]*dnorm(LL2,MUA_AUX[mm],sqrt(VARA(mm,VV,K0,T0,T1,LINF,M01)))#
	LikGrp3<-(1-(PI1[mm]+PI2[mm]))*dnorm(LL2,MUJ_AUX[mm],sqrt(VARJ(mm,VV,K0,T0,T1,LINF,M01)))#
	LOGLIKE <- LOGLIKE + sum(log(LikGrp1 + LikGrp2 + LikGrp3))#
  }#
#
  	  par(mfrow = c(3,5))#
	  XX <- 0:200#
	  xlabNam<-c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", "Sep.", "Oct.", "Nov.", "Dec.")#
	  for (mm in 1:MON)#
	  {#
	    hist(LL[which(MM==MMLIST[mm])],breaks=30,prob=T,xlim=c(20,210),ylim=c(0,0.075),xlab=xlabNam[mm],ylab="",main='')#
	    lines(XX,PI1[mm]*dnorm(XX,MU2A(mm,K0,T0,T1,LINF,M01),sqrt(VAR2A(mm,VV,K0,T0,T1,LINF,M01))),col='red',lwd=2.5)#
	    lines(XX,PI2[mm]*dnorm(XX,MUA(mm,K0,T0,T1,LINF,M01),sqrt(VARA(mm,VV,K0,T0,T1,LINF,M01))),col='green',lwd=2.5)#
	    lines(XX,(1-(PI1[mm]+PI2[mm]))*dnorm(XX,MUJ_AUX[mm],sqrt(VARJ(mm,VV,K0,T0,T1,LINF,M01))),col='blue',lwd=2.5)#
	  }#
	  XX2 <- seq(0,1,length.out=100)#
	  YY <- K0 + T0*cos(2*pi*XX2) + T1*sin(2*pi*XX2)#
	  plot(XX2,((YY+abs(YY))/2),type='l',xlab="Fraction of a year since Jan 1",ylab="k (per year)",lwd=2.5)#
	  #VV=c(3,150,100)#
	  BLAH <- 0:200#
	  var_linf=VV[1]*BLAH*exp(-VV[2]*BLAH)#
	  plot(BLAH,var_linf,type='l',xlab="Mean length (mm)", ylab="Variance",lwd=2.5)#
	  plot(density(rnorm(1000000,PARA[4],sqrt(VV[1]*PARA[4]*exp(-VV[2]*PARA[4])))),xlab="Length (mm)",main="",lwd=2.5)#
	}#
#
  #PRINT OUT OUR NEW UPDATES FOR THE PARAMETERS AND THE LIKELIHOOD#
  print(c(LOGLIKE,LOGLIKE-LOGOLD))#
  print(c(PARA,PARA2))#
}#
#
# Write all results to a text file for later reference#
#
name<-paste("Sim_Res",sample(seq(1,100000),1),sep="")#
write.table(matrix(c(PARA,PARA2),nrow=1,ncol=length(c(PARA,PARA2))),name,append=T,row.names=F, col.names=F,quote=F)#
write.table(matrix(PI1,nrow=1,ncol=length(PI1)),name,append=T,row.names=F,col.names=F,quote=F)#
write.table(matrix(PI2,nrow=1,ncol=length(PI2)),name,append=T,row.names=F,col.names=F,quote=F)#
write.table(matrix(1-(PI1+PI2),nrow=1,ncol=length(PI2)),name,append=T,row.names=F,col.names=F,quote=F)#
write.table(matrix(MU2A_AUX,nrow=1,ncol=length(MU2A_AUX)),name,append=T,row.names=F,col.names=F,quote=F)#
write.table(matrix(MUA_AUX,nrow=1,ncol=length(MUA_AUX)),name,append=T,row.names=F,col.names=F,quote=F)#
write.table(matrix(MUJ_AUX,nrow=1,ncol=length(MUJ_AUX)),name,append=T,row.names=F,col.names=F,quote=F)
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '')#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))),col = 'red',   lwd = 2.5)#
	lines(XX,PI2[mm]*dnorm(XX,MUA(mm,K0,T0,T1,LINF,M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))), col = 'green', lwd= 2.5)#
	lines(XX,(1-(PI1[mm]+PI2[mm]))*dnorm(XX,MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))), col = 'blue',  lwd= 2.5)#
  }
pars          <- c(1.02, 1.84, 2.01, 189, 75.5, 40.2, 0.03)
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '')#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))),col = 'red',   lwd = 2.5)#
	lines(XX,PI2[mm]*dnorm(XX,MUA(mm,K0,T0,T1,LINF,M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))), col = 'green', lwd= 2.5)#
	lines(XX,(1-(PI1[mm]+PI2[mm]))*dnorm(XX,MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))), col = 'blue',  lwd= 2.5)#
  }
XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *X X2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", lwd = 2.5)
YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)
plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", lwd = 2.5)
var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", ylab = "Variance", lwd = 2.5)
plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", main = "", lwd = 2.5)
# Declare some plotting parameters#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '')#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))),col = 'red',   lwd = 2.5)#
	lines(XX,PI2[mm]*dnorm(XX,MUA(mm,K0,T0,T1,LINF,M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))), col = 'green', lwd= 2.5)#
	lines(XX,(1-(PI1[mm]+PI2[mm]))*dnorm(XX,MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))), col = 'blue',  lwd= 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", lwd = 2.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", ylab = "Variance", lwd = 2.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", main = "", lwd = 2.5)
# Declare each of the parameters to names unique to inside the function#
  K0    <- pars[1]#
  T0    <- pars[2]#
  T1    <- pars[3]#
  LINF  <- pars[4]#
  M01   <- pars[5]#
  VV[1] <- pars[7]#
  VV[2] <- pars[8]#
  # Declare some plotting parameters#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '')#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 1,   lwd = 2.5)#
	lines(XX,PI2[mm]*dnorm(XX,MUA(mm,K0,T0,T1,LINF,M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 2, lwd= 2.5)#
	lines(XX,(1-(PI1[mm]+PI2[mm]))*dnorm(XX,MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3,  lwd= 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", lwd = 2.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", ylab = "Variance", lwd = 2.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", main = "", lwd = 2.5)
pars
for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '')#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 1, lwd = 2.5)#
	lines(XX,PI2[mm]*dnorm(XX,MUA(mm,K0,T0,T1,LINF,M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 2, lwd = 2.5)#
	lines(XX,(1-(PI1[mm]+PI2[mm]))*dnorm(XX,MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
  }
?lines
for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '')#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 1, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 2, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
  }
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '')#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 1, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 2, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
  }
3735694184/10e9
lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 1, lwd = 2.5)
PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01)
PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 1, lwd = 2.5)
PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01)))
mm
K0
T0
MU2A(mm, K0, T0, T1, LINF, M01)
VAR2A(mm, VV, K0, T0, T1, LINF, M01))
VAR2A(mm, VV, K0, T0, T1, LINF, M01)
VV
VV    <- c(VV[1], VV[2])
VV
pars[8]
K0    <- pars[1]#
  T0    <- pars[2]#
  T1    <- pars[3]#
  LINF  <- pars[4]#
  M01   <- pars[5]#
  VV[1] <- pars[6]#
  VV[2] <- pars[7]#
  VV    <- c(VV[1], VV[2])
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '')#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 1, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 2, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
  }
XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", lwd = 2.5)
var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", ylab = "Variance", lwd = 2.5)
plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", main = "", lwd = 2.5)
plot(density(LL[which(MM==MMLIST[mm])]))
plot(density(LL[which(MM==MMLIST[mm])]),, breaks = 30, prob = T, #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = ''))
plot(density(LL[which(MM==MMLIST[mm])]), breaks = 30, prob = T, #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = ''))
density(LL[which(MM==MMLIST[mm])])
plot(density(LL[which(MM==MMLIST[mm])]), breaks = 30, prob = T, #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '')
warnings()
plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '')
for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '', lwd = 2.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 1, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 2, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
  }
# Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '', lwd = 2.5, lty = 1)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '', lwd = 1.5, lty = 1)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
# Declare some plotting parameters#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '', lwd = 1.5, lty = 1)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '', lwd = 2, lty = 1)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
         ylab = "", main = '', lwd = 2, lty = 1)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
# Declare some plotting parameters#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", main = '', lwd = 2, lty = 1)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", lwd = 2.5)
var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", ylab = "Variance", lwd = 2.5)
# Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", main = "", lwd = 2.5)
# Declare some plotting parameters#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", main = '', lwd = 2, lty = 1)#
    axis(1, cex.axis = 2)#
    axis(2, cex.axis = 2)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
#     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n" main = '', lwd = 2, lty = 1)#
    axis(1, cex.axis = 2)#
    axis(2, cex.axis = 2)
plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", main = '', lwd = 2, lty = 1)#
    axis(1, cex.axis = 2)#
    axis(2, cex.axis = 2)
for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1)#
    axis(1, cex.axis = 2)#
    axis(2, cex.axis = 2)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
# Declare some plotting parameters#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  dev.new(width=5, height=4)
15/1.6
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  dev.new(width = 15, height = 9.375)
# Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  dev.new(width = 15, height = 9.375)#
#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
dev.new(width = 15, height = 9.375)#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")
# Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
# Declare some plotting parameters#
  dev.new(width = 17, height = 17/1.618)#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
dev.new(width = 15, height = 17/1.618)#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")
# Declare some plotting parameters#
  dev.new(width = 15, height = 17/1.618)#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
# Declare some plotting parameters#
  dev.new(width = 15, height = 17/1.618)#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1)#
    axis(1, cex.axis = 1.5, cex.lab = 1.5)#
    axis(2, cex.axis = 1.5, cex.lab = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
dev.new(width = 15, height = 17/1.618)#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    #hist(LL[which(MM==MMLIST[mm])], breaks = 30, prob = T, #
    #     xlim = c(20, 210), ylim = c(0, 0.075), xlab = xlabNam[mm], #
    #     ylab = "", main = '')#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5, cex.lab = 1.5)#
    axis(2, cex.axis = 1.5, cex.lab = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
# Declare each of the parameters to names unique to inside the function#
  K0    <- pars[1]#
  T0    <- pars[2]#
  T1    <- pars[3]#
  LINF  <- pars[4]#
  M01   <- pars[5]#
  VV[1] <- pars[6]#
  VV[2] <- pars[7]#
  VV    <- c(VV[1], VV[2])#
  # Declare some plotting parameters#
  dev.new(width = 15, height = 17/1.618)#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5, cex.lab = 1.5)#
    axis(2, cex.axis = 1.5, cex.lab = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", ylab = "Variance", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", main = "", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)
# Declare each of the parameters to names unique to inside the function#
  K0    <- pars[1]#
  T0    <- pars[2]#
  T1    <- pars[3]#
  LINF  <- pars[4]#
  M01   <- pars[5]#
  VV[1] <- pars[6]#
  VV[2] <- pars[7]#
  VV    <- c(VV[1], VV[2])#
  # Declare some plotting parameters#
  dev.new(width = 15, height = 17/1.618)#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5, cex.lab = 1.5)#
    axis(2, cex.axis = 1.5, cex.lab = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", #
       ylab = "Variance", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", xaxt = "n", yaxt = "n", main = "", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)
?png
# Declare some plotting parameters#
  png("~/Desktop/bsc_sim_plot.png", width = 15, height = 17/1.618, units = "cm")#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5, cex.lab = 1.5)#
    axis(2, cex.axis = 1.5, cex.lab = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", #
       ylab = "Variance", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", xaxt = "n", yaxt = "n", main = "", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  dev.off()
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5, cex.lab = 1.5)#
    axis(2, cex.axis = 1.5, cex.lab = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", #
       ylab = "Variance", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", xaxt = "n", yaxt = "n", main = "", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)
K0    <- pars[1]#
  T0    <- pars[2]#
  T1    <- pars[3]#
  LINF  <- pars[4]#
  M01   <- pars[5]#
  VV[1] <- pars[6]#
  VV[2] <- pars[7]#
  VV    <- c(VV[1], VV[2])#
  # Declare some plotting parameters#
  png("~/Desktop/bsc_sim_plot.png", width = 15, height = 17/1.618, units = "cm")#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5, cex.lab = 1.5)#
    axis(2, cex.axis = 1.5, cex.lab = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", #
       ylab = "Variance", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", xaxt = "n", yaxt = "n", main = "", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  dev.off()
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    plot(density(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5, cex.lab = 1.5)#
    axis(2, cex.axis = 1.5, cex.lab = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", #
       ylab = "Variance", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", xaxt = "n", yaxt = "n", main = "", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)
# Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    plot(hist(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, #
         col="lightgreen", #
         lty = 1, cex.lab = 1.5)#
    #plot(density(LL[which(MM==MMLIST[mm])]), #
    #     xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
    #     ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5, cex.lab = 1.5)#
    axis(2, cex.axis = 1.5, cex.lab = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
plot(hist(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col="lightgreen", #
         cex.lab = 1.5)
hist(LL[which(MM==MMLIST[mm])]), #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col="lightgreen", #
         cex.lab = 1.5)
hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col="lightgreen", #
         cex.lab = 1.5)
hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col="grey45", #
         cex.lab = 1.5)
hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col="grey15", #
         cex.lab = 1.5)
hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col="grey90", #
         cex.lab = 1.5)
hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col="grey95", #
         cex.lab = 1.5)
hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col = rgb(0.5,0.5,0.5,1),#
         cex.lab = 1.5)
?rgbv
?rgb
hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col = rgb(0.5, 0.5, 0.5, 0.1),#
         cex.lab = 1.5)
hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col = rgb(0.5, 0.5, 0.5, 0.05),#
         cex.lab = 1.5)
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col = rgb(0.5, 0.5, 0.5, 0.05),#
         cex.lab = 1.5)#
    #plot(density(LL[which(MM==MMLIST[mm])]), #
    #     xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
    #     ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
y <- hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col = rgb(0.5, 0.5, 0.5, 0.05),#
         cex.lab = 1.5)#
    plot(y$breaks, c(y$counts,0), type="s", col="blue")
y$breaks
y
plot(y$density, c(y$counts,0), type="s", col="blue")
y$density
y$counts
plot(y$density, c(y$density,0), type="s", col="blue")
plot(y$breaks, c(y$density,0), type="s", col="blue")
y <- hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col = rgb(0.5, 0.5, 0.5, 0.05),#
         cex.lab = 1.5)#
    plot(y$breaks, c(y$density,0), type="s", col = rgb(0.5, 0.5, 0.5, 0.05))
hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col = rgb(0.5, 0.5, 0.5, 0.05),#
         cex.lab = 1.5)
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col = rgb(0.5, 0.5, 0.5, 0.05),#
         cex.lab = 1.5)#
    #plot(density(LL[which(MM==MMLIST[mm])]), #
    #     xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
    #     ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col = rgb(0.5, 0.5, 0.5, 0.05),#
         cex.lab = 1.5, add = F)#
    #plot(density(LL[which(MM==MMLIST[mm])]), #
    #     xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
    #     ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col = rgb(0.5, 0.5, 0.5, 0.05),#
         cex.lab = 1.5, add = T)
for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col = rgb(0.5, 0.5, 0.5, 0.05),#
         cex.lab = 1.5, add = T)#
    #plot(density(LL[which(MM==MMLIST[mm])]), #
    #     xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
    #     ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    hist(LL[which(MM==MMLIST[mm])], #
         xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         xlab = xlabNam[mm], #
         ylab = "", xaxt = "n", yaxt = "n", main = '', #
         col = rgb(0.5, 0.5, 0.5, 0.05),#
         cex.lab = 1.5)#
    #plot(density(LL[which(MM==MMLIST[mm])]), #
    #     xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
    #     ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)
png("~/Desktop/bsc_sim_plot.png", width = 15, height = 17/1.618, units = "cm")#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    # hist(LL[which(MM==MMLIST[mm])], #
         # xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         # xlab = xlabNam[mm], #
         # ylab = "", xaxt = "n", yaxt = "n", main = '', #
         # col = rgb(0.5, 0.5, 0.5, 0.05),#
         # cex.lab = 1.5)#
    plot(density(LL[which(MM==MMLIST[mm])]), #
        xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
        ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }
png("~/Desktop/bsc_sim_plot.png", width = 15, height = 17/1.618, units = "cm")
?png
# Declare some plotting parameters#
  png("~/Desktop/bsc_sim_plot.png", width = 15, height = 17/1.618, units = "cm", res = 1200)#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    # hist(LL[which(MM==MMLIST[mm])], #
         # xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         # xlab = xlabNam[mm], #
         # ylab = "", xaxt = "n", yaxt = "n", main = '', #
         # col = rgb(0.5, 0.5, 0.5, 0.05),#
         # cex.lab = 1.5)#
    plot(density(LL[which(MM==MMLIST[mm])]), #
        xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
        ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", #
       ylab = "Variance", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", xaxt = "n", yaxt = "n", main = "", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  dev.off()
dev.new(width = 15, height = 17/1.618, units = "cm")
par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    # hist(LL[which(MM==MMLIST[mm])], #
         # xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         # xlab = xlabNam[mm], #
         # ylab = "", xaxt = "n", yaxt = "n", main = '', #
         # col = rgb(0.5, 0.5, 0.5, 0.05),#
         # cex.lab = 1.5)#
    plot(density(LL[which(MM==MMLIST[mm])]), #
        xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
        ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5)#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", #
       ylab = "Variance", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", xaxt = "n", yaxt = "n", main = "", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)
png("~/Desktop/bsc_sim_plot.png", width = 15, height = 17/1.618, units = "cm", res = 400)#
  dev.new(width = 15, height = 17/1.618, units = "cm")#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    # hist(LL[which(MM==MMLIST[mm])], #
         # xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         # xlab = xlabNam[mm], #
         # ylab = "", xaxt = "n", yaxt = "n", main = '', #
         # col = rgb(0.5, 0.5, 0.5, 0.05),#
         # cex.lab = 1.5)#
    plot(density(LL[which(MM==MMLIST[mm])]), #
        xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
        ylab = "", xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5,#
        ylab = "Density")#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", #
       ylab = "Variance", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", xaxt = "n", yaxt = "n", main = "", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  dev.off()
# Declare some plotting parameters#
  png("~/Desktop/bsc_sim_plot.png", width = 15, height = 17/1.618, units = "cm", res = 400)#
  dev.new(width = 15, height = 17/1.618, units = "cm")#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    # hist(LL[which(MM==MMLIST[mm])], #
         # xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         # xlab = xlabNam[mm], #
         # ylab = "", xaxt = "n", yaxt = "n", main = '', #
         # col = rgb(0.5, 0.5, 0.5, 0.05),#
         # cex.lab = 1.5)#
    plot(density(LL[which(MM==MMLIST[mm])]), #
        xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
        xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5,#
        ylab = "Density")#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", #
       ylab = "Variance", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", xaxt = "n", yaxt = "n", main = "", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  dev.off()
png("~/Desktop/bsc_sim_plot.png", width = 15, height = 17/1.618, units = "cm", res = 400)#
  #dev.new(width = 15, height = 17/1.618, units = "cm")#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    # hist(LL[which(MM==MMLIST[mm])], #
         # xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         # xlab = xlabNam[mm], #
         # ylab = "", xaxt = "n", yaxt = "n", main = '', #
         # col = rgb(0.5, 0.5, 0.5, 0.05),#
         # cex.lab = 1.5)#
    plot(density(LL[which(MM==MMLIST[mm])]), #
        xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
        xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5,#
        ylab = "Density")#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", #
       ylab = "Variance", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", xaxt = "n", yaxt = "n", main = "", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  dev.off()
dev.new(width = 15, height = 17/1.618, units = "cm")#
  par(mfrow = c(3, 5))#
  XX <- 0 : 200#
  xlabNam <- c("Jan.", "Feb.","Mar.","Apr.","May","Jun.","Jul.","Aug.", #
                  "Sep.", "Oct.", "Nov.", "Dec.")#
  # Plot of data and mixture fits#
  for (mm in 1:MON)#
  {#
    # hist(LL[which(MM==MMLIST[mm])], #
         # xlim = c(20, 210), breaks = 30, prob = T, ylim = c(0, 0.07), #
         # xlab = xlabNam[mm], #
         # ylab = "", xaxt = "n", yaxt = "n", main = '', #
         # col = rgb(0.5, 0.5, 0.5, 0.05),#
         # cex.lab = 1.5)#
    plot(density(LL[which(MM==MMLIST[mm])]), #
        xlim = c(20, 210), ylim = c(0, 0.07), xlab = xlabNam[mm], #
        xaxt = "n", yaxt = "n", main = '', lwd = 2, lty = 1, cex.lab = 1.5,#
        ylab = "Density")#
    axis(1, cex.axis = 1.5)#
    axis(2, cex.axis = 1.5)#
    lines(XX, PI1[mm] * dnorm(XX, MU2A(mm, K0, T0, T1, LINF, M01),#
          sqrt(VAR2A(mm, VV, K0, T0, T1, LINF, M01))), lty = 2, lwd = 2.5)#
	lines(XX, PI2[mm] * dnorm(XX, MUA(mm, K0, T0, T1, LINF, M01),#
	      sqrt(VARA(mm, VV, K0, T0, T1, LINF, M01))),  lty = 3, lwd = 2.5)#
	lines(XX, (1-(PI1[mm]+PI2[mm])) * dnorm(XX, MUJ_AUX[mm],#
	      sqrt(VARJ(mm, VV, K0, T0, T1, LINF, M01))),  lty = 4, lwd = 2.5)#
  }#
  # Plot the seasonal function  #
  XX2 <- seq(0, 1, length.out = 100)#
  YY  <- K0 + T0 * cos(2 * pi * XX2) + T1 * sin(2 * pi *XX2)#
  plot(XX2, ((YY + abs(YY)) / 2), type = 'l', xlab = "Fraction of a year since Jan 1",#
       ylab = "k (per year)", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the variance funtion#
  var_linf <- VV[1] * XX * exp(-VV[2] * XX)#
  plot(XX, var_linf, type = 'l', xlab = "Mean length (mm)", #
       ylab = "Variance", xaxt = "n", yaxt = "n", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)#
  # Plot the distribution of linf#
#
  plot(density(rnorm(1000000, PARA[4], sqrt(VV[1] * PARA[4] * exp(-VV[2] * PARA[4])))),#
       xlab = "Length (mm)", xaxt = "n", yaxt = "n", main = "", lwd = 2.5, cex.lab = 1.5)#
  axis(1, cex.axis = 1.5)#
  axis(2, cex.axis = 1.5)
# Remove any objects to clear the slate#
rm(list = ls( ))#
# Source the function files needed#
# --------------------------------#
setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/Constrained_Max_Var_New")#
source("bsc_cm_seas_integral_func.R")#
source("bsc_cm_mean_length_func.R")#
source("bsc_cm_seas_root_func.R")#
source("bsc_cm_variance_func_ricker.R")#
source("bsc_cm_log_likelihood_func.R")#
source("bsc_cm_pi_calc_func.R")#
source("bsc_cm_mean_var_optim_func.R")#
source("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/bsc_plot_func.R")#
# Data preliminaries#
# ------------------#
# Set the working directories#
#setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_Code_Sim/")#
setwd("~/Dropbox/AAUni/APhD/Blueswimmer/RcodesData/Blue_Swimmer_Crab_Code_Sim/BSC_R_code_best/Diff_Variance_Function")#
# Read in the data set on the asymptotic males that was gathered through pots#
lfd.big.males.females <- read.table("LFD_bigMalesFem", header = T)#
# Pull out the lengths and the dates from these data files#
lfd.big.males.females.dates   <- as.Date(lfd.big.males.females$Date, "%d/%m/%y")#
lfd.big.males.females.lengths <- lfd.big.males.females$Carapacewidth#
# Pull out the year and month information from these dates#
lfd.big.males.females.dates.year   <- format(lfd.big.males.females.dates, '%Y')#
lfd.big.males.females.dates.months <- format(lfd.big.males.females.dates, '%m')#
# Read in the trawl data on males that contains juvenile recruitment and adults#
lfd.trawl.males.females <- read.table("LFD")#
# Pull out the lengths and the dates from these data files#
lfd.trawl.males.females.dates   <- as.Date(lfd.trawl.males.females $Date, #
									"%d/%m/%Y")#
lfd.trawl.males.females.lengths <- lfd.trawl.males.females$Carapace.width#
# Concatenate the necessary elements from each file into a common #
# dates and lengths array#
lfd.dates   <- c(lfd.trawl.males.females.dates,   lfd.big.males.females.dates)#
lfd.lengths <- c(lfd.trawl.males.females.lengths, lfd.big.males.females.lengths)#
# Subset for males or females#
#Males#
#combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
#males        <- which(combined.sex == 1)#
#lfd.dates    <- lfd.dates[males]#
#lfd.lengths  <- lfd.lengths[males]#
# Females#
# combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
# females      <- which(combined.sex == 2)#
# lfd.dates    <- lfd.dates[females]#
# lfd.lengths  <- lfd.lengths[females]#
# Pull out the year and month information from these dates#
lfd.year   <- format(lfd.dates, '%Y')#
lfd.months <- format(lfd.dates, '%m')#
# Pull out the years and months that we are interested in #
# i.e., those that don't contain recruitment#
str.month.yr.1 <- 2#
end.month.yr.1 <- 8#
str.month.yr.2 <- 2#
end.month.yr.2 <- 5#
lfd.85.feb.aug <- which((lfd.year == '1985') & #
				  (as.numeric(lfd.months) %in% (str.month.yr.1:end.month.yr.1)))#
lfd.86.feb.may <- which((lfd.year == '1986') &#
				  (as.numeric(lfd.months) %in% (str.month.yr.2:end.month.yr.2)))#
# Initialise the data for the model #
# ---------------------------------#
num.months       <- 11													#
lengths          <- lfd.lengths[c(lfd.85.feb.aug, lfd.86.feb.may)]		#
months.85        <- as.numeric(lfd.months[lfd.85.feb.aug]) - 1 # Jan = 0th month#
months.86        <- as.numeric(lfd.months[lfd.86.feb.may]) + 11#
months           <- c(months.85, months.86)#
months.lst       <- as.numeric(names(table(months)))	#
num.months.seq   <- seq(1, num.months)#
# Initialise the parameters of the model #
# --------------------------------------#
num.inds <- length(months)                    # Number of individuals we have#
pi.1     <- rep(1/3, num.months)              # Pi mixing prop group 1#
pi.2     <- rep(1/3, num.months)              # Pi mixing prop group 2#
pi.3     <- (1 - (pi.1 + pi.2))               # Pi group 3. Diff from 1#
k0       <- 1.03                              # K0 average K#
linf     <- 160                               # Asym length#
mu.yr.1  <- 60                                # First month's average length yr 1#
mu.yr.2  <- 80                                # First month's average length yr 2#
theta.1  <- 0.9                               # Seasonality parameter 1#
theta.1.comb <- 1.02346756   #
theta.2.comb <- 0.32301298#
max.contr    <- (1 / (2 * pi)) * #
                acos(theta.1.comb /#
                (sqrt(theta.2.comb ^ 2 + #
                theta.1.comb ^ 2)))           # Calculates max of seas curve#
theta.2   <- (theta.1 * (sqrt(1 - cos(2 * #
              pi * max.contr)^2))) /#
              cos(2 * pi * max.contr)         # Theta 2 constrained by max #
var.pars <- c(10, 0.015)                      # Variance fun parameter vector#
pars     <- c(k0, theta.1, linf,              # Parameters in a vector#
              mu.yr.1, mu.yr.2, var.pars)
source("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/bsc_plot_func.R")
pars          <- c(0.881, 1.06, 0.311, 176.3, 64.5, 79.9, 33.3, 0.0253, 0)
BscPlotNew(pars)
source("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/bsc_plot_func.R")
pars          <- c(0.881, 1.06, 0.311, 176.3, 64.5, 79.9, 33.3, 0.0253, 0)
BscPlotNew(pars)
source("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/bsc_plot_func.R")
pars          <- c(0.881, 1.06, 0.311, 176.3, 64.5, 79.9, 33.3, 0.0253, 0)
BscPlotNew(pars)
x.df.mu2
x.vals
k0        <- pars[1]#
  theta.1   <- pars[2]#
  theta.2   <- pars[3]#
  linf      <- pars[4]#
  mu.yr.1   <- pars[5]#
  mu.yr.2   <- pars[6]#
  var.par.1 <- pars[7]#
  var.par.2 <- pars[8]#
  constrain <- pars[9]#
  if ( constrain == 1 ) {#
  # If male or female we keep the maximum fixed so turn off thetas#
  # above and turn those on below#
  theta.2   <- (theta.1.fun * (sqrt(1 - cos(2 * pi * max.contr)^2))) /#
                   cos(2 * pi * max.contr) #
  }#
  setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/Constrained_Max_Var_New")#
  source("bsc_cm_seas_integral_func.R")#
  source("bsc_cm_mean_length_func.R")#
  source("bsc_cm_seas_root_func.R")#
  source("bsc_cm_variance_func_ricker.R")#
  source("bsc_cm_log_likelihood_func.R")#
  source("bsc_cm_pi_calc_func.R")#
  source("bsc_cm_mean_var_optim_func.R")#
#
  # Declare some plotting parameters#
  x.vals <- 0 : 200#
  x.lab.name <- c("Feb., 1985", "Mar., 1985", "Apr., 1985", "May, 1985",#
                  "Jun., 1985", "Jul., 1985", "Aug., 1985", "Feb., 1986",#
                  "Mar., 1986", "Apr., 1986", "May, 1986")#
  # Calculate the means again for the final likelihood update#
  mean.2.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 2, str.mnth = 1)   #
  print(mean.2.yr)    #
  mean.1.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 1, str.mnth = 1)#
  print(mean.1.yr)#
  mean.0.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 0, str.mnth = 1)                  #
  # Calculate the variances again for the final likelihood update#
  var.2.yr  <<- sapply(mean.2.yr, BscVar, var.par.1 = var.par.1,#
                     var.par.2 = var.par.2)#
  var.1.yr  <<- sapply(mean.1.yr, BscVar, var.par.1 = var.par.1,#
                     var.par.2 = var.par.2)#
  var.0.yr  <<- sapply(mean.0.yr, BscVar, var.par.1 =  var.par.1,#
                     var.par.2 = var.par.2)#
  print(mean.1.yr)#
  pi.1     <- rep(1/3, num.months)              # Pi mixing prop group 1 #
  pi.2     <- rep(1/3, num.months)#
  pi.3     <- 1 - (pi.1 + pi.2)#
  pi.all   <- sapply(num.months.seq, PiCalc)#
  pi.1     <- pi.all[1, ]#
  pi.2     <- pi.all[2, ]#
  pi.3     <- pi.all[3, ]
dev.new(width = 15, height = 17/1.618, units = "cm")#
  plot.nrow <- 3#
  plot.ncol <- 5#
  pushViewport(viewport(layout = grid.layout(plot.nrow, plot.ncol)))#
  row.seq <- rep(seq(1, plot.nrow), each  = plot.ncol)#
  col.seq <- rep(seq(1, plot.ncol), times = plot.nrow)#
  print("I made it this far")#
  # Plot of data and mixture fits#
#
  for (mm in 1 : num.months) {#
  	month.lengths <- lengths[which(months == months.lst[mm])]#
    lengths.sub.df <- data.frame(month.lengths)#
    m <- ggplot(lengths.sub.df, aes(x = month.lengths)) +#
         geom_histogram(aes(y = ..density..), #
         fill = rgb(0.5, 0.5, 0.5, 0.5),     #
         binwidth = 1) + ylim(c(0, 0.07))#
    x.df.mu2 <- data.frame(x.vals, #
                pi.1[mm] * dnorm(x.vals, mean.2.yr[mm],#
                sqrt(var.2.yr[mm])))#
    x.df.mu1 <- data.frame(x.vals,#
                pi.2[mm] * dnorm(x.vals, mean.1.yr[mm],#
	            sqrt(var.2.yr[mm])))#
    x.df.mu0 <- data.frame(x.vals, #
                pi.3[mm] * dnorm(x.vals, mean.0.yr[mm],#
	            sqrt(var.0.yr[mm])))#
    plot.mm  <- m +  #
          geom_line(data = x.df.mu2, aes(x = x.df.mu2[, 1], y = x.df.mu2[, 2]), #
          linetype = 1, size = 1) +#
          geom_line(data = x.df.mu1, aes(x = x.df.mu1[, 1], y = x.df.mu1[, 2]), #
          linetype = 2, size = 1) +#
          geom_line(data = x.df.mu0, aes(x = x.df.mu0[, 1], y = x.df.mu0[, 2]), #
          linetype = 3, size = 1) +#
          xlab(x.lab.name[mm]) #
    print(c(row.seq[mm], col.seq[mm]))#
    print(plot.mm, vp = viewport(layout.pos.row = row.seq[mm], #
          layout.pos.col = col.seq[mm]))#
  }
total.mixture <- pi.1[mm] * dnorm(x.vals, mean.2.yr[mm], sqrt(var.2.yr[mm])) +#
	                 pi.2[mm] * dnorm(x.vals, mean.1.yr[mm], sqrt(var.2.yr[mm])) +#
	                 pi.3[mm] * dnorm(x.vals, mean.0.yr[mm], sqrt(var.0.yr[mm]))#
	x.vals.tot    <- c(xvals, xvals, xvals)#
	tot.df        <- data.frame(x.vals.tot, total.mixture)
x.vals.tot    <- c(x.vals, x.vals, x.vals)#
	tot.df        <- data.frame(x.vals.tot, total.mixture)
head(x.df.mu2)
month.lengths <- lengths[which(months == months.lst[mm])]#
    lengths.sub.df <- data.frame(month.lengths)#
    m <- ggplot(lengths.sub.df, aes(x = month.lengths)) +#
         geom_histogram(aes(y = ..density..), #
         fill = rgb(0.5, 0.5, 0.5, 0.5),     #
         binwidth = 1) + ylim(c(0, 0.07))#
    den.mu2 <- pi.1[mm] * dnorm(x.vals, mean.2.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu1 <- pi.2[mm] * dnorm(x.vals, mean.1.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu0 <- pi.3[mm] * dnorm(x.vals, mean.0.yr[mm], sqrt(var.0.yr[mm]))#
    x.df.mu2 <- data.frame(x.vals, den.mu2)#
    x.df.mu1 <- data.frame(x.vals, den.mu1)#
    x.df.mu0 <- data.frame(x.vals, den.mu0)#
	total.mixture <- den.mu2 + den.mu1 + den.mu0#
	x.vals.tot    <- c(x.vals, x.vals, x.vals)#
	tot.df        <- data.frame(x.vals.tot, total.mixture)#
    plot.mm  <- m +  #
          geom_line(data = x.df.mu2, aes(x = x.vals, y = den.mu2), #
          linetype = 1, size = 1) +#
          geom_line(data = x.df.mu1, aes(x = x.vals, y = den.mu1), #
          linetype = 2, size = 1) +#
          geom_line(data = x.df.mu0, aes(x = x.vals, y = den.mu0), #
          linetype = 3, size = 1) +#
          geom_line(data = tot.df,   aes(x = x.vals, y = total.mixture), #
          linetype = 3, size = 1) #
          xlab(x.lab.name[mm])
for (mm in 1 : num.months) {#
  	month.lengths <- lengths[which(months == months.lst[mm])]#
    lengths.sub.df <- data.frame(month.lengths)#
    m <- ggplot(lengths.sub.df, aes(x = month.lengths)) +#
         geom_histogram(aes(y = ..density..), #
         fill = rgb(0.5, 0.5, 0.5, 0.5),     #
         binwidth = 1) + ylim(c(0, 0.07))#
    den.mu2 <- pi.1[mm] * dnorm(x.vals, mean.2.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu1 <- pi.2[mm] * dnorm(x.vals, mean.1.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu0 <- pi.3[mm] * dnorm(x.vals, mean.0.yr[mm], sqrt(var.0.yr[mm]))#
    x.df.mu2 <- data.frame(x.vals, den.mu2)#
    x.df.mu1 <- data.frame(x.vals, den.mu1)#
    x.df.mu0 <- data.frame(x.vals, den.mu0)#
	total.mixture <- den.mu2 + den.mu1 + den.mu0#
	x.vals.tot    <- c(x.vals, x.vals, x.vals)#
	tot.df        <- data.frame(x.vals.tot, total.mixture)#
    plot.mm  <- m +  #
          geom_line(data = x.df.mu2, aes(x = x.vals, y = den.mu2), #
          linetype = 1, size = 1) +#
          geom_line(data = x.df.mu1, aes(x = x.vals, y = den.mu1), #
          linetype = 2, size = 1) +#
          geom_line(data = x.df.mu0, aes(x = x.vals, y = den.mu0), #
          linetype = 3, size = 1) +#
          geom_line(data = tot.df,   aes(x = x.vals, y = total.mixture), #
          linetype = 3, size = 1) +#
          xlab(x.lab.name[mm]) #
    print(c(row.seq[mm], col.seq[mm]))#
    print(plot.mm, vp = viewport(layout.pos.row = row.seq[mm], #
          layout.pos.col = col.seq[mm]))#
  }
for (mm in 1 : num.months) {#
  	month.lengths <- lengths[which(months == months.lst[mm])]#
    lengths.sub.df <- data.frame(month.lengths)#
    m <- ggplot(lengths.sub.df, aes(x = month.lengths)) +#
         geom_histogram(aes(y = ..density..), #
         fill = rgb(0.5, 0.5, 0.5, 0.5),     #
         binwidth = 1) + ylim(c(0, 0.07))#
    den.mu2 <- pi.1[mm] * dnorm(x.vals, mean.2.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu1 <- pi.2[mm] * dnorm(x.vals, mean.1.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu0 <- pi.3[mm] * dnorm(x.vals, mean.0.yr[mm], sqrt(var.0.yr[mm]))#
    x.df.mu2 <- data.frame(x.vals, den.mu2)#
    x.df.mu1 <- data.frame(x.vals, den.mu1)#
    x.df.mu0 <- data.frame(x.vals, den.mu0)#
	total.mixture <- den.mu2 + den.mu1 + den.mu0#
	x.vals.tot    <- c(x.vals, x.vals, x.vals)#
	tot.df        <- data.frame(x.vals.tot, total.mixture)#
    plot.mm  <- m +  #
          geom_line(data = x.df.mu2, aes(x = x.vals, y = den.mu2), #
          linetype = 1, size = 1) +#
          geom_line(data = x.df.mu1, aes(x = x.vals, y = den.mu1), #
          linetype = 2, size = 1) +#
          geom_line(data = x.df.mu0, aes(x = x.vals, y = den.mu0), #
          linetype = 3, size = 1) +#
          geom_line(data = tot.df,   aes(x = x.vals.tot, y = total.mixture), #
          linetype = 3, size = 0.5) +#
          xlab(x.lab.name[mm]) #
    print(c(row.seq[mm], col.seq[mm]))#
    print(plot.mm, vp = viewport(layout.pos.row = row.seq[mm], #
          layout.pos.col = col.seq[mm]))#
  }
for (mm in 1 : num.months) {#
  	month.lengths <- lengths[which(months == months.lst[mm])]#
    lengths.sub.df <- data.frame(month.lengths)#
    m <- ggplot(lengths.sub.df, aes(x = month.lengths)) +#
         geom_histogram(aes(y = ..density..), #
         fill = rgb(0.5, 0.5, 0.5, 0.5),     #
         binwidth = 1) + ylim(c(0, 0.07))#
    den.mu2 <- pi.1[mm] * dnorm(x.vals, mean.2.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu1 <- pi.2[mm] * dnorm(x.vals, mean.1.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu0 <- pi.3[mm] * dnorm(x.vals, mean.0.yr[mm], sqrt(var.0.yr[mm]))#
    x.df.mu2 <- data.frame(x.vals, den.mu2)#
    x.df.mu1 <- data.frame(x.vals, den.mu1)#
    x.df.mu0 <- data.frame(x.vals, den.mu0)#
	total.mixture <- den.mu2 + den.mu1 + den.mu0#
	x.vals.tot    <- c(x.vals, x.vals, x.vals)#
	tot.df        <- data.frame(x.vals.tot, total.mixture)#
    plot.mm  <- m +  #
          geom_line(data = x.df.mu2, aes(x = x.vals, y = den.mu2), #
          linetype = 1, size = 1) +#
          geom_line(data = x.df.mu1, aes(x = x.vals, y = den.mu1), #
          linetype = 2, size = 1) +#
          geom_line(data = x.df.mu0, aes(x = x.vals, y = den.mu0), #
          linetype = 3, size = 1) +#
          geom_line(data = tot.df,   aes(x = x.vals.tot, y = total.mixture), #
          linetype = 1, size = 0.5) +#
          xlab(x.lab.name[mm]) #
    print(c(row.seq[mm], col.seq[mm]))#
    print(plot.mm, vp = viewport(layout.pos.row = row.seq[mm], #
          layout.pos.col = col.seq[mm]))#
  }
for (mm in 1 : num.months) {#
  	month.lengths <- lengths[which(months == months.lst[mm])]#
    lengths.sub.df <- data.frame(month.lengths)#
    m <- ggplot(lengths.sub.df, aes(x = month.lengths)) +#
         geom_histogram(aes(y = ..density..), #
         fill = rgb(0.5, 0.5, 0.5, 0.5),     #
         binwidth = 5) + ylim(c(0, 0.07))#
    den.mu2 <- pi.1[mm] * dnorm(x.vals, mean.2.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu1 <- pi.2[mm] * dnorm(x.vals, mean.1.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu0 <- pi.3[mm] * dnorm(x.vals, mean.0.yr[mm], sqrt(var.0.yr[mm]))#
    x.df.mu2 <- data.frame(x.vals, den.mu2)#
    x.df.mu1 <- data.frame(x.vals, den.mu1)#
    x.df.mu0 <- data.frame(x.vals, den.mu0)#
	total.mixture <- den.mu2 + den.mu1 + den.mu0#
	x.vals.tot    <- c(x.vals, x.vals, x.vals)#
	tot.df        <- data.frame(x.vals.tot, total.mixture)#
    plot.mm  <- m +  #
          geom_line(data = x.df.mu2, aes(x = x.vals, y = den.mu2), #
          linetype = 1, size = 1) +#
          geom_line(data = x.df.mu1, aes(x = x.vals, y = den.mu1), #
          linetype = 2, size = 1) +#
          geom_line(data = x.df.mu0, aes(x = x.vals, y = den.mu0), #
          linetype = 3, size = 1) +#
          geom_line(data = tot.df,   aes(x = x.vals.tot, y = total.mixture), #
          linetype = 1, size = 0.5) +#
          xlab(x.lab.name[mm]) #
    print(c(row.seq[mm], col.seq[mm]))#
    print(plot.mm, vp = viewport(layout.pos.row = row.seq[mm], #
          layout.pos.col = col.seq[mm]))#
  }
# Set up the plotting parameters#
  dev.new(width = 15, height = 17/1.618, units = "cm")#
  plot.nrow <- 3#
  plot.ncol <- 5#
  pushViewport(viewport(layout = grid.layout(plot.nrow, plot.ncol)))#
  row.seq <- rep(seq(1, plot.nrow), each  = plot.ncol)#
  col.seq <- rep(seq(1, plot.ncol), times = plot.nrow)#
  print("I made it this far")#
  # Plot of data and mixture fits#
#
  for (mm in 1 : num.months) {#
  	month.lengths <- lengths[which(months == months.lst[mm])]#
    lengths.sub.df <- data.frame(month.lengths)#
    m <- ggplot(lengths.sub.df, aes(x = month.lengths)) +#
         geom_histogram(aes(y = ..density..), #
         fill = rgb(0.5, 0.5, 0.5, 0.5),     #
         binwidth = 5) + ylim(c(0, 0.07))#
    den.mu2 <- pi.1[mm] * dnorm(x.vals, mean.2.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu1 <- pi.2[mm] * dnorm(x.vals, mean.1.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu0 <- pi.3[mm] * dnorm(x.vals, mean.0.yr[mm], sqrt(var.0.yr[mm]))#
    x.df.mu2 <- data.frame(x.vals, den.mu2)#
    x.df.mu1 <- data.frame(x.vals, den.mu1)#
    x.df.mu0 <- data.frame(x.vals, den.mu0)#
	total.mixture <- den.mu2 + den.mu1 + den.mu0#
	x.vals.tot    <- c(x.vals, x.vals, x.vals)#
	tot.df        <- data.frame(x.vals.tot, total.mixture)#
    plot.mm  <- m +  #
          geom_line(data = x.df.mu2, aes(x = x.vals, y = den.mu2), #
          linetype = 1, size = 1) +#
          geom_line(data = x.df.mu1, aes(x = x.vals, y = den.mu1), #
          linetype = 2, size = 1) +#
          geom_line(data = x.df.mu0, aes(x = x.vals, y = den.mu0), #
          linetype = 3, size = 1) +#
          geom_line(data = tot.df,   aes(x = x.vals.tot, y = total.mixture), #
          linetype = 1, size = 0.5) +#
          xlab(x.lab.name[mm]) #
    print(c(row.seq[mm], col.seq[mm]))#
    print(plot.mm, vp = viewport(layout.pos.row = row.seq[mm], #
          layout.pos.col = col.seq[mm]))#
  }
theta.2
# Set up the plotting parameters#
  dev.new(width = 15, height = 17/1.618, units = "cm")#
  plot.nrow <- 3#
  plot.ncol <- 5#
  pushViewport(viewport(layout = grid.layout(plot.nrow, plot.ncol)))#
  row.seq <- rep(seq(1, plot.nrow), each  = plot.ncol)#
  col.seq <- rep(seq(1, plot.ncol), times = plot.nrow)#
  print("I made it this far")#
  # Plot of data and mixture fits#
#
  for (mm in 1 : num.months) {#
  	month.lengths <- lengths[which(months == months.lst[mm])]#
    lengths.sub.df <- data.frame(month.lengths)#
    m <- ggplot(lengths.sub.df, aes(x = month.lengths)) +#
         geom_histogram(aes(y = ..density..), #
         fill = rgb(0.5, 0.5, 0.5, 0.5),     #
         binwidth = 5) + ylim(c(0, 0.05))#
    den.mu2 <- pi.1[mm] * dnorm(x.vals, mean.2.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu1 <- pi.2[mm] * dnorm(x.vals, mean.1.yr[mm], sqrt(var.2.yr[mm]))#
    den.mu0 <- pi.3[mm] * dnorm(x.vals, mean.0.yr[mm], sqrt(var.0.yr[mm]))#
    x.df.mu2 <- data.frame(x.vals, den.mu2)#
    x.df.mu1 <- data.frame(x.vals, den.mu1)#
    x.df.mu0 <- data.frame(x.vals, den.mu0)#
	total.mixture <- den.mu2 + den.mu1 + den.mu0#
	x.vals.tot    <- c(x.vals, x.vals, x.vals)#
	tot.df        <- data.frame(x.vals.tot, total.mixture)#
    plot.mm  <- m +  #
          geom_line(data = x.df.mu2, aes(x = x.vals, y = den.mu2), #
          linetype = 1, size = 1) +#
          geom_line(data = x.df.mu1, aes(x = x.vals, y = den.mu1), #
          linetype = 2, size = 1) +#
          geom_line(data = x.df.mu0, aes(x = x.vals, y = den.mu0), #
          linetype = 3, size = 1) +#
          geom_line(data = tot.df,   aes(x = x.vals.tot, y = total.mixture), #
          linetype = 1, size = 0.5) +#
          xlab(x.lab.name[mm]) #
    print(c(row.seq[mm], col.seq[mm]))#
    print(plot.mm, vp = viewport(layout.pos.row = row.seq[mm], #
          layout.pos.col = col.seq[mm]))#
  }
# Plot the seasonal function  #
  x.vals.2  <- seq(0, 1, length.out = 100)#
  seas.func <- k0 + theta.1 * cos(2 * pi * x.vals.2) +#
               theta.2 * sin(2 * pi * x.vals.2)#
  df.seas <- data.frame(x.vals.2, seas.func)#
  seas.plot <- ggplot(df.seas, aes(x = x.vals.2 , y = seas.func)) + #
               xlab("Fraction of a year since Jan. 1") + ylab("k (per year)")#
  print(seas.plot + geom_line(size = 1), vp = viewport(layout.pos.row = 3, #
        layout.pos.col = 2))#
  # Plot the variance funtion#
  var.linf.x <-  sapply(x.vals, BscVar, var.par.1 =  var.par.1,#
                     var.par.2 = var.par.2)#
  df.var   <- data.frame(x.vals, var.linf.x)#
  var.plot <- ggplot(df.var, aes(x = x.vals, y = var.linf.x)) + #
               xlab("Mean length (mm)") + ylab("Variance")#
  print(var.plot + geom_line(size = 1), vp = viewport(layout.pos.row = 3, #
        layout.pos.col = 3))#
  # Plot the distribution of linf#
#
  var.linf <- BscVar(var.par.1, var.par.2, linf)#
  var.linf.vals <- rnorm(1000000, linf, sqrt(var.linf))#
  var.linf.dist <- data.frame(var.linf.vals)#
  m <- ggplot(var.linf.dist, aes(x = var.linf.vals)) +#
       xlab("Length (mm)") + ylab("Density")#
  print(m + geom_density(size = 1), #
        vp = viewport(layout.pos.row = 3, #
        layout.pos.col = 4))
# Plot the seasonal function  #
  x.vals.2  <- seq(0, 1, length.out = 100)#
  yy <- k0 + theta.1 * cos(2 * pi * x.vals.2) +#
               theta.2 * sin(2 * pi * x.vals.2)#
  seas.func <- ((yy + abs(yy))/2)#
  df.seas <- data.frame(x.vals.2, seas.func)#
  seas.plot <- ggplot(df.seas, aes(x = x.vals.2 , y = seas.func)) + #
               xlab("Fraction of a year since Jan. 1") + ylab("k (per year)")#
  print(seas.plot + geom_line(size = 1), vp = viewport(layout.pos.row = 3, #
        layout.pos.col = 2))#
  # Plot the variance funtion#
  var.linf.x <-  sapply(x.vals, BscVar, var.par.1 =  var.par.1,#
                     var.par.2 = var.par.2)#
  df.var   <- data.frame(x.vals, var.linf.x)#
  var.plot <- ggplot(df.var, aes(x = x.vals, y = var.linf.x)) + #
               xlab("Mean length (mm)") + ylab("Variance")#
  print(var.plot + geom_line(size = 1), vp = viewport(layout.pos.row = 3, #
        layout.pos.col = 3))#
  # Plot the distribution of linf#
#
  var.linf <- BscVar(var.par.1, var.par.2, linf)#
  var.linf.vals <- rnorm(1000000, linf, sqrt(var.linf))#
  var.linf.dist <- data.frame(var.linf.vals)#
  m <- ggplot(var.linf.dist, aes(x = var.linf.vals)) +#
       xlab("Length (mm)") + ylab("Density")#
  print(m + geom_density(size = 1), #
        vp = viewport(layout.pos.row = 3, #
        layout.pos.col = 4))
source("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/bsc_plot_func.R")
pars          <- c(0.881, 1.06, 0.311, 176.3, 64.5, 79.9, 33.3, 0.0253, 0)
BscPlotNew(pars)
# ------------------------------------------------------------------------------#
# Males#
# ------------------------------------------------------------------------------#
#Males#
combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
males        <- which(combined.sex == 1)#
lfd.dates    <- lfd.dates[males]#
lfd.lengths  <- lfd.lengths[males]#
lfd.year   <- format(lfd.dates, '%Y')#
lfd.months <- format(lfd.dates, '%m')#
# Pull out the years and months that we are interested in #
# i.e., those that don't contain recruitment#
str.month.yr.1 <- 2#
end.month.yr.1 <- 8#
str.month.yr.2 <- 2#
end.month.yr.2 <- 5#
lfd.85.feb.aug <- which((lfd.year == '1985') & #
				  (as.numeric(lfd.months) %in% (str.month.yr.1:end.month.yr.1)))#
lfd.86.feb.may <- which((lfd.year == '1986') &#
				  (as.numeric(lfd.months) %in% (str.month.yr.2:end.month.yr.2)))#
# Initialise the data for the model #
# ---------------------------------#
num.months       <- 11													#
lengths          <- lfd.lengths[c(lfd.85.feb.aug, lfd.86.feb.may)]		#
months.85        <- as.numeric(lfd.months[lfd.85.feb.aug]) - 1 # Jan = 0th month#
months.86        <- as.numeric(lfd.months[lfd.86.feb.may]) + 11#
months           <- c(months.85, months.86)#
months.lst       <- as.numeric(names(table(months)))	#
num.months.seq   <- seq(1, num.months)#
# Initialise the parameters of the model #
# --------------------------------------#
num.inds <- length(months)                    # Number of individuals we have#
pi.1     <- rep(1/3, num.months)              # Pi mixing prop group 1#
pi.2     <- rep(1/3, num.months)              # Pi mixing prop group 2#
pi.3     <- (1 - (pi.1 + pi.2))               # Pi group 3. Diff from 1#
k0       <- 1.03                              # K0 average K#
linf     <- 160                               # Asym length#
mu.yr.1  <- 60                                # First month's average length yr 1#
mu.yr.2  <- 80                                # First month's average length yr 2#
theta.1  <- 0.9                               # Seasonality parameter 1#
theta.1.comb <- 1.02346756   #
theta.2.comb <- 0.32301298#
max.contr    <- (1 / (2 * pi)) * #
                acos(theta.1.comb /#
                (sqrt(theta.2.comb ^ 2 + #
                theta.1.comb ^ 2)))           # Calculates max of seas curve#
theta.2   <- (theta.1 * (sqrt(1 - cos(2 * #
              pi * max.contr)^2))) /#
              cos(2 * pi * max.contr)         # Theta 2 constrained by max #
var.pars <- c(10, 0.015)                      # Variance fun parameter vector#
pars     <- c(k0, theta.1, linf,              # Parameters in a vector#
              mu.yr.1, mu.yr.2, var.pars) #
# Annnnddd plot#
# -------------#
pars          <- c(1.04, 0.989, 0.312, 172.7, 70.1, 81.6, 55.1, 82.1, 0.0321, 1)
BscPlotNew(pars)
pars
library(ggplot2)#
  library(grid)#
  k0        <- pars[1]#
  theta.1   <- pars[2]#
  theta.2   <- pars[3]#
  linf      <- pars[4]#
  mu.yr.1   <- pars[5]#
  mu.yr.2   <- pars[6]#
  var.par.1 <- pars[7]#
  var.par.2 <- pars[8]#
  constrain <- pars[9]#
  if ( constrain == 1 ) {#
  # If male or female we keep the maximum fixed so turn off thetas#
  # above and turn those on below#
  theta.2   <- (theta.1.fun * (sqrt(1 - cos(2 * pi * max.contr)^2))) /#
                   cos(2 * pi * max.contr) #
  }#
  setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/Constrained_Max_Var_New")#
  source("bsc_cm_seas_integral_func.R")#
  source("bsc_cm_mean_length_func.R")#
  source("bsc_cm_seas_root_func.R")#
  source("bsc_cm_variance_func_ricker.R")#
  source("bsc_cm_log_likelihood_func.R")#
  source("bsc_cm_pi_calc_func.R")#
  source("bsc_cm_mean_var_optim_func.R")#
#
  # Declare some plotting parameters#
  x.vals <- 0 : 200#
  x.lab.name <- c("Feb., 1985", "Mar., 1985", "Apr., 1985", "May, 1985",#
                  "Jun., 1985", "Jul., 1985", "Aug., 1985", "Feb., 1986",#
                  "Mar., 1986", "Apr., 1986", "May, 1986")#
  # Calculate the means again for the final likelihood update#
  mean.2.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 2, str.mnth = 1)   #
  print(mean.2.yr)    #
  mean.1.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 1, str.mnth = 1)#
  print(mean.1.yr)#
  mean.0.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 0, str.mnth = 1)                  #
  # Calculate the variances again for the final likelihood update#
  var.2.yr  <<- sapply(mean.2.yr, BscVar, var.par.1 = var.par.1,#
                     var.par.2 = var.par.2)#
  var.1.yr  <<- sapply(mean.1.yr, BscVar, var.par.1 = var.par.1,#
                     var.par.2 = var.par.2)#
  var.0.yr  <<- sapply(mean.0.yr, BscVar, var.par.1 =  var.par.1,#
                     var.par.2 = var.par.2)#
  print(mean.1.yr)#
  pi.1     <- rep(1/3, num.months)              # Pi mixing prop group 1 #
  pi.2     <- rep(1/3, num.months)#
  pi.3     <- 1 - (pi.1 + pi.2)#
  pi.all   <- sapply(num.months.seq, PiCalc)#
  pi.1     <- pi.all[1, ]#
  pi.2     <- pi.all[2, ]#
  pi.3     <- pi.all[3, ]
max.contr
library(ggplot2)#
  library(grid)#
  k0        <- pars[1]#
  theta.1   <- pars[2]#
  theta.2   <- pars[3]#
  linf      <- pars[4]#
  mu.yr.1   <- pars[5]#
  mu.yr.2   <- pars[6]#
  var.par.1 <- pars[7]#
  var.par.2 <- pars[8]#
  constrain <- pars[9]#
  if ( constrain == 1 ) {#
  # If male or female we keep the maximum fixed so turn off thetas#
  # above and turn those on below#
  theta.2   <- (theta.1 * (sqrt(1 - cos(2 * pi * max.contr)^2))) /#
                   cos(2 * pi * max.contr) #
  }
setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/Constrained_Max_Var_New")#
  source("bsc_cm_seas_integral_func.R")#
  source("bsc_cm_mean_length_func.R")#
  source("bsc_cm_seas_root_func.R")#
  source("bsc_cm_variance_func_ricker.R")#
  source("bsc_cm_log_likelihood_func.R")#
  source("bsc_cm_pi_calc_func.R")#
  source("bsc_cm_mean_var_optim_func.R")
x.vals <- 0 : 200#
  x.lab.name <- c("Feb., 1985", "Mar., 1985", "Apr., 1985", "May, 1985",#
                  "Jun., 1985", "Jul., 1985", "Aug., 1985", "Feb., 1986",#
                  "Mar., 1986", "Apr., 1986", "May, 1986")#
  # Calculate the means again for the final likelihood update#
  mean.2.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 2, str.mnth = 1)   #
  print(mean.2.yr)    #
  mean.1.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 1, str.mnth = 1)#
  print(mean.1.yr)#
  mean.0.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                     theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                     mu.yr.2 = mu.yr.2, yrs.old = 0, str.mnth = 1)                  #
  # Calculate the variances again for the final likelihood update#
  var.2.yr  <<- sapply(mean.2.yr, BscVar, var.par.1 = var.par.1,#
                     var.par.2 = var.par.2)#
  var.1.yr  <<- sapply(mean.1.yr, BscVar, var.par.1 = var.par.1,#
                     var.par.2 = var.par.2)#
  var.0.yr  <<- sapply(mean.0.yr, BscVar, var.par.1 =  var.par.1,#
                     var.par.2 = var.par.2)#
  print(mean.1.yr)#
  pi.1     <- rep(1/3, num.months)              # Pi mixing prop group 1 #
  pi.2     <- rep(1/3, num.months)#
  pi.3     <- 1 - (pi.1 + pi.2)#
  pi.all   <- sapply(num.months.seq, PiCalc)#
  pi.1     <- pi.all[1, ]#
  pi.2     <- pi.all[2, ]#
  pi.3     <- pi.all[3, ]
mean.1.yr
mean.0.yr
months.lst
MeanLength
# Data preliminaries#
# ------------------#
# Set the working directories#
#setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_Code_Sim/")#
setwd("~/Dropbox/AAUni/APhD/Blueswimmer/RcodesData/Blue_Swimmer_Crab_Code_Sim/BSC_R_code_best/Diff_Variance_Function")#
# Read in the data set on the asymptotic males that was gathered through pots#
lfd.big.males.females <- read.table("LFD_bigMalesFem", header = T)#
# Pull out the lengths and the dates from these data files#
lfd.big.males.females.dates   <- as.Date(lfd.big.males.females$Date, "%d/%m/%y")#
lfd.big.males.females.lengths <- lfd.big.males.females$Carapacewidth#
# Pull out the year and month information from these dates#
lfd.big.males.females.dates.year   <- format(lfd.big.males.females.dates, '%Y')#
lfd.big.males.females.dates.months <- format(lfd.big.males.females.dates, '%m')#
# Read in the trawl data on males that contains juvenile recruitment and adults#
lfd.trawl.males.females <- read.table("LFD")#
# Pull out the lengths and the dates from these data files#
lfd.trawl.males.females.dates   <- as.Date(lfd.trawl.males.females $Date, #
									"%d/%m/%Y")#
lfd.trawl.males.females.lengths <- lfd.trawl.males.females$Carapace.width#
# Concatenate the necessary elements from each file into a common #
# dates and lengths array#
lfd.dates   <- c(lfd.trawl.males.females.dates,   lfd.big.males.females.dates)#
lfd.lengths <- c(lfd.trawl.males.females.lengths, lfd.big.males.females.lengths)#
# Subset for males or females
#Males#
combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
males        <- which(combined.sex == 1)#
lfd.dates    <- lfd.dates[males]#
lfd.lengths  <- lfd.lengths[males]#
lfd.year   <- format(lfd.dates, '%Y')#
lfd.months <- format(lfd.dates, '%m')#
# Pull out the years and months that we are interested in #
# i.e., those that don't contain recruitment#
str.month.yr.1 <- 2#
end.month.yr.1 <- 8#
str.month.yr.2 <- 2#
end.month.yr.2 <- 5#
lfd.85.feb.aug <- which((lfd.year == '1985') & #
				  (as.numeric(lfd.months) %in% (str.month.yr.1:end.month.yr.1)))#
lfd.86.feb.may <- which((lfd.year == '1986') &#
				  (as.numeric(lfd.months) %in% (str.month.yr.2:end.month.yr.2)))#
# Initialise the data for the model #
# ---------------------------------#
num.months       <- 11													#
lengths          <- lfd.lengths[c(lfd.85.feb.aug, lfd.86.feb.may)]		#
months.85        <- as.numeric(lfd.months[lfd.85.feb.aug]) - 1 # Jan = 0th month#
months.86        <- as.numeric(lfd.months[lfd.86.feb.may]) + 11#
months           <- c(months.85, months.86)#
months.lst       <- as.numeric(names(table(months)))	#
num.months.seq   <- seq(1, num.months)#
# Initialise the parameters of the model #
# --------------------------------------#
num.inds <- length(months)                    # Number of individuals we have#
pi.1     <- rep(1/3, num.months)              # Pi mixing prop group 1#
pi.2     <- rep(1/3, num.months)              # Pi mixing prop group 2#
pi.3     <- (1 - (pi.1 + pi.2))               # Pi group 3. Diff from 1#
k0       <- 1.03                              # K0 average K#
linf     <- 160                               # Asym length#
mu.yr.1  <- 60                                # First month's average length yr 1#
mu.yr.2  <- 80                                # First month's average length yr 2#
theta.1  <- 0.9                               # Seasonality parameter 1#
theta.1.comb <- 1.02346756   #
theta.2.comb <- 0.32301298#
max.contr    <- (1 / (2 * pi)) * #
                acos(theta.1.comb /#
                (sqrt(theta.2.comb ^ 2 + #
                theta.1.comb ^ 2)))           # Calculates max of seas curve#
theta.2   <- (theta.1 * (sqrt(1 - cos(2 * #
              pi * max.contr)^2))) /#
              cos(2 * pi * max.contr)         # Theta 2 constrained by max #
var.pars <- c(10, 0.015)                      # Variance fun parameter vector#
pars     <- c(k0, theta.1, linf,              # Parameters in a vector#
              mu.yr.1, mu.yr.2, var.pars) #
# Annnnddd plot#
# -------------#
pars          <- c(1.04, 0.989, 0.312, 172.7, 70.1, 81.6, 55.1, 82.1, 0.0321, 1)#
BscPlotNew(pars)
rm(list = ls())
# Remove any objects to clear the slate#
rm(list = ls( ))#
# Source the function files needed#
# --------------------------------#
setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/Constrained_Max_Var_New")#
source("bsc_cm_seas_integral_func.R")#
source("bsc_cm_mean_length_func.R")#
source("bsc_cm_seas_root_func.R")#
source("bsc_cm_variance_func_ricker.R")#
source("bsc_cm_log_likelihood_func.R")#
source("bsc_cm_pi_calc_func.R")#
source("bsc_cm_mean_var_optim_func.R")#
source("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/bsc_plot_func.R")#
# Data preliminaries#
# ------------------#
# Set the working directories#
#setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_Code_Sim/")#
setwd("~/Dropbox/AAUni/APhD/Blueswimmer/RcodesData/Blue_Swimmer_Crab_Code_Sim/BSC_R_code_best/Diff_Variance_Function")#
# Read in the data set on the asymptotic males that was gathered through pots#
lfd.big.males.females <- read.table("LFD_bigMalesFem", header = T)#
# Pull out the lengths and the dates from these data files#
lfd.big.males.females.dates   <- as.Date(lfd.big.males.females$Date, "%d/%m/%y")#
lfd.big.males.females.lengths <- lfd.big.males.females$Carapacewidth#
# Pull out the year and month information from these dates#
lfd.big.males.females.dates.year   <- format(lfd.big.males.females.dates, '%Y')#
lfd.big.males.females.dates.months <- format(lfd.big.males.females.dates, '%m')#
# Read in the trawl data on males that contains juvenile recruitment and adults#
lfd.trawl.males.females <- read.table("LFD")#
# Pull out the lengths and the dates from these data files#
lfd.trawl.males.females.dates   <- as.Date(lfd.trawl.males.females $Date, #
									"%d/%m/%Y")#
lfd.trawl.males.females.lengths <- lfd.trawl.males.females$Carapace.width#
# Concatenate the necessary elements from each file into a common #
# dates and lengths array#
lfd.dates   <- c(lfd.trawl.males.females.dates,   lfd.big.males.females.dates)#
lfd.lengths <- c(lfd.trawl.males.females.lengths, lfd.big.males.females.lengths)
#Males#
combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
males        <- which(combined.sex == 1)#
lfd.dates    <- lfd.dates[males]#
lfd.lengths  <- lfd.lengths[males]#
lfd.year   <- format(lfd.dates, '%Y')#
lfd.months <- format(lfd.dates, '%m')#
# Pull out the years and months that we are interested in #
# i.e., those that don't contain recruitment#
str.month.yr.1 <- 2#
end.month.yr.1 <- 8#
str.month.yr.2 <- 2#
end.month.yr.2 <- 5#
lfd.85.feb.aug <- which((lfd.year == '1985') & #
				  (as.numeric(lfd.months) %in% (str.month.yr.1:end.month.yr.1)))#
lfd.86.feb.may <- which((lfd.year == '1986') &#
				  (as.numeric(lfd.months) %in% (str.month.yr.2:end.month.yr.2)))#
# Initialise the data for the model #
# ---------------------------------#
num.months       <- 11													#
lengths          <- lfd.lengths[c(lfd.85.feb.aug, lfd.86.feb.may)]		#
months.85        <- as.numeric(lfd.months[lfd.85.feb.aug]) - 1 # Jan = 0th month#
months.86        <- as.numeric(lfd.months[lfd.86.feb.may]) + 11#
months           <- c(months.85, months.86)#
months.lst       <- as.numeric(names(table(months)))	#
num.months.seq   <- seq(1, num.months)#
# Initialise the parameters of the model #
# --------------------------------------#
num.inds <- length(months)                    # Number of individuals we have#
pi.1     <- rep(1/3, num.months)              # Pi mixing prop group 1#
pi.2     <- rep(1/3, num.months)              # Pi mixing prop group 2#
pi.3     <- (1 - (pi.1 + pi.2))               # Pi group 3. Diff from 1#
k0       <- 1.03                              # K0 average K#
linf     <- 160                               # Asym length#
mu.yr.1  <- 60                                # First month's average length yr 1#
mu.yr.2  <- 80                                # First month's average length yr 2#
theta.1  <- 0.9                               # Seasonality parameter 1#
theta.1.comb <- 1.02346756   #
theta.2.comb <- 0.32301298#
max.contr    <- (1 / (2 * pi)) * #
                acos(theta.1.comb /#
                (sqrt(theta.2.comb ^ 2 + #
                theta.1.comb ^ 2)))           # Calculates max of seas curve#
theta.2   <- (theta.1 * (sqrt(1 - cos(2 * #
              pi * max.contr)^2))) /#
              cos(2 * pi * max.contr)         # Theta 2 constrained by max #
var.pars <- c(10, 0.015)                      # Variance fun parameter vector#
pars     <- c(k0, theta.1, linf,              # Parameters in a vector#
              mu.yr.1, mu.yr.2, var.pars) #
# Annnnddd plot#
# -------------#
pars          <- c(1.04, 0.989, 0.312, 172.7, 70.1, 81.6, 55.1, 82.1, 0.0321, 1)#
BscPlotNew(pars)
k0        <- pars[1]#
  theta.1   <- pars[2]#
  theta.2   <- pars[3]#
  linf      <- pars[4]#
  mu.yr.1   <- pars[5]#
  mu.yr.2   <- pars[6]#
  var.par.1 <- pars[7]#
  var.par.2 <- pars[8]#
  constrain <- pars[9]#
  if ( constrain == 1 ) {#
  # If male or female we keep the maximum fixed so turn off thetas#
  # above and turn those on below#
  theta.2   <- (theta.1 * (sqrt(1 - cos(2 * pi * max.contr)^2))) /#
                   cos(2 * pi * max.contr) #
  }#
  setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/Constrained_Max_Var_New")#
  source("bsc_cm_seas_integral_func.R")#
  source("bsc_cm_mean_length_func.R")#
  source("bsc_cm_seas_root_func.R")#
  source("bsc_cm_variance_func_ricker.R")#
  source("bsc_cm_log_likelihood_func.R")#
  source("bsc_cm_pi_calc_func.R")#
  source("bsc_cm_mean_var_optim_func.R")
linf
theta.2
if ( constrain == 1 ) {#
  # If male or female we keep the maximum fixed so turn off thetas#
  # above and turn those on below#
  theta.2   <- (theta.1 * (sqrt(1 - cos(2 * pi * max.contr)^2))) /#
                   cos(2 * pi * max.contr) #
  }
theta.2
x.vals <- 0 : 200#
  x.lab.name <- c("Feb., 1985", "Mar., 1985", "Apr., 1985", "May, 1985",#
                  "Jun., 1985", "Jul., 1985", "Aug., 1985", "Feb., 1986",#
                  "Mar., 1986", "Apr., 1986", "May, 1986")#
  # Calculate the means again for the final likelihood update#
  mean.2.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                       theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                       mu.yr.2 = mu.yr.2, yrs.old = 2, str.mnth = 1)   #
  print(mean.2.yr)    #
  mean.1.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                       theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                       mu.yr.2 = mu.yr.2, yrs.old = 1, str.mnth = 1)#
  print(mean.1.yr)#
  mean.0.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                       theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                       mu.yr.2 = mu.yr.2, yrs.old = 0, str.mnth = 1)
var.2.yr  <<- sapply(mean.2.yr, BscVar, var.par.1 = var.par.1,#
                       var.par.2 = var.par.2)#
  var.1.yr  <<- sapply(mean.1.yr, BscVar, var.par.1 = var.par.1,#
                       var.par.2 = var.par.2)#
  var.0.yr  <<- sapply(mean.0.yr, BscVar, var.par.1 =  var.par.1,#
                       var.par.2 = var.par.2)
var.2.yr
var.1.yr
var.0.yr
k0
theta.1
sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                       theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                       mu.yr.2 = mu.yr.2, yrs.old = 2, str.mnth = 1)
sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                       theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                       mu.yr.2 = mu.yr.2, yrs.old = 1, str.mnth = 1)
MeanLength
months.lst
mean.2.yr
MeanLength(k0, theta.1, theta.2, linf , mu.yr.1, mu.yr.2, 0, 1)
MeanLength(2k0, theta.1, theta.2, linf , mu.yr.1, mu.yr.2, 0, 1)
MeanLength(2, k0, theta.1, theta.2, linf , mu.yr.1, mu.yr.2, 0, 1)
mu.yr.1
pars          <- c(0.881, 1.06, 0.311, 176.3, 64.5, 79.9, 33.3, 0.0253, 0)
BscPlotNew(pars)
print(mean.0.yr)
pars          <- c(1.04, 0.989, 0.312, 172.7, 70.1, 81.6, 55.1, 82.1, 0.0321, 1)
BscPlotNew(pars)
pars          <- c(1.04, 0.989, 0.312, 172.7, 70.1, 81.6, 55.1, 82.1, 0.0321, 0)
BscPlotNew(pars)
pars          <- c(1.04, 0.989, 0.312, 172.7, 70.1, 81.6, 82.1, 0.0321, 0)
BscPlotNew(pars)
pars          <- c(1.04, 0.989, 0.312, 172.7, 70.1, 81.6, 82.1, 0.0321, 1)
BscPlotNew(pars)
months
lengths
setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/Constrained_Max_Var_New")#
source("bsc_cm_seas_integral_func.R")#
source("bsc_cm_mean_length_func.R")#
source("bsc_cm_seas_root_func.R")#
source("bsc_cm_variance_func_ricker.R")#
source("bsc_cm_log_likelihood_func.R")#
source("bsc_cm_pi_calc_func.R")#
source("bsc_cm_mean_var_optim_func.R")#
source("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/bsc_plot_func.R")#
# Data preliminaries#
# ------------------#
# Set the working directories#
#setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_Code_Sim/")#
setwd("~/Dropbox/AAUni/APhD/Blueswimmer/RcodesData/Blue_Swimmer_Crab_Code_Sim/BSC_R_code_best/Diff_Variance_Function")#
# Read in the data set on the asymptotic males that was gathered through pots#
lfd.big.males.females <- read.table("LFD_bigMalesFem", header = T)#
# Pull out the lengths and the dates from these data files#
lfd.big.males.females.dates   <- as.Date(lfd.big.males.females$Date, "%d/%m/%y")#
lfd.big.males.females.lengths <- lfd.big.males.females$Carapacewidth#
# Pull out the year and month information from these dates#
lfd.big.males.females.dates.year   <- format(lfd.big.males.females.dates, '%Y')#
lfd.big.males.females.dates.months <- format(lfd.big.males.females.dates, '%m')#
# Read in the trawl data on males that contains juvenile recruitment and adults#
lfd.trawl.males.females <- read.table("LFD")#
# Pull out the lengths and the dates from these data files#
lfd.trawl.males.females.dates   <- as.Date(lfd.trawl.males.females $Date, #
									"%d/%m/%Y")#
lfd.trawl.males.females.lengths <- lfd.trawl.males.females$Carapace.width#
# Concatenate the necessary elements from each file into a common #
# dates and lengths array#
lfd.dates   <- c(lfd.trawl.males.females.dates,   lfd.big.males.females.dates)#
lfd.lengths <- c(lfd.trawl.males.females.lengths, lfd.big.males.females.lengths)#
# Subset for males or females#
#Males#
#combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
#males        <- which(combined.sex == 1)#
#lfd.dates    <- lfd.dates[males]#
#lfd.lengths  <- lfd.lengths[males]#
# Females#
# combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
# females      <- which(combined.sex == 2)#
# lfd.dates    <- lfd.dates[females]#
# lfd.lengths  <- lfd.lengths[females]#
# Pull out the year and month information from these dates#
lfd.year   <- format(lfd.dates, '%Y')#
lfd.months <- format(lfd.dates, '%m')#
# Pull out the years and months that we are interested in #
# i.e., those that don't contain recruitment#
str.month.yr.1 <- 2#
end.month.yr.1 <- 8#
str.month.yr.2 <- 2#
end.month.yr.2 <- 5#
lfd.85.feb.aug <- which((lfd.year == '1985') & #
				  (as.numeric(lfd.months) %in% (str.month.yr.1:end.month.yr.1)))#
lfd.86.feb.may <- which((lfd.year == '1986') &#
				  (as.numeric(lfd.months) %in% (str.month.yr.2:end.month.yr.2)))
# Remove any objects to clear the slate#
rm(list = ls( ))#
# Source the function files needed#
# --------------------------------#
setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/Constrained_Max_Var_New")#
source("bsc_cm_seas_integral_func.R")#
source("bsc_cm_mean_length_func.R")#
source("bsc_cm_seas_root_func.R")#
source("bsc_cm_variance_func_ricker.R")#
source("bsc_cm_log_likelihood_func.R")#
source("bsc_cm_pi_calc_func.R")#
source("bsc_cm_mean_var_optim_func.R")#
source("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/bsc_plot_func.R")#
# Data preliminaries#
# ------------------#
# Set the working directories#
#setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_Code_Sim/")#
setwd("~/Dropbox/AAUni/APhD/Blueswimmer/RcodesData/Blue_Swimmer_Crab_Code_Sim/BSC_R_code_best/Diff_Variance_Function")#
# Read in the data set on the asymptotic males that was gathered through pots#
lfd.big.males.females <- read.table("LFD_bigMalesFem", header = T)#
# Pull out the lengths and the dates from these data files#
lfd.big.males.females.dates   <- as.Date(lfd.big.males.females$Date, "%d/%m/%y")#
lfd.big.males.females.lengths <- lfd.big.males.females$Carapacewidth#
# Pull out the year and month information from these dates#
lfd.big.males.females.dates.year   <- format(lfd.big.males.females.dates, '%Y')#
lfd.big.males.females.dates.months <- format(lfd.big.males.females.dates, '%m')#
# Read in the trawl data on males that contains juvenile recruitment and adults#
lfd.trawl.males.females <- read.table("LFD")#
# Pull out the lengths and the dates from these data files#
lfd.trawl.males.females.dates   <- as.Date(lfd.trawl.males.females $Date, #
									"%d/%m/%Y")#
lfd.trawl.males.females.lengths <- lfd.trawl.males.females$Carapace.width#
# Concatenate the necessary elements from each file into a common #
# dates and lengths array#
lfd.dates   <- c(lfd.trawl.males.females.dates,   lfd.big.males.females.dates)#
lfd.lengths <- c(lfd.trawl.males.females.lengths, lfd.big.males.females.lengths)#
# Subset for males or females#
#Males#
#combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
#males        <- which(combined.sex == 1)#
#lfd.dates    <- lfd.dates[males]#
#lfd.lengths  <- lfd.lengths[males]#
# Females#
# combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
# females      <- which(combined.sex == 2)#
# lfd.dates    <- lfd.dates[females]#
# lfd.lengths  <- lfd.lengths[females]#
# Pull out the year and month information from these dates#
lfd.year   <- format(lfd.dates, '%Y')#
lfd.months <- format(lfd.dates, '%m')#
# Pull out the years and months that we are interested in #
# i.e., those that don't contain recruitment#
str.month.yr.1 <- 2#
end.month.yr.1 <- 8#
str.month.yr.2 <- 2#
end.month.yr.2 <- 5#
lfd.85.feb.aug <- which((lfd.year == '1985') & #
				  (as.numeric(lfd.months) %in% (str.month.yr.1:end.month.yr.1)))#
lfd.86.feb.may <- which((lfd.year == '1986') &#
				  (as.numeric(lfd.months) %in% (str.month.yr.2:end.month.yr.2)))
#Males#
combined.sex <- c(lfd.trawl.males.females$Sex,   lfd.big.males.females$Sex)#
males        <- which(combined.sex == 1)#
lfd.dates    <- lfd.dates[males]#
lfd.lengths  <- lfd.lengths[males]#
lfd.year   <- format(lfd.dates, '%Y')#
lfd.months <- format(lfd.dates, '%m')#
# Pull out the years and months that we are interested in #
# i.e., those that don't contain recruitment#
str.month.yr.1 <- 2#
end.month.yr.1 <- 8#
str.month.yr.2 <- 2#
end.month.yr.2 <- 5#
lfd.85.feb.aug <- which((lfd.year == '1985') & #
				  (as.numeric(lfd.months) %in% (str.month.yr.1:end.month.yr.1)))#
lfd.86.feb.may <- which((lfd.year == '1986') &#
				  (as.numeric(lfd.months) %in% (str.month.yr.2:end.month.yr.2)))#
# Initialise the data for the model #
# ---------------------------------#
num.months       <- 11													#
lengths          <- lfd.lengths[c(lfd.85.feb.aug, lfd.86.feb.may)]		#
months.85        <- as.numeric(lfd.months[lfd.85.feb.aug]) - 1 # Jan = 0th month#
months.86        <- as.numeric(lfd.months[lfd.86.feb.may]) + 11#
months           <- c(months.85, months.86)#
months.lst       <- as.numeric(names(table(months)))	#
num.months.seq   <- seq(1, num.months)#
# Initialise the parameters of the model #
# --------------------------------------#
num.inds <- length(months)                    # Number of individuals we have#
pi.1     <- rep(1/3, num.months)              # Pi mixing prop group 1#
pi.2     <- rep(1/3, num.months)              # Pi mixing prop group 2#
pi.3     <- (1 - (pi.1 + pi.2))               # Pi group 3. Diff from 1#
k0       <- 1.03                              # K0 average K#
linf     <- 160                               # Asym length#
mu.yr.1  <- 60                                # First month's average length yr 1#
mu.yr.2  <- 80                                # First month's average length yr 2#
theta.1  <- 0.9                               # Seasonality parameter 1#
theta.1.comb <- 1.02346756   #
theta.2.comb <- 0.32301298#
max.contr    <- (1 / (2 * pi)) * #
                acos(theta.1.comb /#
                (sqrt(theta.2.comb ^ 2 + #
                theta.1.comb ^ 2)))           # Calculates max of seas curve#
theta.2   <- (theta.1 * (sqrt(1 - cos(2 * #
              pi * max.contr)^2))) /#
              cos(2 * pi * max.contr)         # Theta 2 constrained by max #
var.pars <- c(10, 0.015)                      # Variance fun parameter vector#
pars     <- c(k0, theta.1, linf,              # Parameters in a vector#
              mu.yr.1, mu.yr.2, var.pars)
pars          <- c(1.04, 0.989, 0.312, 172.7, 70.1, 81.6, 82.1, 0.0321, 1)
BscPlotNew(pars)
k0
linf
mu.yr.1
pars
library(ggplot2)#
  library(grid)#
  k0        <- pars[1]#
  theta.1   <- pars[2]#
  theta.2   <- pars[3]#
  linf      <- pars[4]#
  mu.yr.1   <- pars[5]#
  mu.yr.2   <- pars[6]#
  var.par.1 <- pars[7]#
  var.par.2 <- pars[8]#
  constrain <- pars[9]#
  if ( constrain == 1 ) {#
  # If male or female we keep the maximum fixed so turn off thetas#
  # above and turn those on below#
  theta.2   <- (theta.1 * (sqrt(1 - cos(2 * pi * max.contr)^2))) /#
                   cos(2 * pi * max.contr) #
  }#
  setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/Constrained_Max_Var_New")#
  source("bsc_cm_seas_integral_func.R")#
  source("bsc_cm_mean_length_func.R")#
  source("bsc_cm_seas_root_func.R")#
  source("bsc_cm_variance_func_ricker.R")#
  source("bsc_cm_log_likelihood_func.R")#
  source("bsc_cm_pi_calc_func.R")#
  source("bsc_cm_mean_var_optim_func.R")
x.vals <- 0 : 200#
  x.lab.name <- c("Feb., 1985", "Mar., 1985", "Apr., 1985", "May, 1985",#
                  "Jun., 1985", "Jul., 1985", "Aug., 1985", "Feb., 1986",#
                  "Mar., 1986", "Apr., 1986", "May, 1986")#
  # Calculate the means again for the final likelihood update#
  mean.2.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                       theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                       mu.yr.2 = mu.yr.2, yrs.old = 2, str.mnth = 1)   #
  print(mean.2.yr)    #
  mean.1.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                       theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                       mu.yr.2 = mu.yr.2, yrs.old = 1, str.mnth = 1)#
  print(mean.1.yr)#
  mean.0.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                       theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                       mu.yr.2 = mu.yr.2, yrs.old = 0, str.mnth = 1)                  #
  # Calculate the variances again for the final likelihood update#
  var.2.yr  <<- sapply(mean.2.yr, BscVar, var.par.1 = var.par.1,#
                       var.par.2 = var.par.2)#
  var.1.yr  <<- sapply(mean.1.yr, BscVar, var.par.1 = var.par.1,#
                       var.par.2 = var.par.2)#
  var.0.yr  <<- sapply(mean.0.yr, BscVar, var.par.1 = var.par.1,#
                       var.par.2 = var.par.2)
print(mean.0.yr)
k0
theta.1
theta.2
linf
mu.yr.1
mu.yr.2
month    = 2 #
  k0       = pars[1]#
  theta.1  = pars[2]#
  theta.2  = (theta.1 * (sqrt(1 - cos(2 * pi * max.contr)^2))) /#
                   # cos(2 * pi * max.contr)  #
  linf     = pars[3]#
  mu.yr.1  = pars[4]#
  mu.yr.2  = pars[5]
month    = 2 #
  k0       = pars[1]#
  theta.1  = pars[2]#
  theta.2  = (theta.1 * (sqrt(1 - cos(2 * pi * max.contr)^2))) /#
             cos(2 * pi * max.contr)  #
  linf     = pars[3]#
  mu.yr.1  = pars[4]#
  mu.yr.2  = pars[5]#
  yrs.old  = 2#
  str.mnth = 1
# Set each of the months to be the middle of the month (1/24 to be used#
  # with the seasonal function.#
  mm.val  <- (month %% 12) / 12 + 1 / 24 + yrs.old#
  str.mid <- str.mnth / 12 + 1 / 24 + yrs.old#
  end.mid <- 1 + 1 / 24 + yrs.old#
  # Assess whether the parameters at this update cross the y=0 axis#
  # This will allow us to assess whether we need to calculate roots #
  # for the seasonal function or not#
  time.var  <- seq(0, 1, 0.01)#
  seas.func <- SeasFunc(k0, theta.1, theta.2, time.var)#
  is.neg.1  <- min(seas.func)#
  is.neg.2  <- max(seas.func)#
  if (is.neg.1 < 0 & is.neg.2 > 0) {#
	# Calculate the roots of the seasonal function #
    root.1 <- SeasRootCalc(k0, theta.1, theta.2, yrs.old)[1]#
    root.2 <- SeasRootCalc(k0, theta.1, theta.2, yrs.old)[2]#
	# Given the roots calculate the integral over the previous years#
	# This is equal to the integral up to the first root + the in#
	int.root.1   <- SeasIntegFunc(k0, theta.1, theta.2, str.mid, root.1)#
	int.root.2   <- SeasIntegFunc(k0, theta.1, theta.2, root.2,  end.mid)#
	int.yrs.prvs <- yrs.old * (int.root.1 + int.root.2)#
    # Integral for those months less than root 1#
    if (mm.val <= root.1) {#
      integral = int.yrs.prvs + #
                 SeasIntegFunc(k0, theta.1, theta.2, str.mid, mm.val)#
    }#
    # Integral for those months greater than root 1 but less than root 2#
#
    if (mm.val > root.1 & mm.val < root.2) {#
    	integral = int.yrs.prvs +#
                   SeasIntegFunc(k0, theta.1, theta.2, str.mid, root.1)#
    }#
    # Integral for those months less than root 1#
    if (mm.val >= root.2) {#
       int.root.1.1 <- SeasIntegFunc(k0, theta.1, theta.2, str.mid, root.1)#
       int.root.2.1 <- SeasIntegFunc(k0, theta.1, theta.2, root.2,  mm.val)#
	   integral     <- int.root.1.1 + int.root.2.1 + int.yrs.prvs#
	  }#
    } else {#
    # If the integral doesn't have a negative component#
    integral = SeasIntegFunc(k0, theta.1, theta.2, str.mid, mm.val)#
    }#
  #print(integral)#
  # If the months are for the first or second year make sure to#
  # assign the correct mean length for that year#
  if (month > 11) {#
    return(mu.yr.2 + (linf - mu.yr.2) * (1-exp(-integral)))#
  } else {#
 	# For the months in the first year #
    return(mu.yr.1 + (linf - mu.yr.1) * (1-exp(-integral)))#
  }
mu.yr.1 + (linf - mu.yr.1) * (1-exp(-integral))
k0
MeanLength(2, k0, theta.1, theta.2, linf, mu.yr.1, mu.yr.2, 2, 1)
MeanLength(2, k0, theta.1, theta.2, linf, mu.yr.1, mu.yr.2, 1, 1)
mean.1.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                       theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                       mu.yr.2 = mu.yr.2, yrs.old = 1, str.mnth = 1)
mean.1.yr
library(ggplot2)#
  library(grid)#
  k0        <- pars[1]#
  theta.1   <- pars[2]#
  theta.2   <- pars[3]#
  linf      <- pars[4]#
  mu.yr.1   <- pars[5]#
  mu.yr.2   <- pars[6]#
  var.par.1 <- pars[7]#
  var.par.2 <- pars[8]#
  constrain <- pars[9]#
  if ( constrain == 1 ) {#
  # If male or female we keep the maximum fixed so turn off thetas#
  # above and turn those on below#
  theta.2   <- (theta.1 * (sqrt(1 - cos(2 * pi * max.contr)^2))) /#
                   cos(2 * pi * max.contr) #
  }#
  setwd("~/Dropbox/Git_Repos/Fisheries_R_Scripts/Blue_Swimmer_Crab_R/Constrained_Max_Var_New")#
  source("bsc_cm_seas_integral_func.R")#
  source("bsc_cm_mean_length_func.R")#
  source("bsc_cm_seas_root_func.R")#
  source("bsc_cm_variance_func_ricker.R")#
  source("bsc_cm_log_likelihood_func.R")#
  source("bsc_cm_pi_calc_func.R")#
  source("bsc_cm_mean_var_optim_func.R")#
#
  # Declare some plotting parameters#
  x.vals <- 0 : 200#
  x.lab.name <- c("Feb., 1985", "Mar., 1985", "Apr., 1985", "May, 1985",#
                  "Jun., 1985", "Jul., 1985", "Aug., 1985", "Feb., 1986",#
                  "Mar., 1986", "Apr., 1986", "May, 1986")#
  # Calculate the means again for the final likelihood update#
  mean.2.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                       theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                       mu.yr.2 = mu.yr.2, yrs.old = 2, str.mnth = 1)   #
  print(mean.2.yr)    #
  mean.1.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                       theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                       mu.yr.2 = mu.yr.2, yrs.old = 1, str.mnth = 1)#
  print(mean.1.yr)#
  mean.0.yr <<- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                       theta.2 = theta.2, linf = linf , mu.yr.1 = mu.yr.1, #
                       mu.yr.2 = mu.yr.2, yrs.old = 0, str.mnth = 1)
MeanLength(2, k0, theta.1, theta.2, linf, mu.yr.1, mu.yr.2, 1, 1)
MeanLength(2, k0, theta.1, theta.2, linf, mu.yr.1, mu.yr.2, 2, 1)
k0
theta.1
theta.2
linf
mu.yr.1
mu.yr.2
var.par.1
var.par.2
# ==============================================================================#
# ==============================================================================#
#     SCRIPT TO IMPLEMENT ALGORITHM FOR SOLVING FOR GROWTH PARAMETERS     #
#     VIA THE METHOD OUTLINED IN LLOYD-JONES ET AL. USES AN MM ALGORI     #
#     THM AND THE OPTIM FUNCTION TO OPTIMISE OVER LENGTH FREQUENCY DA     #
#     TA SETS.                                                            #
# ==============================================================================#
# ==============================================================================#
# Remove any objects to clear the slate#
rm(list = ls())#
# ------------------------------------------------------------------------------#
# Source the function files needed#
# ------------------------------------------------------------------------------#
setwd("~/Desktop/bsc_r_codes_data/")#
mtdgm_bsc#
source("mtdgm_bsc/mtdgm_log_likelihood_func.R")#
source("mtdgm_bsc/mtdgm_mean_length_func.R")#
source("mtdgm_bsc/mtdgm_mean_var_optim_func.R")#
source("mtdgm_bsc/mtdgm_plot_func.R")#
source("mtdgm_bsc/mtdgm_seas_integral_func.R")#
source("mtdgm_bsc/mtdgm_seas_root_func.R")#
source("mtdgm_bsc/mtdgm_var_ricker_func.R")#
#source("MTDGM_BSC/mtdgm_var_quad.R")#
source("mtdgm_bsc/mtdgm_pi_calc_func.R")#
# ------------------------------------------------------------------------------#
# Data preliminaries#
# ------------------------------------------------------------------------------#
# Read in the data set on the asymptotic males that was gathered through pots#
lfd.big.males.females <- read.table("data/bsc/bsc_lfd_pot.txt", header = T)#
# Pull out the lengths and the dates from these data files#
lfd.big.males.females.dates   <- as.Date(lfd.big.males.females$Date, "%d/%m/%y")#
lfd.big.males.females.lengths <- lfd.big.males.females$Carapacewidth#
# Pull out the year and month information from these dates#
lfd.big.males.females.dates.year   <- format(lfd.big.males.females.dates, '%Y')#
lfd.big.males.females.dates.months <- format(lfd.big.males.females.dates, '%m')#
# Read in the trawl data on males that contains juvenile recruitment and adults#
lfd.trawl.males.females <- read.table("data/bsc/bsc_lfd_trawl.txt")#
# Pull out the lengths and the dates from these data files#
lfd.trawl.males.females.dates   <- as.Date(lfd.trawl.males.females $Date, #
									"%d/%m/%Y")#
lfd.trawl.males.females.lengths <- lfd.trawl.males.females$Carapace.width#
with.pot = 1#
# Concatenate the necessary elements from each file into a common #
# dates and lengths array#
if (with.pot == 1)#
{#
  lfd.dates    <- c(lfd.trawl.males.females.dates,   lfd.big.males.females.dates)#
  lfd.lengths  <- c(lfd.trawl.males.females.lengths, lfd.big.males.females.lengths)#
  combined.sex <- c(lfd.trawl.males.females$Sex,     lfd.big.males.females$Sex)#
} else#
{#
  lfd.dates    <- c(lfd.trawl.males.females.dates)#
  lfd.lengths  <- c(lfd.trawl.males.females.lengths)	#
  combined.sex <- c(lfd.trawl.males.females$Sex)#
}#
# ------------------------------------------------------------------------------#
# Subset for males or females#
# ------------------------------------------------------------------------------#
males.on <- 0#
comb.on  <- 0#
if (males.on == 1 & comb.on != 1)#
{#
  # Males#
  # -----#
  males        <- which(combined.sex == 1)#
  lfd.dates    <- lfd.dates[males]#
  lfd.lengths  <- lfd.lengths[males]#
} else if (males.on != 1 & comb.on != 1)#
{#
  # Females#
  # -------#
  females      <- which(combined.sex == 2)#
  lfd.dates    <- lfd.dates[females]#
  lfd.lengths  <- lfd.lengths[females]#
}#
# Pull out the year and month information from these dates#
lfd.year   <- format(lfd.dates, '%Y')#
lfd.months <- format(lfd.dates, '%m')#
# Pull out the years and months that we are interested in #
# i.e., those that don't contain recruitment#
str.month.yr.1 <- 2#
end.month.yr.1 <- 8#
str.month.yr.2 <- 2#
end.month.yr.2 <- 5#
lfd.85 <- which((lfd.year == '1985') & #
				(as.numeric(lfd.months) %in% (str.month.yr.1:end.month.yr.1)))#
lfd.86 <- which((lfd.year == '1986') &#
				(as.numeric(lfd.months) %in% (str.month.yr.2:end.month.yr.2)))#
# ------------------------------------------------------------------------------#
# Initialise the data for the model #
# ------------------------------------------------------------------------------	#
lengths         <- lfd.lengths[c(lfd.85, lfd.86)]		#
months.85       <- as.numeric(lfd.months[lfd.85]) - 1 # Jan = 0th month#
months.86       <- as.numeric(lfd.months[lfd.86]) + 11#
months          <- c(months.85, months.86)#
num.months      <- length(names(table(months)))	#
months.lst      <- as.numeric(names(table(months)))#
no.grps.par     <- 3#
mu.init.par     <- c(0.5, 185, 50, 70)#
theta.const     <- 0#
thetas.par      <- c(-0.2, 0.2)#
#thetas.par      <- c(0.68338122,   0.05821895)#
var.init.par    <- c(19, 0.015) #
yrs.old.par     <- c(0, 1, 2)#
str.mnth.par    <- 1#
num.months.seq  <- seq(1, num.months)#
# ------------------------------------------------------------------------------#
# Initialise the parameters of the model #
# ------------------------------------------------------------------------------	#
num.inds <- length(months)                     # Number of individuals #
no.grps  <- no.grps.par#
pi.init  <- rep(1 / no.grps, num.months)#
pis      <- matrix(rep(pi.init, each = no.grps), nrow = num.months, #
                   ncol = no.grps)#
mu.init  <- mu.init.par#
if (theta.const == 1)#
{#
	theta.1    <- thetas.par[1]   #
	theta.2    <- thetas.par[2] #
	max.contr  <- (1 / (2 * pi)) * #
                  acos(theta.1  /#
                  (sqrt(theta.2 ^ 2 + #
               	  theta.1 ^ 2)))                # Calculates max of seas curve#
	theta.2    <- (theta.1 * (sqrt(1 - cos(2 * #
              	  pi * max.contr) ^ 2))) /#
                  cos(2 * pi * max.contr)       # Theta 2 constrained by max #
} else #
{#
	theta.1    <- thetas.par[1]   #
	theta.2    <- thetas.par[2] #
}#
k0      <- mu.init[1]#
linf    <- mu.init[2]#
mu.yr   <- mu.init[3:length(mu.init)]#
thetas  <- c(theta.1, theta.2)#
var.par <- var.init.par                       # Variance fun parameter vector#
# ------------------------------------------------------------------------------#
# Initialise the likelihood and set tolerence#
# ------------------------------------------------------------------------------#
mean.mnth.coh.mn <<- matrix(0, nrow = num.months, ncol = no.grps)#
var.mnth.coh.mn  <<- matrix(0, nrow = num.months, ncol = no.grps)#
for (i in seq(1, no.grps))#
{#
  mean.mnth.coh.mn[, i] <-  sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                      	         theta.2 = theta.2, linf = linf , mu.yr = mu.yr, #
                      	         yrs.old = yrs.old.par[i], str.mnth = str.mnth.par)       #
}                  #
# Calculate the variances given the current update of the parameters#
for (i in seq(1, no.grps))#
{           #
  var.mnth.coh.mn[, i] <- sapply(mean.mnth.coh.mn[, i], BscVar, var.par.1 = var.par[1],#
                                var.par.2 = var.par[2])#
}   #
if (theta.const == 1)#
{#
	pars <- c(k0, linf, thetas[1], var.par, mu.yr)#
} else {#
	pars <- c(k0, linf, thetas, var.par, mu.yr)#
}#
MeanVarOptim(pars)	#
log.like.full <- -10e5#
tol           <- 10e-6#
log.like.old  <- -Inf	#
# ------------------------------------------------------------------------------	#
# Run while loop over procedure until convergence#
# -----------------------------------------------	#
while (log.like.full - log.like.old > tol) {#
#
  # Shift the current likelihood to the old likelihood#
  log.like.old <- log.like.full #
  # Calculate the pi for each group in each month#
  # ---------------------------------------------#
#
  # Returns a vector of pi with each column representing a month#
  # and each row a group. Row 1 the largest. Row 2 the yr olds#
  # and row 3 the juveniles#
#
  pis <- t(sapply(num.months.seq, PiCalc))#
  # Optimise the parameters for the means#
  # -------------------------------------#
  # Initialise and optimise#
  if (theta.const == 1)#
  {#
	pars <- c(k0, linf, thetas[1], var.par, mu.yr)#
  } else {#
	pars <- c(k0, linf, thetas, var.par, mu.yr)#
  }#
  optim.means.var <- optim(pars, MeanVarOptim, control = list(maxit = 100000))	#
  pars            <- optim.means.var$par#
  # Ask if optim converged#
  print("Did optim converge?")#
  print(optim.means.var$convergence)#
  # Re-define the global parameters#
  if (theta.const == 1)#
  {#
  	k0         <- pars[1]#
  	linf       <- pars[2]#
  	theta.1    <- pars[3]#
  	var.par.1  <- pars[4]#
  	var.par.2  <- pars[5]#
  	mu.yr      <- pars[6:length(pars)]#
  } else #
  {#
  	k0         <- pars[1]#
  	linf       <- pars[2]#
  	theta.1    <- pars[3]#
  	theta.2    <- pars[4]#
  	var.par.1  <- pars[5]#
  	var.par.2  <- pars[6]#
  	mu.yr      <- pars[7:length(pars)]#
  }#
  # If male or female we keep thetas fixed so turn off thetas#
  # above and turn those on below. Look in bsc_mean_var_func.R#
  # for more details#
  if (theta.const == 1)#
  {#
  	theta.2   <- (theta.1 * (sqrt(1 - cos(2 * pi * max.contr)^2))) /#
                 cos(2 * pi * max.contr) #
  }#
  # Calculate the means again for the final likelihood update#
  for (i in seq(1, no.grps))#
  {#
  	mean.mnth.coh.mn[, i] <- sapply(months.lst, MeanLength, k0 = k0, theta.1 = theta.1, #
                      	            theta.2 = theta.2, linf = linf , mu.yr = mu.yr, #
                      	            yrs.old = yrs.old.par[i], str.mnth = str.mnth.par)       #
  }                  #
  # Calculate the variances given the current update of the parameters#
  for (i in seq(1, no.grps))#
  {           #
  	var.mnth.coh.mn[, i] <- sapply(mean.mnth.coh.mn[, i], BscVar, var.par.1 = var.par.1,#
                                   var.par.2 = var.par.2)#
  }#
  # Evaluate the likelihood#
  log.like.full <- sum(sapply(num.months.seq, LogLikelihood2))#
  # Give a plot of the current state of the model versus the data#
#
  # BscPlotNew(c(theta.const, pars))#
#
  # Pars including sigma^2 linf and theta 2#
  pars.inc <- c(pars, theta.2, BscVar(var.par.1, var.par.2, linf))#
  var.par  <- c(var.par.1, var.par.2)#
  thetas   <- c(theta.1, theta.2)#
  # Print out the loglikelihood, tolerance, and parameters#
  print(c(log.like.full, log.like.full - log.like.old))#
  print(pars.inc)#
  # Tally up parameters for AIC and BIC - k, theta1, theta2, linf, mu0s, pis, var par, means#
  pars.num <- length(pars)#
  pi.num   <- length(as.numeric(pis)) - length(pis[, dim(pis)[2]])#
  no.pars  <- pars.num + pi.num#
  AIC      <- 2 * no.pars - 2 * log.like.full#
  BIC      <- -2 * log.like.full + no.pars * log(num.inds)#
  print(paste0("Information criteria - AIC ", round(AIC, 2), " BIC ",  round(BIC, 2)))#
}#
# ----------------------------------------------------------------------------------------#
# Post run summary#
# ----------------------------------------------------------------------------------------#
BscPlotNew(c(theta.const, pars))#
if (theta.const == 1)#
{#
  names(pars.inc) <- c("k0", "linf", "theta1", "a", "b", #
                       "mu1", "mu2", "theta2", "sigma_linf")	#
} else#
{#
 names(pars.inc) <- c("k0", "linf", "theta1", "theta2", "a", "b", "mu1", #
                      "mu2", "theta2", "sigma_linf")		#
}#
library(knitr)#
pars.inc.2 <- t(as.data.frame(pars.inc))#
colnames(pars.inc.2) <- names(pars.inc)#
kable(data.frame(pars.inc.2, AIC, BIC), row.names = F)
