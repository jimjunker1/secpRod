[{"path":"https://jimjunker1.github.io/secpRod/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 secpRod authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jimjunker1.github.io/secpRod/articles/sampling-simulation.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Simulating the sampling of populations","text":"document outlines process simulating sampling populations developing testing models secondary production. processes used simulate data examples used model tutorials.","code":""},{"path":"https://jimjunker1.github.io/secpRod/articles/sampling-simulation.html","id":"simulation-process","dir":"Articles","previous_headings":"","what":"Simulation process","title":"Simulating the sampling of populations","text":"data generation process data set based simulated grid based number parameters control sampling area, distribution individuals, growth mortality parameters populations, etc. (Table 1).","code":""},{"path":"https://jimjunker1.github.io/secpRod/articles/sampling-simulation.html","id":"single-cohort","dir":"Articles","previous_headings":"Simulation process","what":"Single cohort","title":"Simulating the sampling of populations","text":"first simulate single cohort following parameters. individuals initial mass. individual grows based von Bertalanffy growth model randomly drawn asymptotic mass, MinfM_{inf}, growth coefficient, kk, calculated randomly drawn lifespan (CPI) determined user-defined inputs. individual reaches MinfM_{inf} transitions ‘adult’ longer counted samples. Mortality governed grid cell randomly draw death rate, zz, negative exponential model. Click see code simulate single cohort.","code":"# Parameters grid_size <- 20 mu_N_init <- 500 sigma_N_init <- 100 initial_mass <- 0.0006 mu_ln <- log(5^2 / sqrt(0.5^2 + 5^2)) # mean of ~5 mg in Normal(mu, sigma) sigma_ln <- sqrt(log(1 + (0.5^2 / 5^2))) #sd of ~0.5mg Normal(mu, sigma) mu_z <- 0.04 sigma_z <- 0.01 cpi_start <- 290 cpi_end <- 310 days <- 506 sample_interval <- 30 sample_start <- 1     sample_end <- 365     S <- 10 ## not run # Function to initialize a cohort init_cohort <- function(i, j, start_day) {   N_init <- max(1, round(rnorm(1, mu_N_init, sigma_N_init)))   M_inf <- rlnorm(N_init, meanlog = mu_ln, sdlog = sigma_ln)   k <- log(M_inf / initial_mass) / runif(N_init, cpi_start, cpi_end)   z <- rnorm(1, mu_z, sigma_z)   tibble(     x = i,     y = j,     id = 1:N_init,     mass = initial_mass,     M_inf = M_inf,     k = k,     alive = TRUE,     adult = FALSE,     z = z,     cohort_start = start_day   ) }  # Initialize first cohort on day 1 grid_population <- map2_dfr(rep(1:grid_size, each = grid_size), rep(1:grid_size, times = grid_size), ~init_cohort(.x, .y, 1))  # Daily update function for larval individuals only update_day <- function(pop, current_day) {   pop %>%     dplyr::filter(alive & !adult) %>%     dplyr::mutate(       time_since_start = current_day - cohort_start,       alive = runif(n()) > z,       mass = M_inf * (1 - exp(-k * time_since_start)),       adult = mass >= M_inf     ) %>%     dplyr::filter(alive & !adult)  # remove those who died or became adult }  # Run simulation with second cohort added at day 366 simulation <- vector(\"list\", length = days) simulation[[1]] <- grid_population  set.seed(1312) for (d in 2:days) {   updated_pop <- update_day(simulation[[d - 1]], d - 1)    if (d == 366) {     new_cohort <- map2_dfr(rep(1:grid_size, each = grid_size), rep(1:grid_size, times = grid_size), ~init_cohort(.x, .y, 366))     updated_pop <- bind_rows(updated_pop, new_cohort)   }   simulation[[d]] <- updated_pop }  # Combine for sampling all_days <- bind_rows(simulation, .id = \"day\") %>%   dplyr::mutate(day = as.integer(day))  # Sampling protocol (larvae only) sampling_results <- list() sampled_cells <- list()  for (t in seq(sample_start, sample_end, by = sample_interval)) {   all_cells <- expand.grid(x = 1:grid_size, y = 1:grid_size)   if (length(sampled_cells) > 0) {     prev_sampled <- bind_rows(sampled_cells)     available_cells <- anti_join(all_cells, prev_sampled, by = c(\"x\", \"y\"))   } else {     available_cells <- all_cells   }   sampled <- available_cells %>% sample_n(min(S, nrow(available_cells)))   sampled_cells[[length(sampled_cells) + 1]] <- sampled    sampled_data <- all_days %>%     dplyr::filter(day == t) %>%     semi_join(sampled, by = c(\"x\", \"y\")) %>%     group_by(x, y) %>%     summarise(       larval_density = n(),       mass_distribution = list(mass),       .groups = \"drop\"     ) %>%     dplyr::mutate(day = t)    sampling_results[[length(sampling_results) + 1]] <- sampled_data }  # Final output daily_sampling <- bind_rows(sampling_results)"},{"path":[]},{"path":"https://jimjunker1.github.io/secpRod/articles/sampling-simulation.html","id":"a-split-cohort","dir":"Articles","previous_headings":"Simulation process","what":"A split cohort","title":"Simulating the sampling of populations","text":"example explore options calculate production univoltine population sampling starts middle cohort ends sampling different cohort. event may ideal, common. operate assumption life-history characteristics environment, generally, similar among cohorts. may may acceptable assumption depending specific conditions. see code produce simulated data set click ","code":"# Spatial growth and mortality simulation in R library(dplyr) library(tidyr) library(purrr) library(ggplot2) library(ggdist)  # Parameters grid_size <- 20 mu_N_init <- 500 sigma_N_init <- 100 initial_mass <- 0.0006 mu_ln <- log(5^2 / sqrt(0.5^2 + 5^2)) sigma_ln <- sqrt(log(1 + (0.5^2 / 5^2))) mu_z <- 0.04 sigma_z <- 0.01 cpi_start <- 290 cpi_end <- 310 days <- 506 sample_interval <- 30 sample_start <- 101    # adjustable start day sample_end <- 465    # adjustable end day S <- 10  # number of cells to sample per event  # Function to initialize a cohort init_cohort <- function(i, j, start_day) {   N_init <- max(1, round(rnorm(1, mu_N_init, sigma_N_init)))   M_inf <- rlnorm(N_init, meanlog = mu_ln, sdlog = sigma_ln)   k <- log(M_inf / initial_mass) / runif(N_init, cpi_start, cpi_end)   z <- rnorm(1, mu_z, sigma_z)   tibble(     x = i,     y = j,     id = 1:N_init,     mass = initial_mass,     M_inf = M_inf,     k = k,     alive = TRUE,     adult = FALSE,     z = z,     cohort_start = start_day   ) }  # Initialize first cohort on day 1 set.seed(1312)  grid_population <- map2_dfr(rep(1:grid_size, each = grid_size), rep(1:grid_size, times = grid_size), ~init_cohort(.x, .y, 1))  # Daily update function for larval individuals only update_day <- function(pop, current_day) {   pop %>%     dplyr::filter(alive & !adult) %>%     dplyr::mutate(       time_since_start = current_day - cohort_start,       alive = runif(n()) > z,       mass = M_inf * (1 - exp(-k * time_since_start)),       adult = mass >= M_inf     ) %>%     dplyr::filter(alive & !adult)  # remove those who died or became adult }  # Run simulation with second cohort added at day 366 simulation <- vector(\"list\", length = days) simulation[[1]] <- grid_population  #set seed to reproduce for (d in 2:days) {   updated_pop <- update_day(simulation[[d - 1]], d - 1)    if (d == 366) {     new_cohort <- map2_dfr(rep(1:grid_size, each = grid_size), rep(1:grid_size, times = grid_size), ~init_cohort(.x, .y, 366))     updated_pop <- bind_rows(updated_pop, new_cohort)   }   simulation[[d]] <- updated_pop }  # Combine for sampling all_days <- bind_rows(simulation, .id = \"day\") %>%   dplyr::mutate(day = as.integer(day))  # Sampling protocol (larvae only) sampling_results <- list() sampled_cells <- list()  for (t in seq(sample_start, sample_end, by = sample_interval)) {   all_cells <- expand.grid(x = 1:grid_size, y = 1:grid_size)   if (length(sampled_cells) > 0) {     prev_sampled <- bind_rows(sampled_cells)     available_cells <- anti_join(all_cells, prev_sampled, by = c(\"x\", \"y\"))   } else {     available_cells <- all_cells   }   sampled <- available_cells %>% sample_n(min(S, nrow(available_cells)))   sampled_cells[[length(sampled_cells) + 1]] <- sampled    sampled_data <- all_days %>%     dplyr::filter(day == t) %>%     semi_join(sampled, by = c(\"x\", \"y\")) %>%     group_by(x, y) %>%     summarise(       larvalDensity = n(),       massDistribution = list(mass),       .groups = \"drop\"     ) %>%     dplyr::mutate(day = t)    sampling_results[[length(sampling_results) + 1]] <- sampled_data }  # Final output daily_sampling <- bind_rows(sampling_results)"},{"path":"https://jimjunker1.github.io/secpRod/articles/sampling-simulation.html","id":"load-summarise-and-visualize-the-simulated-sampling-data-1","dir":"Articles","previous_headings":"Simulation process > A split cohort","what":"Load, summarise, and visualize the simulated sampling data","title":"Simulating the sampling of populations","text":"","code":"#> tibble [6,666 × 4] (S3: tbl_df/tbl/data.frame) #>  $ dateID   : num [1:6666] 101 101 101 101 101 101 101 101 101 101 ... #>  $ repID    : int [1:6666] 1 1 1 1 1 1 1 1 1 1 ... #>  $ n_m2     : int [1:6666] 229 229 229 229 229 229 229 229 229 229 ... #>  $ massValue: num [1:6666] 5.02 4.83 4.83 4.8 5.91 ... #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\" #> # A tibble: 6 × 4 #>   dateID repID  n_m2 massValue #>    <dbl> <int> <int>     <dbl> #> 1    101     1   229      5.02 #> 2    101     1   229      4.83 #> 3    101     1   229      4.83 #> 4    101     1   229      4.80 #> 5    101     1   229      5.91 #> 6    101     1   229      5.53 #> [1] \"agg\" #> [1] \"cohorts\" #> [1] \"dfOrdered\" #> [1] \"optim\" #> [1] \"fit out\" #> [1] \"t0\" #> [1] \"raw_age\" #> [1] \"t0\" #> [1] \"raw_age\" #> [1] \"t0\" #> [1] \"raw_age\" #> Error in 1/D: non-numeric argument to binary operator #> No traceback available"},{"path":"https://jimjunker1.github.io/secpRod/articles/sampling-simulation.html","id":"remapping-a-split-cohort-to-a-single-analysis","dir":"Articles","previous_headings":"Simulation process > A split cohort","what":"Remapping a split cohort to a single analysis","title":"Simulating the sampling of populations","text":"order perform full cohort analysis cohort split time, can ‘remap’ two cohorts new timescale follows consistent cohort progression. can calculate production regular cohort methods. need extract time-specific values, can simply map estimates back original time scale. developed quick algorithm automate determination beginning ends non-overlapping cohort. function reorders sampling events follow continuous growth progression. allows determination model-based estimates cohort production associated growth statistics also keeps information re-map production outputs original sampling times.","code":""},{"path":[]},{"path":"https://jimjunker1.github.io/secpRod/articles/simple-example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A few simple examples","text":"Currently, analysis fully implemented size-frequency production:biomass ratio methods. quick tutorial outline steps calculate secondary production whole communities. First, load package library(secpRod). package comes number data sets macroinvertebrate species community data: simulated data set single univoltine species accessed data(\"univoltine\") full community data set Junker Cross (2014) can accessed data(\"wbtData\") simulated data set single data frame artificially sampled size-frequency data time. simple example, can create required ‘taxaInfo’ object: object represents taxonomic information calculating production. row contains information single species/taxon (case row species == 1 ). columns contain information calculation production. include, limited : taxonID: character string matches name taxonID sampleInfo massForm: character string coercible formula conversion length mass (e.g., afdm_mg~(*lengthClass^b)) : numeric variable coefficients used massForm b: numeric variable coefficients used massForm percAsh: numeric integer 0–100 method: character string method use. Must one following: ‘sf’ (updated methods finalized.) growthForm: description forthcoming… min.cpi: integer minimum estimated cohort production interval adjusting annual production estimates using size-frequency method max.cpi: integer maximum estimated cohort production interval adjusting annual production estimates using size-frequency method pb: numeric production biomass (PB) ratio specific taxa. can take three forms 1) single value, 2) vector values length bootNum, 3) string distribution randomly sample, including n = (e.g., ‘rnorm(mean = 5, sd = 0.5)’, ‘runif(min = 3, max = 8)’). function automatically sample bootNum values. Fair warning: suggest explicitly name parameters function call string. Possible unwanted unknown things may happen otherwise. tests feature still development, reject nonsensical values (e.g, negative, NA, Inf). distribution samples negative values get negative productions estimates–least min.growth feature implemented. min.growth: description forthcoming… notes: notes researcher use. column maintained output summaries. ‘wbtData’ object list two (2) elements: sampleInfo: list 32 data frames. One (1) taxonomic entity taxaInfo: data frame 32 rows 13 columns. row represents taxonomic information single taxonomic entity columns contain information calculation production described .","code":"data(\"univoltine\", package = 'secpRod')  #clean this data set to align  head(univoltine) #> # A tibble: 6 × 5 #>   taxonID dateID     repID lengthClass  n_m2 #>   <chr>   <date>     <chr>       <dbl> <dbl> #> 1 sppA    2023-01-31 1             0.5     0 #> 2 sppA    2023-01-31 1             1       0 #> 3 sppA    2023-01-31 1             1.5     0 #> 4 sppA    2023-01-31 1             2       0 #> 5 sppA    2023-01-31 1             2.5     0 #> 6 sppA    2023-01-31 1             3       0 # clean simulated data to workable form  taxaInfo <- data.frame(   taxonID = c(\"sppA\"),   massForm = c(\"afdm_mg~(a*lengthClass^b)*percAsh\"),   a = c(0.0025),   b = c(2.692),   percAsh = c(0.958),   method = c(\"sf\"),   g.a = c(NA),   growthForm = c(\"log(g_d) = 1 - 0.25*log(afdm_mg) - \"),   min.cpi = c(335),   max.cpi = c(365),   pb = c(\"runif(min = 3, max = 8)\"),   min.growth = c(0.001),   notes = c(\"This is here for your use. No information will be used, but this column will be maintained in some summaries. See *** for more information.\") )"},{"path":[]},{"path":"https://jimjunker1.github.io/secpRod/articles/simple-example.html","id":"single-species-walkthrough","dir":"Articles","previous_headings":"Examples","what":"Single-species walkthrough","title":"A few simple examples","text":"quick walkthrough calculation secondary production single species. data contain replicates density body length distributions long format. first step convert length mass estimating biomass patterns. use convert_length_to_mass() function, adds column individual masses based length--mass formula coefficients taxaInfo. can take look looks like: Information use can viewed ?convert_length_to_mass can view size frequency histograms using plot_cohorts() function. Check function options ?plot_cohorts.  figures can helpful identifying cohort structures getting ballpark cohort production intervals (CPI) species estimating production using size frequency method. future, hope implement approach delineate cohorts estimate growth parameters size-frequency data, feature still development. next step estimate production. , size-frequency fully operational work update methods soon! function calc_production() workhorse function estimate community production. apply single species example, input sample information taxa information along many bootstraps like, : output lot information though simple structure: P.boots–vectors bootstrapped estimates annual production, annual biomass, annual abundance. taxaSummary–comes ‘full’ ‘short’ versions. see full can lot. ‘short’ paired version can also turn ‘none’.","code":"## isolate a single species data frame from sampleInfo object  acentrella <- wbtData[['sampleInfo']][['Acentrella sp.']]  ## let's take a look at the data set head(acentrella, 10) #> # A tibble: 10 × 5 #>    taxonID        repID dateID              lengthClass  n_m2 #>    <chr>          <dbl> <dttm>                    <dbl> <dbl> #>  1 Acentrella sp.     1 2008-07-17 00:00:00         0.5   0   #>  2 Acentrella sp.     1 2008-07-17 00:00:00         1     0   #>  3 Acentrella sp.     1 2008-07-17 00:00:00         2    62.5 #>  4 Acentrella sp.     1 2008-07-17 00:00:00         3    72.9 #>  5 Acentrella sp.     1 2008-07-17 00:00:00         4    72.9 #>  6 Acentrella sp.     1 2008-07-17 00:00:00         5    52.1 #>  7 Acentrella sp.     1 2008-07-17 00:00:00         6     0   #>  8 Acentrella sp.     1 2008-07-17 00:00:00         7     0   #>  9 Acentrella sp.     1 2008-07-17 00:00:00         8     0   #> 10 Acentrella sp.     1 2008-07-17 00:00:00         9     0 acentrellaInfo = subset(taxaInfo, taxonID == \"Acentrella sp.\") acentrellaInfo #> # A tibble: 1 × 13 #> # Groups:   taxonID [1] #>   taxonID  massForm      a     b percAsh method g.a   growthForm min.cpi max.cpi #>   <chr>    <chr>     <dbl> <dbl>   <dbl> <chr>  <lgl> <chr>        <dbl>   <dbl> #> 1 Acentre… afdm_mg… 0.0076  2.69     4.9 sf     NA    \"log(g_d)…     335     365 #> # ℹ 3 more variables: pb <dbl>, min.growth <dbl>, notes <chr> acentrellaMass = convert_length_to_mass(taxaSampleList = acentrella,                                          taxaInfo = wbtData[['taxaInfo']])  head(acentrellaMass) #> # A tibble: 6 × 6 #>   taxonID        repID dateID              lengthClass  n_m2 afdm_mg #>   <chr>          <dbl> <dttm>                    <dbl> <dbl>   <dbl> #> 1 Acentrella sp.     1 2008-07-17 00:00:00         0.5   0   0.00577 #> 2 Acentrella sp.     1 2008-07-17 00:00:00         1     0   0.0372  #> 3 Acentrella sp.     1 2008-07-17 00:00:00         2    62.5 0.240   #> 4 Acentrella sp.     1 2008-07-17 00:00:00         3    72.9 0.716   #> 5 Acentrella sp.     1 2008-07-17 00:00:00         4    72.9 1.55    #> 6 Acentrella sp.     1 2008-07-17 00:00:00         5    52.1 2.83 plot_cohorts(taxaSampleListMass = acentrellaMass,              param = 'length',              massClass = 'afdm_mg') calc_production(   taxaSampleListMass = acentrellaMass,   infoCols = c(1:3),   taxaInfo = acentrellaInfo,   bootNum = 10,   wrap = TRUE,   taxaSummary = 'full' ) #> $P.boots #>            [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     #> P.ann.samp 7381.303 7278.619 8014.519 7254.593 7338.797 8494.39  8192.762 #> B.ann.samp 230.6566 237.3738 251.6796 243.2384 265.6653 311.0682 263.5823 #> N.ann.samp 632.4695 594.3964 702.0031 642.308  731.771  751.7389 701.1135 #>            [,8]     [,9]     [,10]    #> P.ann.samp 7150.631 6808.053 8607.359 #> B.ann.samp 243.4686 240.5153 294.0658 #> N.ann.samp 577.9719 627.671  719.5711 #>  #> $taxaSummary #> $taxaSummary$summaryType #> [1] \"full\" #>  #> $taxaSummary$taxonID #> [1] \"Acentrella sp.\" #>  #> $taxaSummary$method #> [1] \"sf\" #>  #> $taxaSummary$P.ann.samp #> [1] 7370.212 #>  #> $taxaSummary$P.uncorr.samp #> [1] 7067.326 #>  #> $taxaSummary$cpi #> [1] 350 #>  #> $taxaSummary$pb #> [1] 29.03778 #>  #> $taxaSummary$meanN #> [1] 657.723 #>  #> $taxaSummary$meanB #> [1] 253.8146 #>  #> $taxaSummary$meanIndMass #> [1] 0.3858989 #>  #> $taxaSummary$Nmean #>                   0.5         1         2         3         4         5 #> 2008-07-17   0.000000  11.45833  48.95833  33.33333 39.583333 30.208333 #> 2008-08-13   0.000000  12.35703  62.91970 105.36194 56.619625  7.291667 #> 2008-09-23  53.028394 399.27515 545.08029 132.82990  7.291667 33.333333 #> 2008-10-26  78.012266 582.35127 666.79595 173.86885  3.882576  0.000000 #> 2008-11-23   1.041667 290.29353 555.27152 123.57480 15.136670  2.083333 #> 2008-12-17 208.701307 593.97944 287.82091 103.54200 14.204545  2.083333 #> 2009-02-03  20.014881 250.22631 142.14720  27.80258  4.166667  2.083333 #> 2009-04-07  90.277778 239.72446 332.67915 102.71991 27.272727  4.924242 #> 2009-05-16   0.000000  33.44907 125.79807  32.69121 18.750000  5.208333 #> 2009-06-23   0.000000  19.50921  73.99330  80.57125 23.639759  1.041667 #>                    6         7        8     9 10 11 12 13 14 15 16 17 18 19 20 #> 2008-07-17 12.500000  2.083333 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  2.083333  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23 30.208333 20.833333 3.125000 3.125  0  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  2.840909  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23  0.000000  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  2.083333  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  1.041667  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07  6.875000  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  5.208333  0.000000 1.041667 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23  8.798759  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #>            21 22 23 24 25 26 27 28 29 30 #> 2008-07-17  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23  0  0  0  0  0  0  0  0  0  0 #>  #> $taxaSummary$Nsd #>                   0.5         1         2         3         4         5 #> 2008-07-17   0.000000  29.64635  45.01854  27.25197 46.791335 31.614388 #> 2008-08-13   0.000000  24.55841 130.78970 151.69187 58.651399  9.882118 #> 2008-09-23  99.904573 640.40507 820.70373 166.25512  7.030714 34.652708 #> 2008-10-26 210.757419 434.06890 508.27227 144.97113  9.218577  0.000000 #> 2008-11-23   3.294039 195.29622 348.76995 107.84317 43.107151  4.392052 #> 2008-12-17 388.902788 748.41641 349.28272 114.55605 16.517014  6.588078 #> 2009-02-03  44.522062 535.29716 316.10626  53.51328  7.283395  6.588078 #> 2009-04-07 222.149872 399.20601 492.05437 170.97389 58.965796  9.319089 #> 2009-05-16   0.000000 102.16768 255.46931  57.94451 32.125093 11.251286 #> 2009-06-23   0.000000  31.63802  93.27213 107.03519 32.020550  3.294039 #>                    6         7        8        9 10 11 12 13 14 15 16 17 18 19 #> 2008-07-17 15.372183  4.392052 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  4.392052  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23 56.299275 32.200064 5.031728 7.030714  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  8.983743  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23  0.000000  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  6.588078  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  3.294039  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07 21.740659  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16 11.251286  0.000000 3.294039 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23 24.384816  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #>            20 21 22 23 24 25 26 27 28 29 30 #> 2008-07-17  0  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  0  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23  0  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  0  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23  0  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  0  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  0  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07  0  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  0  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23  0  0  0  0  0  0  0  0  0  0  0 #>  #> $taxaSummary$Bmean #>                    0.5          1         2         3         4         5 #> 2008-07-17 0.000000000  0.4267083  11.77357  23.86831 61.470320 85.519414 #> 2008-08-13 0.000000000  0.4601757  15.13101  75.44435 87.926563 20.642617 #> 2008-09-23 0.305806299 14.8690067 131.08164  95.11277 11.323480 94.366250 #> 2008-10-26 0.449884307 21.6867611 160.35199 124.49868  6.029385  0.000000 #> 2008-11-23 0.006007126 10.8105310 133.53244  88.48566 23.506256  5.897891 #> 2008-12-17 1.203547188 22.1197943  69.21556  74.14118 22.058727  5.897891 #> 2009-02-03 0.115422630  9.3184280  34.18375  19.90802  6.470560  5.897891 #> 2009-04-07 0.520617562  8.9273390  80.00313  73.55253 42.352756 13.940469 #> 2009-05-16 0.000000000  1.2456435  30.25209  23.40852 29.117520 14.744727 #> 2009-06-23 0.000000000  0.7265230  17.79401  57.69299 36.710995  2.948945 #>                     6        7        8        9 10 11 12 13 14 15 16 17 18 19 #> 2008-07-17  57.799582  14.5857  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13   9.633264   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23 139.682324 145.8570 31.33826 43.02554  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  13.136269   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23   0.000000   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17   9.633264   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03   4.816632   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07  31.789770   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  24.083159   0.0000 10.44609  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23  40.685167   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #>            20 21 22 23 24 25 26 27 28 29 30 #> 2008-07-17  0  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  0  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23  0  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  0  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23  0  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  0  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  0  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07  0  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  0  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23  0  0  0  0  0  0  0  0  0  0  0 #>  #> $taxaSummary$Bsd #>                  0.5          1         2         3        4         5 #> 2008-07-17 0.0000000  1.1040302  10.82612  19.51375 72.66387 89.499937 #> 2008-08-13 0.0000000  0.9145551  31.45248 108.61887 91.08177 27.976152 #> 2008-09-23 0.5761338 23.8486848 197.36394 119.04687 10.91824 98.101384 #> 2008-10-26 1.2154045 16.1647259 122.23000 103.80648 14.31585  0.000000 #> 2008-11-23 0.0189962  7.2728313  83.87267  77.22104 66.94258 12.433845 #> 2008-12-17 2.2427404 27.8710270  83.99598  82.02779 25.64984 18.650768 #> 2009-02-03 0.2567516 19.9344664  76.01766  38.31815 11.31063 18.650768 #> 2009-04-07 1.2811029 14.8664317 118.32990 122.42575 91.57001 26.382223 #> 2009-05-16 0.0000000  3.8047243  61.43560  41.49113 49.88816 31.852250 #> 2009-06-23 0.0000000  1.1782000  22.43021  76.64248 49.72581  9.325384 #>                    6         7        8        9 10 11 12 13 14 15 16 17 18 19 #> 2008-07-17  71.08046  30.74935  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  20.30870   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23 260.32597 225.43702 50.45939 96.80008  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  41.54053   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23   0.00000   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  30.46305   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  15.23153   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07 100.52808   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  52.02557   0.00000 33.03342  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23 112.75457   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #>            20 21 22 23 24 25 26 27 28 29 30 #> 2008-07-17  0  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  0  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23  0  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  0  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23  0  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  0  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  0  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07  0  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  0  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23  0  0  0  0  0  0  0  0  0  0  0 #>  #> $taxaSummary$datesInfo #>        dateID  N n_m2_mean afdm_mg_m2_mean #> 1  2008-07-17 10  178.1250        255.4436 #> 2  2008-08-13 10  246.6333        209.2380 #> 3  2008-09-23 10 1228.1304        706.9621 #> 4  2008-10-26 10 1507.7518        326.1530 #> 5  2008-11-23 10  987.4015        262.2388 #> 6  2008-12-17 10 1212.4149        204.2700 #> 7  2009-02-03 10  447.4826         80.7107 #> 8  2009-04-07 10  804.4733        251.0866 #> 9  2009-05-16 10  222.1467        133.2977 #> 10 2009-06-23 10  207.5540        156.5586 #> 11 2009-07-16 NA  192.8395        206.0011 calc_production(   taxaSampleListMass = acentrellaMass,   infoCols = c(1:3),   taxaInfo = acentrellaInfo,   bootNum = 10,   wrap = TRUE,   taxaSummary = 'short' ) #> $P.boots #>            [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     #> P.ann.samp 8126.271 8024.821 6318.987 7345.596 8034.588 8480.26  7259.096 #> B.ann.samp 290.0835 279.4578 216.4758 271.4307 296.4643 282.6735 233.9973 #> N.ann.samp 733.3796 709.7602 565.4998 700.2419 763.9362 766.1124 576.9509 #>            [,8]     [,9]     [,10]    #> P.ann.samp 7340.748 6429.438 7445.705 #> B.ann.samp 235.5219 238.4497 246.6102 #> N.ann.samp 612.8401 559.0729 657.6272 #>  #> $taxaSummary #> $taxaSummary$summaryType #> [1] \"short\" #>  #> $taxaSummary$taxonID #> [1] \"Acentrella sp.\" #>  #> $taxaSummary$method #> [1] \"sf\" #>  #> $taxaSummary$P.ann.samp #> [1] 7370.212 #>  #> $taxaSummary$cpi #> [1] 350 #>  #> $taxaSummary$pb #> [1] 29.03778 #>  #> $taxaSummary$meanN #> [1] 657.723 #>  #> $taxaSummary$meanB #> [1] 253.8146 #>  #> $taxaSummary$meanIndMass #> [1] 0.3858989 #>  #> $taxaSummary$datesInfo #>        dateID  N n_m2_mean afdm_mg_m2_mean #> 1  2008-07-17 10  178.1250        255.4436 #> 2  2008-08-13 10  246.6333        209.2380 #> 3  2008-09-23 10 1228.1304        706.9621 #> 4  2008-10-26 10 1507.7518        326.1530 #> 5  2008-11-23 10  987.4015        262.2388 #> 6  2008-12-17 10 1212.4149        204.2700 #> 7  2009-02-03 10  447.4826         80.7107 #> 8  2009-04-07 10  804.4733        251.0866 #> 9  2009-05-16 10  222.1467        133.2977 #> 10 2009-06-23 10  207.5540        156.5586 #> 11 2009-07-16 NA  192.8395        206.0011"},{"path":"https://jimjunker1.github.io/secpRod/articles/simple-example.html","id":"an-example-using-the-pb-method","dir":"Articles","previous_headings":"Examples","what":"An example using the PB method","title":"A few simple examples","text":"pb method allows multiple options set production biomass ratio: single value. use value bootstrap sample. variability derived entirely resampling sample units (e.g. surbers). character string distribution sample excluding n=, rnorm(mean = 5, sd = 0.5). function automatically sample bootNum values. numeric vector length bootNum. explicit option set values pb used. future, length ≠\\neqbootNum error returned taxa.","code":"acentrellaInfo$method = \"pb\" acentrellaInfo$pb = \"runif(min = 3, max = 8)\"  calc_production(   taxaSampleListMass = acentrellaMass,   infoCols = c(1:3),   taxaInfo = acentrellaInfo,   bootNum = 10,   wrap = TRUE,   taxaSummary = 'short' ) #> $P.boots #>            [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     #> P.ann.samp 1361.193 1572.705 1040.817 1756.294 1903.171 1494.856 857.3934 #> B.ann.samp 268.2725 216.9402 229.3572 264.7083 244.9545 267.2671 266.9924 #> N.ann.samp 645.543  583.4459 649.0435 697.8241 614.991  607.0912 608.9363 #>            [,8]     [,9]     [,10]    #> P.ann.samp 1350.811 1420.969 1668.782 #> B.ann.samp 204.2793 284.1068 273.7509 #> N.ann.samp 527.6573 699.4041 711.2406 #>  #> $taxaSummary #> $taxaSummary$summaryType #> [1] \"short\" #>  #> $taxaSummary$taxonID #> [1] \"Acentrella sp.\" #>  #> $taxaSummary$method #> [1] \"pb\" #>  #> $taxaSummary$P.ann.samp #> [1] 1636.523 #>  #> $taxaSummary$pb #> [1] 6.447713 #>  #> $taxaSummary$meanN #> [1] 657.723 #>  #> $taxaSummary$meanB #> [1] 253.8146 #>  #> $taxaSummary$meanIndMass #> [1] 0.3858989 #>  #> $taxaSummary$datesInfo #>        dateID  N n_m2_mean afdm_mg_m2_mean #> 1  2008-07-17 10  178.1250        255.4436 #> 2  2008-08-13 10  246.6333        209.2380 #> 3  2008-09-23 10 1228.1304        706.9621 #> 4  2008-10-26 10 1507.7518        326.1530 #> 5  2008-11-23 10  987.4015        262.2388 #> 6  2008-12-17 10 1212.4149        204.2700 #> 7  2009-02-03 10  447.4826         80.7107 #> 8  2009-04-07 10  804.4733        251.0866 #> 9  2009-05-16 10  222.1467        133.2977 #> 10 2009-06-23 10  207.5540        156.5586 #> 11 2009-07-16 NA  192.8395        206.0011"},{"path":"https://jimjunker1.github.io/secpRod/articles/simple-example.html","id":"applying-this-to-multiple-taxa","dir":"Articles","previous_headings":"","what":"Applying this to multiple taxa","title":"A few simple examples","text":"current internal code just calc_production still buggy. can run production splitting full sampleInfo list taxa using apply functions (purrr package)[https://purrr.tidyverse.org/] code shows accomplish . , size frequency pb accepted currently.","code":"# load needed packages library(magrittr) library(purrr)  # The sampleInfo is already a list by taxonID str(wbtData[['sampleInfo']], list.len = 5) #> list<tibble[,5]> [1:32]  #> $ Acentrella sp.    : tibble [3,100 × 5] (S3: tbl_df/tbl/data.frame) #>  ..$ taxonID    : chr [1:3100] \"Acentrella sp.\" \"Acentrella sp.\" \"Acentrella sp.\" \"Acentrella sp.\" ... #>  ..$ repID      : num [1:3100] 1 1 1 1 1 1 1 1 1 1 ... #>  ..$ dateID     : POSIXct[1:3100], format: \"2008-07-17\" \"2008-07-17\" ... #>  ..$ lengthClass: num [1:3100] 0.5 1 2 3 4 5 6 7 8 9 ... #>  ..$ n_m2       : num [1:3100] 0 0 62.5 72.9 72.9 ... #> $ Ameletus spp.     : tibble [3,038 × 5] (S3: tbl_df/tbl/data.frame) #>  ..$ taxonID    : chr [1:3038] \"Ameletus spp.\" \"Ameletus spp.\" \"Ameletus spp.\" \"Ameletus spp.\" ... #>  ..$ repID      : num [1:3038] 1 1 1 1 1 1 1 1 1 1 ... #>  ..$ dateID     : POSIXct[1:3038], format: \"2008-07-17\" \"2008-07-17\" ... #>  ..$ lengthClass: num [1:3038] 0.5 1 2 3 4 5 6 7 8 9 ... #>  ..$ n_m2       : num [1:3038] 0 0 0 0 0 0 0 0 0 0 ... #> $ Attenella spp.    : tibble [3,038 × 5] (S3: tbl_df/tbl/data.frame) #>  ..$ taxonID    : chr [1:3038] \"Attenella spp.\" \"Attenella spp.\" \"Attenella spp.\" \"Attenella spp.\" ... #>  ..$ repID      : num [1:3038] 1 1 1 1 1 1 1 1 1 1 ... #>  ..$ dateID     : POSIXct[1:3038], format: \"2008-07-17\" \"2008-07-17\" ... #>  ..$ lengthClass: num [1:3038] 0.5 1 2 3 4 5 6 7 8 9 ... #>  ..$ n_m2       : num [1:3038] 0 0 41.7 20.8 0 ... #> $ Baetis spp.       : tibble [3,100 × 5] (S3: tbl_df/tbl/data.frame) #>  ..$ taxonID    : chr [1:3100] \"Baetis spp.\" \"Baetis spp.\" \"Baetis spp.\" \"Baetis spp.\" ... #>  ..$ repID      : num [1:3100] 1 1 1 1 1 1 1 1 1 1 ... #>  ..$ dateID     : POSIXct[1:3100], format: \"2008-07-17\" \"2008-07-17\" ... #>  ..$ lengthClass: num [1:3100] 0.5 1 2 3 4 5 6 7 8 9 ... #>  ..$ n_m2       : num [1:3100] 0 0 20.8 31.2 93.8 ... #> $ Barbaetis spp.    : tibble [3,100 × 5] (S3: tbl_df/tbl/data.frame) #>  ..$ taxonID    : chr [1:3100] \"Barbaetis spp.\" \"Barbaetis spp.\" \"Barbaetis spp.\" \"Barbaetis spp.\" ... #>  ..$ repID      : num [1:3100] 1 1 1 1 1 1 1 1 1 1 ... #>  ..$ dateID     : POSIXct[1:3100], format: \"2008-07-17\" \"2008-07-17\" ... #>  ..$ lengthClass: num [1:3100] 0.5 1 2 3 4 5 6 7 8 9 ... #>  ..$ n_m2       : num [1:3100] 0 0 20.8 0 0 ... #>  [list output truncated] #> @ ptype: tibble [0 × 5] (S3: tbl_df/tbl/data.frame) #>  ..$ taxonID    : chr(0)  #>  ..$ repID      : num(0)  #>  ..$ dateID     : 'POSIXct' num(0)  #>  - attr(*, \"tzone\")= chr \"UTC\" #>  ..$ lengthClass: num(0)  #>  ..$ n_m2       : num(0)  # if you have a large data frame with all taxa the code below shows how to do this: ## install a package to split into a named_list # devtools::install_github('jimjunker1/junkR') # library(junkR) ## Convert to data frame # sampleInfoDf = wbtData[['sampleInfo']] %>% bind_rows ## Convert back to named list split by taxonID # sampleInfoList = sampleInfoDf %>% junkR::named_group_split(taxonID)  sampleInfoList = wbtData[['sampleInfo']]  sampleInfoListMass = sampleInfoList %>%    purrr::map(     ~convert_length_to_mass(.x,                             taxaInfo = taxaInfo)   )  fullProduction = sampleInfoListMass %>%    purrr::map2(., list(taxaInfo),                      ~calc_production(.x,                                       infoCols = c(1:3),                                       taxaInfo = .y,                                        bootNum = 10,                                        wrap = TRUE,                                       taxaSummary = 'short'                                       )                      )  str(fullProduction, list.len = 5) #> List of 32 #>  $ Acentrella sp.    :List of 2 #>   ..$ P.boots    :List of 30 #>   .. ..$ : num 6126 #>   .. ..$ : num 219 #>   .. ..$ : num 495 #>   .. ..$ : num 7319 #>   .. ..$ : num 265 #>   .. .. [list output truncated] #>   .. ..- attr(*, \"dim\")= int [1:2] 3 10 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:3] \"P.ann.samp\" \"B.ann.samp\" \"N.ann.samp\" #>   .. .. ..$ : NULL #>   ..$ taxaSummary:List of 10 #>   .. ..$ summaryType: chr \"short\" #>   .. ..$ taxonID    : chr \"Acentrella sp.\" #>   .. ..$ method     : chr \"sf\" #>   .. ..$ P.ann.samp : num 7370 #>   .. ..$ cpi        : num 350 #>   .. .. [list output truncated] #>  $ Ameletus spp.     :List of 2 #>   ..$ P.boots    :List of 30 #>   .. ..$ : num 479 #>   .. ..$ : num 29.1 #>   .. ..$ : num 20 #>   .. ..$ : num 476 #>   .. ..$ : num 25.8 #>   .. .. [list output truncated] #>   .. ..- attr(*, \"dim\")= int [1:2] 3 10 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:3] \"P.ann.samp\" \"B.ann.samp\" \"N.ann.samp\" #>   .. .. ..$ : NULL #>   ..$ taxaSummary:List of 10 #>   .. ..$ summaryType: chr \"short\" #>   .. ..$ taxonID    : chr \"Ameletus spp.\" #>   .. ..$ method     : chr \"sf\" #>   .. ..$ P.ann.samp : num 660 #>   .. ..$ cpi        : num 350 #>   .. .. [list output truncated] #>  $ Attenella spp.    :List of 2 #>   ..$ P.boots    :List of 30 #>   .. ..$ : num 3002 #>   .. ..$ : num 130 #>   .. ..$ : num 77.8 #>   .. ..$ : num 2974 #>   .. ..$ : num 136 #>   .. .. [list output truncated] #>   .. ..- attr(*, \"dim\")= int [1:2] 3 10 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:3] \"P.ann.samp\" \"B.ann.samp\" \"N.ann.samp\" #>   .. .. ..$ : NULL #>   ..$ taxaSummary:List of 10 #>   .. ..$ summaryType: chr \"short\" #>   .. ..$ taxonID    : chr \"Attenella spp.\" #>   .. ..$ method     : chr \"sf\" #>   .. ..$ P.ann.samp : num 2534 #>   .. ..$ cpi        : num 350 #>   .. .. [list output truncated] #>  $ Baetis spp.       :List of 2 #>   ..$ P.boots    :List of 30 #>   .. ..$ : num 3738 #>   .. ..$ : num 140 #>   .. ..$ : num 233 #>   .. ..$ : num 3366 #>   .. ..$ : num 131 #>   .. .. [list output truncated] #>   .. ..- attr(*, \"dim\")= int [1:2] 3 10 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:3] \"P.ann.samp\" \"B.ann.samp\" \"N.ann.samp\" #>   .. .. ..$ : NULL #>   ..$ taxaSummary:List of 10 #>   .. ..$ summaryType: chr \"short\" #>   .. ..$ taxonID    : chr \"Baetis spp.\" #>   .. ..$ method     : chr \"sf\" #>   .. ..$ P.ann.samp : num 3833 #>   .. ..$ cpi        : num 350 #>   .. .. [list output truncated] #>  $ Barbaetis spp.    :List of 2 #>   ..$ P.boots    :List of 30 #>   .. ..$ : num 1529 #>   .. ..$ : num 50.5 #>   .. ..$ : num 74.9 #>   .. ..$ : num 1729 #>   .. ..$ : num 61.3 #>   .. .. [list output truncated] #>   .. ..- attr(*, \"dim\")= int [1:2] 3 10 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:3] \"P.ann.samp\" \"B.ann.samp\" \"N.ann.samp\" #>   .. .. ..$ : NULL #>   ..$ taxaSummary:List of 10 #>   .. ..$ summaryType: chr \"short\" #>   .. ..$ taxonID    : chr \"Barbaetis spp.\" #>   .. ..$ method     : chr \"sf\" #>   .. ..$ P.ann.samp : num 1512 #>   .. ..$ cpi        : num 350 #>   .. .. [list output truncated] #>   [list output truncated]"},{"path":"https://jimjunker1.github.io/secpRod/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jim Junker. Author, maintainer.","code":""},{"path":"https://jimjunker1.github.io/secpRod/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jim Junker (2023). secpRod: R package calculating secondary production animal populations. URL https://www.github.io/jimjunker1/secpRod","code":"@Manual{,   title = {{secpRod}: An {R} package for calculating secondary production of animal populations.},   author = {Jim Junker},   url = {https://www.github.io/jimjunker1/secpRod}, }"},{"path":"https://jimjunker1.github.io/secpRod/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Workflow Functions for estimating Secondary Production","text":"secpRod open source package analysis calculation secondary production populations communities R. secpRod uses data repeated sampling population abundance size structure tall data structure taxon information sheet base objects. addition estimating secondary production communities multiple methods, secpRod also allows user visualize population data assess best methods secondary production estimation.","code":""},{"path":"https://jimjunker1.github.io/secpRod/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Workflow Functions for estimating Secondary Production","text":"","code":"# To install the latest version Github: # install.packges('devtools') devtools::install_github(\"jimjunker1/secpRod\")"},{"path":"https://jimjunker1.github.io/secpRod/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"Workflow Functions for estimating Secondary Production","text":"sequence actions calculation community secondary production split taxa production method convert length mass determine date wrap around split taxa bootstrapped sample lists run production methods","code":""},{"path":"https://jimjunker1.github.io/secpRod/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Workflow Functions for estimating Secondary Production","text":"calc_production main function. function estimates bootstrapped secondary production multiple methods determined taxaInfo object. Please note ‘secpRod’ project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_igr.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_prod_igr — calc_prod_igr","title":"calc_prod_igr — calc_prod_igr","text":"function calculates production using instantaneous growth rate method.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_igr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_prod_igr — calc_prod_igr","text":"","code":"calc_prod_igr(   taxaSampleListMass = NULL,   taxaInfo = NULL,   bootNum = NULL,   dateDf = NULL,   taxaSummary = \"full\",   wrap = TRUE,   massValue = NULL,   massLabel = NULL,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_igr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_prod_igr — calc_prod_igr","text":"taxaSampleListMass description taxaInfo taxa info data.frame bootNum integer. number bootstrap samples produce. dateDf data frame date information external predictors month. column name identical variables growth equation found taxaInfo data.frame. taxaSummary string 'short', 'full', 'none'. type summary information returned. wrap logical. dates wrap create full year? massValue string. mass value units production massLabel string. label output units . possible default 'massValue' future. ... additional arguments pass function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_igr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_prod_igr — calc_prod_igr","text":"returns list 2 objects","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_igr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"calc_prod_igr — calc_prod_igr","text":"Additional details...","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_pb.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_prod_sf — calc_prod_pb","title":"calc_prod_sf — calc_prod_pb","text":"function calculates secondary production Production:Biomass method.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_pb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_prod_sf — calc_prod_pb","text":"","code":"calc_prod_pb(   taxaSampleListMass = NULL,   taxaInfo = NULL,   bootNum = NULL,   dateDf = NULL,   taxaSummary = \"full\",   wrap = TRUE,   massValue = NULL,   massLabel = NULL,   bootList = NULL,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_pb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_prod_sf — calc_prod_pb","text":"taxaSampleListMass description taxaInfo data frame taxonomic information calculating production bootNum integer. many bootstrap samples constructed dateDf data frame date information external predictors month. column name identical variables growth equation found taxaInfo data.frame. taxaSummary string 'short', 'full', 'none'. type summary information returned. wrap logical. dates wrap create full year? massValue string. mass value units production massLabel string. label output units . possible default 'massValue' future. bootList list bootstraps [prep_boots()]. ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_pb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_prod_sf — calc_prod_pb","text":"returns list 2 objects: P.boots: boostrapped estimates production, abundance, biomass. taxaSummary: summary sample production, abundance, biomass","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_prod_sf — calc_prod_sf","title":"calc_prod_sf — calc_prod_sf","text":"function calculates secondary production size-frequency method.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_prod_sf — calc_prod_sf","text":"","code":"calc_prod_sf(   taxaSampleListMass = NULL,   taxaInfo = NULL,   bootNum = NULL,   dateDf = NULL,   taxaSummary = \"full\",   wrap = TRUE,   massValue = NULL,   massLabel = NULL,   bootList = NULL,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_prod_sf — calc_prod_sf","text":"taxaSampleListMass description taxaInfo data frame taxonomic information calculating production bootNum integer. many bootstrap samples constructed dateDf data frame date information external predictors month. column name identical variables growth equation found taxaInfo data.frame. taxaSummary string 'short', 'full', 'none'. type summary information returned. wrap logical. dates wrap create full year? massValue string. mass value units production massLabel string. label output units . possible default 'massValue' future. bootList list. bootstrapped samples passed `calc_production()` ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_prod_sf — calc_prod_sf","text":"returns list 2 objects: P.boots: boostrapped estimates production, abundance, biomass. taxaSummary: summary sample production, abundance, biomass","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_production.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_production — calc_production","title":"calc_production — calc_production","text":"main function secpRod package. calculate secondary production groups based methods described taxa information object. Depending input values varying summaries returned.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_production.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_production — calc_production","text":"","code":"calc_production(   taxaSampleListMass = NULL,   infoCols = NULL,   taxaInfo = NULL,   bootNum = 100,   wrap = 1L,   taxaSummary = \"full\",   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_production.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_production — calc_production","text":"taxaSampleListMass data.frame sample length-masses abundances infoCols integer vector; columns sizeInfo object taxonomic ID, sampling metadata, size class columns taxaInfo dataframe (coercible); taxonomic information calculating secondary production. must include taxonomic ID column name taxaSampleListMass bootNum integer. number bootstrapped samples create wrap logical extra date added make full calendar year? taxaSummary string 'short', 'full', 'none' distinguish information returned ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/convert_length_to_mass.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_length_to_mass — convert_length_to_mass","title":"convert_length_to_mass — convert_length_to_mass","text":"function convert species-specific lengths mass based user-provided length-mass equation form variable values","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/convert_length_to_mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_length_to_mass — convert_length_to_mass","text":"","code":"convert_length_to_mass(   taxaSampleList = NULL,   taxaInfo = NULL,   reduce = TRUE,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/convert_length_to_mass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_length_to_mass — convert_length_to_mass","text":"taxaSampleList data.frame long format single taxa. data.frame contain species identifier column `taxonID` column length bin categories `lengthClass`. `lengthClass` values must numeric coercible. taxaInfo data.frame information convert length mass taxa. taxa specified `taxaSampleList` subset . data.frame must contain `taxonID` column, length--mass equation formula, `massForm`, must contain `lengthClass` variable (e.g., `afdm_mg~*lengthClass^b`). Additional columns necessary based length-mass formula. non-`lengthClass` variables right hand side (RHS) must unique columns named variable name. example, formula structure, `afdm_mg~*lengthClass^b`, RHS `*lengthClass^b`. `lengthClass` required column, optionally necessary columns `` `b` variables. formula parsed species-specific `` `b` coefficients inserted conversion. reduce logical. TRUE (default) mass column added `taxaSampleList`. name mass column parsed left hand side (LHS) `massForm` provided `taxaInfo`. example, `afdm_mg~*lengthClass^b` mass column named `afdm_mg`. data.frame returned reduce == TRUE ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/convert_length_to_mass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert_length_to_mass — convert_length_to_mass","text":"taxaSampleList mass column added.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/findreps.html","id":null,"dir":"Reference","previous_headings":"","what":"findreps — findreps","title":"findreps — findreps","text":"function finds sets breaks repeated runs similar character types. used parse formula structure variables `massForm` converting lengths mass convert_length_to_mass().","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/findreps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"findreps — findreps","text":"","code":"findreps(x, counter = NULL)"},{"path":"https://jimjunker1.github.io/secpRod/reference/findreps.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"findreps — findreps","text":"https://stackoverflow.com/questions/33155662/find--break--repeated-runs","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/findreps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"findreps — findreps","text":"x character string formula structure counter stuff","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/grapes-ni-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"%ni% — %ni%","title":"%ni% — %ni%","text":"function opposite %% finds items vector","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/grapes-ni-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"%ni% — %ni%","text":"","code":"x %ni% table"},{"path":"https://jimjunker1.github.io/secpRod/reference/grapes-ni-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"%ni% — %ni%","text":"x vector NULL: values exclude. Long vectors supported. table vector NULL: values excluded . Long vectors supported. #' @returns logical vector, indicating match located element x: thus values TRUE FALSE never NA.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/igr_prod.sample.html","id":null,"dir":"Reference","previous_headings":"","what":"igr_prod.sample — igr_prod.sample","title":"igr_prod.sample — igr_prod.sample","text":"function calculates taxa production based instantaneous growth method","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/igr_prod.sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"igr_prod.sample — igr_prod.sample","text":"","code":"igr_prod.sample(   df = NULL,   sizesDf = NULL,   massValue = NULL,   massLabel = NULL,   full = TRUE,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/igr_prod.sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"igr_prod.sample — igr_prod.sample","text":"df data.frame long format returned convert_length_to_mass() function sizesDf data.frame massValue character string identifying column name mass value massLabel character string identifying column name mass value full logical. full summary returned mean sd. ... additional arguments passed function, including variables predict growth rate growth function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/igr_prod.sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"igr_prod.sample — igr_prod.sample","text":"list object taxa summary sampled data","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/inv.logit.html","id":null,"dir":"Reference","previous_headings":"","what":"inv.logit — inv.logit","title":"inv.logit — inv.logit","text":"inv.logit","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/inv.logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inv.logit — inv.logit","text":"","code":"inv.logit(eta)"},{"path":"https://jimjunker1.github.io/secpRod/reference/inv.logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inv.logit — inv.logit","text":"eta mixtools","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/overlapCohortSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for community secondary production analysis — overlapCohortSim","title":"Sample data for community secondary production analysis — overlapCohortSim","text":"collection community macroinvertebrate data estimating secondary production","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/overlapCohortSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for community secondary production analysis — overlapCohortSim","text":"","code":"overlapCohortSim"},{"path":"https://jimjunker1.github.io/secpRod/reference/overlapCohortSim.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for community secondary production analysis — overlapCohortSim","text":"`overlapCohortSim` single tibble data frame list-col simulating sampling univoltine population split cohort: x integer. x location sampled grid cell y integer. y location sampled grid cell larvalDensity integer. density larvae grid cell massDistribution numeric. list-col mass individual cell","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/overlapCohortSim.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for community secondary production analysis — overlapCohortSim","text":"data-raw/single_cohort_sim.R","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/pb_prod.sample.html","id":null,"dir":"Reference","previous_headings":"","what":"pb_prod.sample — pb_prod.sample","title":"pb_prod.sample — pb_prod.sample","text":"function calculates taxa production based production:biomass method","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/pb_prod.sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pb_prod.sample — pb_prod.sample","text":"","code":"pb_prod.sample(   df = NULL,   sizesDf = NULL,   massValue = NULL,   massLabel = NULL,   pb = NULL,   full = TRUE,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/pb_prod.sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pb_prod.sample — pb_prod.sample","text":"df data.frame long format returned convert_length_to_mass() function sizesDf data.frame massValue character string identifying column name mass value massLabel character string identifying column name mass value pb numeric. production:biomass ratio. full logical. full summary returned mean sd ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/pb_prod.sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pb_prod.sample — pb_prod.sample","text":"list object taxa summary sampled data","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://jimjunker1.github.io/secpRod/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/plot_cohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_cohorts — plot_cohorts","title":"plot_cohorts — plot_cohorts","text":"function plots size-frequency data single taxon time","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/plot_cohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_cohorts — plot_cohorts","text":"","code":"plot_cohorts(   taxaSampleListMass = NULL,   param = c(\"length\", \"mass\"),   massClass = \"afdm_mg\",   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/plot_cohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_cohorts — plot_cohorts","text":"taxaSampleListMass data.frame long format returned convert_length_to_mass() function param character. string 'length' 'mass' describes measurement plotted massClass character. column name mass measurement (e.g., afdm_mg, dm_mg, etc.) ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/plot_cohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_cohorts — plot_cohorts","text":"returns histogram plot relative frequency size mass classes single taxon sampling dates","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/prep_boots.html","id":null,"dir":"Reference","previous_headings":"","what":"prep_boots — prep_boots","title":"prep_boots — prep_boots","text":"function prepares bootstrap samples.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/prep_boots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prep_boots — prep_boots","text":"","code":"prep_boots(df = NULL, bootNum = bootNum)"},{"path":"https://jimjunker1.github.io/secpRod/reference/prep_boots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prep_boots — prep_boots","text":"df data.frame. dataframe species size, mass, frequency data. bootNum integer. number bootstrapped data sets created.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/reconstruct_cohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"reconstruct_split_cohort — reconstruct_split_cohort","title":"reconstruct_split_cohort — reconstruct_split_cohort","text":"reconstruct_split_cohorts() used reconstruct *non-overlapping* cohort sampled two years, often period zero abundance (e.g. due egg adult stages). fit_with_offset() internal function used [reconstruct_split_cohort()] fit growth functions find optimal cohort offset split cohort. plot_cohort_fit() internal function used [reconstruct_split_cohort()] fit growth functions find optimal cohort offset split cohort.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/reconstruct_cohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reconstruct_split_cohort — reconstruct_split_cohort","text":"","code":"reconstruct_split_cohort(   df = NULL,   timeCol = \"dateID\",   massCol = \"massValue\",   massDropThresh = 0.6,   tStart = 5,   models = c(\"vbg\", \"gompertz\", \"logistic\", \"richards\"),   offsetBounds = c(10, 150),   fallbackGrid = TRUE )  fit_with_offset(   dfOrdered = NULL,   offset = NULL,   models = c(\"vbg\", \"gompertz\", \"logistic\", \"richards\"),   tStart = 5 )  plot_cohort_fit(remappedCohort, models = \"ensemble\", labelPoints = TRUE)"},{"path":"https://jimjunker1.github.io/secpRod/reference/reconstruct_cohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reconstruct_split_cohort — reconstruct_split_cohort","text":"df data.frame sample-level observed masses densities timeCol character. String column name depicting date sampling event. massCol character. String column name containing mass data. massDropThresh proportional drop mass used detect end beginning two cohort portions. tStart data frame date information external predictors month. column name identical variables growth equation found taxaInfo data.frame. models character. String vector names models fit \\(M_t\\). See `details` information. offsetBounds integer vector length = 2. lower upper bounds offset test fit fallbackGrid logical. TRUE (default) grid search procedure used `optim()` fails. dfOrdered reordered sampling data set [reconstruct_split_cohort()] processes offset offset (days) final sample first sample two cohort portions joined remappedCohort reordered object returned [reconstruct_split_cohort()] labelPoints logical. points labelled sampling date information","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/reconstruct_cohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reconstruct_split_cohort — reconstruct_split_cohort","text":"resonstruct_split_cohort() returns dataframe original sampling date, estimated cohort ages, remapped cohort ages fit production methods remap back original timescale. fit_with_offset() returns list three (3) objects: fits: growth model fits reordered sampling dates aiccs: Akaike Information Criterion model. used build ensemble model estimates remapped cohort 'times' df_pseudo: data.frame original date, standardized cohort 'times', t0 corrected ages estimated growth models. plot_cohort_fit() returns ggplot object remapped cohort growth model fits.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/reconstruct_cohorts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"reconstruct_split_cohort — reconstruct_split_cohort","text":"initiation sampling program can often start growth population cohort already underway, leading observing large, late instars individuals early sampling events. univoltine species, may followed period zero abundance (e.g., due egg adult stages) subsequent sampling early instars. make inferences cohort parameters use model-based procedures estimate production, useful 're-order' sampling dates create continuous cohort progression. makes assumptions. details , see _sampling simulation vignette_. function reorders partial cohorts (e.g., late instars beginning early instars later sampling annual regime. , model fits growth functions remap split cohorts continuous progression time. difficult aspect estimating relative cohort age different sampling events correct ordering may long period . Crucially, observe beginning end full cohort, information distinct sampling events. function fits growth models estimate cohort ages sample remap cohort progression. Models fit mean cohort mass sampling event, \\(M_{t}\\) return estimates asymptotic mass, \\(M_{\\infty}\\), time mass = 0, \\(t_0\\) (time growth inflection, \\(t*\\), depending model used estimate \\(t_0\\)), growth rate, \\(k\\).  Current models available : \"vbg\" 'regular' von Bertalanffy growth model: $$M_{t} = M_{\\infty} (1 -e^{-k \\cdot (t - t_0)})$$      \"gompertz\" Gompertz growth model: $$M_t = M_{\\infty} e^{e^{-k \\cdot (t - t*)}}$$      \"logistic\" logistic growth model: $$M_t = M_{\\infty} / (1 + e^{-k \\cdot (t - t*)})$$      \"richards\" Richards growth model: $$M_t = M_{\\infty} (1 + 1/D \\cdot e^{-k \\cdot (t - t*)})^{-D}$$","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/sf_prod.sample.html","id":null,"dir":"Reference","previous_headings":"","what":"sf_prod.sample — sf_prod.sample","title":"sf_prod.sample — sf_prod.sample","text":"function calculates taxa production based size-frequency method","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/sf_prod.sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sf_prod.sample — sf_prod.sample","text":"","code":"sf_prod.sample(   df = NULL,   sizesDf = NULL,   massValue = NULL,   massLabel = NULL,   cpi = NULL,   full = TRUE,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/sf_prod.sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sf_prod.sample — sf_prod.sample","text":"df data.frame long format returned convert_length_to_mass() function sizesDf data.frame massValue character string identifying column name mass value massLabel character string identifying column name mass value cpi integer. cohort production interval. full logical. full summary returned mean sd ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/sf_prod.sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sf_prod.sample — sf_prod.sample","text":"list object taxa summary sampled data","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/singleCohortSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for community secondary production analysis — singleCohortSim","title":"Sample data for community secondary production analysis — singleCohortSim","text":"collection community macroinvertebrate data estimating secondary production","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/singleCohortSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for community secondary production analysis — singleCohortSim","text":"","code":"singleCohortSim"},{"path":"https://jimjunker1.github.io/secpRod/reference/singleCohortSim.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for community secondary production analysis — singleCohortSim","text":"`singleCohortSim` single tibble data frame list-col simulating sampling single cohort population: x integer. x location sampled grid cell y integer. y location sampled grid cell larvalDensity integer. density larvae grid cell massDistribution numeric. list-col mass individual cell","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/singleCohortSim.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for community secondary production analysis — singleCohortSim","text":"data-raw/single_cohort_sim.R","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/splitCohortSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for community secondary production analysis — splitCohortSim","title":"Sample data for community secondary production analysis — splitCohortSim","text":"collection community macroinvertebrate data estimating secondary production","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/splitCohortSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for community secondary production analysis — splitCohortSim","text":"","code":"splitCohortSim"},{"path":"https://jimjunker1.github.io/secpRod/reference/splitCohortSim.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for community secondary production analysis — splitCohortSim","text":"`splitCohortSim` single tibble data frame list-col simulating sampling univoltine population split cohort: x integer. x location sampled grid cell y integer. y location sampled grid cell larvalDensity integer. density larvae grid cell massDistribution numeric. list-col mass individual cell","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/splitCohortSim.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for community secondary production analysis — splitCohortSim","text":"data-raw/single_cohort_sim.R","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/univoltine.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for community secondary production analysis — univoltine","title":"Sample data for community secondary production analysis — univoltine","text":"collection community macroinvertebrate data estimating secondary production","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/univoltine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for community secondary production analysis — univoltine","text":"","code":"univoltine"},{"path":"https://jimjunker1.github.io/secpRod/reference/univoltine.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for community secondary production analysis — univoltine","text":"`univoltine` single data.frame sampleInfo data sampled single simulated taxon columns: taxonID taxonomic identifier repID replicate identifier dateID date identifier .Date format lengthClass numeric (coercible) description individual length n_m2 count density individuals lengthClass","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/wbtData.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for community secondary production analysis — wbtData","title":"Sample data for community secondary production analysis — wbtData","text":"collection community macroinvertebrate data estimating secondary production","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/wbtData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for community secondary production analysis — wbtData","text":"","code":"wbtData"},{"path":"https://jimjunker1.github.io/secpRod/reference/wbtData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for community secondary production analysis — wbtData","text":"`wbtData` list two objects. 'sampleInfo' list 32 data frames taxonomic entity second, 'taxaInfo' data frame 32 rows 13 columns: taxonID taxonomic identifier repID replicate identifier dateID date identifier .Date format lengthClass numeric (coercible) description individual length n_m2 count density individuals lengthClass","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/wbtData.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for community secondary production analysis — wbtData","text":"<https://doi.org/10.4319/lo.2014.59.2.0507>","code":""}]
