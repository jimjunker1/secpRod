[{"path":"https://jimjunker1.github.io/secpRod/articles/simple-example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"simple-example","text":"Currently, method analysis fully implemented size-frequency. quick tutorial outline steps calculate secondary production whole communities. First, load package library(secpRod). package comes data set macroinvertebrate community data (junker2014?) can accessed data(\"wbtData\") data object list two (2) elements: sampleInfo: list 32 data frames. One (1) taxonomic entity taxaInfo: data frame 32 rows 13 columns. row represents taxonomic information single taxonomic entity columns contain information calculation production. include, limited : taxonID: character string matches name taxonID sampleInfo massForm: character string coercible formula conversion length mass (e.g., afdm_mg~(*lengthClass^b)) : numeric variable coefficients used massForm b: numeric variable coefficients used massForm percAsh: numeric integer 0–100 method: character string method use. Must one following: ‘sf’ (updated methods finalized.) growthForm: description forthcoming… min.cpi: integer minimum estimated cohort production interval adjusting annual production estimates using size-frequency method max.cpi: integer maximum estimated cohort production interval adjusting annual production estimates using size-frequency method pb: numeric production biomass (PB) ratio specific taxa. can take three forms 1) single value, 2) vector values length bootNum, 3) string distribution randomly sample, including n = (e.g., ‘rnorm(mean = 5, sd = 0.5)’, ‘runif(min = 3, max = 8)’). function automatically sample bootNum values. Fair warning: suggest explicitly name parameters function call string. Possible unwanted unknown things may happen otherwise. tests feature still development, reject nonsensical values (e.g, negative, NA, Inf). distribution samples negative values get negative productions estimates–least min.growth feature implemented. min.growth: description forthcoming… notes: notes researcher use. column maintained output summaries.","code":""},{"path":[]},{"path":"https://jimjunker1.github.io/secpRod/articles/simple-example.html","id":"single-species-walkthrough","dir":"Articles","previous_headings":"Examples","what":"Single-species walkthrough","title":"simple-example","text":"quick walkthrough calculation secondary production single species. data contain replicates density body length distributions long format. first step convert length mass estimating biomass patterns. use convert_length_to_mass() function, adds column individual masses based length--mass formula coefficients taxaInfo. can take look looks like: Information use can viewed ?convert_lenght_to_mass can view size frequency histograms using plot_cohorts() function. Check function options ?plot_cohorts.  figures can helpful identifying cohort structures getting ballpark cohort production intervals (CPI) species estimating production using size frequency method. future, hope implement approach delineate cohorts estimate growth parameters size-frequency data, feature still development. next step estimate production. , size-frequency fully operational work update methods soon! function calc_production() workhorse function estimate community production. apply single species example, input sample information taxa information along many bootstraps like, : output lot information though simple structure: P.boots–vectors bootstrapped estimates annual production, annual biomass, annual abundance. taxaSummary–comes ‘full’ ‘short’ versions. see full can lot. ‘short’ paired version can also turn ‘none’.","code":"## isolate a single species data frame from sampleInfo object  acentrella <- wbtData[['sampleInfo']][['Acentrella sp.']]  ## let's take a look at the data set head(acentrella, 10) #> # A tibble: 10 × 5 #>    taxonID        repID dateID              lengthClass  n_m2 #>    <chr>          <dbl> <dttm>                    <dbl> <dbl> #>  1 Acentrella sp.     1 2008-07-17 00:00:00         0.5   0   #>  2 Acentrella sp.     1 2008-07-17 00:00:00         1     0   #>  3 Acentrella sp.     1 2008-07-17 00:00:00         2    62.5 #>  4 Acentrella sp.     1 2008-07-17 00:00:00         3    72.9 #>  5 Acentrella sp.     1 2008-07-17 00:00:00         4    72.9 #>  6 Acentrella sp.     1 2008-07-17 00:00:00         5    52.1 #>  7 Acentrella sp.     1 2008-07-17 00:00:00         6     0   #>  8 Acentrella sp.     1 2008-07-17 00:00:00         7     0   #>  9 Acentrella sp.     1 2008-07-17 00:00:00         8     0   #> 10 Acentrella sp.     1 2008-07-17 00:00:00         9     0 acentrellaInfo = subset(taxaInfo, taxonID == \"Acentrella sp.\") acentrellaInfo #> # A tibble: 1 × 13 #> # Groups:   taxonID [1] #>   taxonID  massForm      a     b percAsh method g.a   growthForm min.cpi max.cpi #>   <chr>    <chr>     <dbl> <dbl>   <dbl> <chr>  <lgl> <chr>        <dbl>   <dbl> #> 1 Acentre… afdm_mg… 0.0076  2.69     4.9 sf     NA    \"log(g_d)…     335     365 #> # ℹ 3 more variables: pb <dbl>, min.growth <dbl>, notes <chr> acentrellaMass = convert_length_to_mass(taxaSampleList = acentrella,                                          taxaInfo = wbtData[['taxaInfo']])  head(acentrellaMass) #> # A tibble: 6 × 6 #>   taxonID        repID dateID              lengthClass  n_m2 afdm_mg #>   <chr>          <dbl> <dttm>                    <dbl> <dbl>   <dbl> #> 1 Acentrella sp.     1 2008-07-17 00:00:00         0.5   0   0.00577 #> 2 Acentrella sp.     1 2008-07-17 00:00:00         1     0   0.0372  #> 3 Acentrella sp.     1 2008-07-17 00:00:00         2    62.5 0.240   #> 4 Acentrella sp.     1 2008-07-17 00:00:00         3    72.9 0.716   #> 5 Acentrella sp.     1 2008-07-17 00:00:00         4    72.9 1.55    #> 6 Acentrella sp.     1 2008-07-17 00:00:00         5    52.1 2.83 plot_cohorts(taxaSampleListMass = acentrellaMass,              param = 'length',              massClass = 'afdm_mg') calc_production(   taxaSampleListMass = acentrellaMass,   infoCols = c(1:3),   taxaInfo = acentrellaInfo,   bootNum = 10,   wrap = TRUE,   taxaSummary = 'full' ) #> $P.boots #>            [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     #> P.ann.samp 7940.091 7347.328 6750.154 7379.726 8693.962 7195.436 7749.373 #> B.ann.samp 281.212  251.9421 239.4474 245.5085 275.3727 244.2948 279.7703 #> N.ann.samp 755.9725 687.4068 623.8051 641.8776 721.6965 613.732  685.8735 #>            [,8]     [,9]     [,10]    #> P.ann.samp 8151.089 8530.908 7941.279 #> B.ann.samp 254.9748 285.5202 276.6327 #> N.ann.samp 688.812  743.1457 686.2414 #>  #> $taxaSummary #> $taxaSummary$summaryType #> [1] \"full\" #>  #> $taxaSummary$taxonID #> [1] \"Acentrella sp.\" #>  #> $taxaSummary$method #> [1] \"sf\" #>  #> $taxaSummary$P.ann.samp #> [1] 7370.212 #>  #> $taxaSummary$P.uncorr.samp #> [1] 7067.326 #>  #> $taxaSummary$cpi #> [1] 350 #>  #> $taxaSummary$pb #> [1] 29.03778 #>  #> $taxaSummary$meanN #> [1] 657.723 #>  #> $taxaSummary$meanB #> [1] 253.8146 #>  #> $taxaSummary$meanIndMass #> [1] 0.3858989 #>  #> $taxaSummary$Nmean #>                   0.5         1         2         3         4         5 #> 2008-07-17   0.000000  11.45833  48.95833  33.33333 39.583333 30.208333 #> 2008-08-13   0.000000  12.35703  62.91970 105.36194 56.619625  7.291667 #> 2008-09-23  53.028394 399.27515 545.08029 132.82990  7.291667 33.333333 #> 2008-10-26  78.012266 582.35127 666.79595 173.86885  3.882576  0.000000 #> 2008-11-23   1.041667 290.29353 555.27152 123.57480 15.136670  2.083333 #> 2008-12-17 208.701307 593.97944 287.82091 103.54200 14.204545  2.083333 #> 2009-02-03  20.014881 250.22631 142.14720  27.80258  4.166667  2.083333 #> 2009-04-07  90.277778 239.72446 332.67915 102.71991 27.272727  4.924242 #> 2009-05-16   0.000000  33.44907 125.79807  32.69121 18.750000  5.208333 #> 2009-06-23   0.000000  19.50921  73.99330  80.57125 23.639759  1.041667 #>                    6         7        8     9 10 11 12 13 14 15 16 17 18 19 20 #> 2008-07-17 12.500000  2.083333 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  2.083333  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23 30.208333 20.833333 3.125000 3.125  0  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  2.840909  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23  0.000000  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  2.083333  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  1.041667  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07  6.875000  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  5.208333  0.000000 1.041667 0.000  0  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23  8.798759  0.000000 0.000000 0.000  0  0  0  0  0  0  0  0  0  0  0 #>            21 22 23 24 25 26 27 28 29 30 #> 2008-07-17  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23  0  0  0  0  0  0  0  0  0  0 #>  #> $taxaSummary$Nsd #>                   0.5         1         2         3         4         5 #> 2008-07-17   0.000000  29.64635  45.01854  27.25197 46.791335 31.614388 #> 2008-08-13   0.000000  24.55841 130.78970 151.69187 58.651399  9.882118 #> 2008-09-23  99.904573 640.40507 820.70373 166.25512  7.030714 34.652708 #> 2008-10-26 210.757419 434.06890 508.27227 144.97113  9.218577  0.000000 #> 2008-11-23   3.294039 195.29622 348.76995 107.84317 43.107151  4.392052 #> 2008-12-17 388.902788 748.41641 349.28272 114.55605 16.517014  6.588078 #> 2009-02-03  44.522062 535.29716 316.10626  53.51328  7.283395  6.588078 #> 2009-04-07 222.149872 399.20601 492.05437 170.97389 58.965796  9.319089 #> 2009-05-16   0.000000 102.16768 255.46931  57.94451 32.125093 11.251286 #> 2009-06-23   0.000000  31.63802  93.27213 107.03519 32.020550  3.294039 #>                    6         7        8        9 10 11 12 13 14 15 16 17 18 19 #> 2008-07-17 15.372183  4.392052 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  4.392052  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23 56.299275 32.200064 5.031728 7.030714  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  8.983743  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23  0.000000  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  6.588078  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  3.294039  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07 21.740659  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16 11.251286  0.000000 3.294039 0.000000  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23 24.384816  0.000000 0.000000 0.000000  0  0  0  0  0  0  0  0  0  0 #>            20 21 22 23 24 25 26 27 28 29 30 #> 2008-07-17  0  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  0  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23  0  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  0  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23  0  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  0  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  0  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07  0  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  0  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23  0  0  0  0  0  0  0  0  0  0  0 #>  #> $taxaSummary$Bmean #>                    0.5          1         2         3         4         5 #> 2008-07-17 0.000000000  0.4267083  11.77357  23.86831 61.470320 85.519414 #> 2008-08-13 0.000000000  0.4601757  15.13101  75.44435 87.926563 20.642617 #> 2008-09-23 0.305806299 14.8690067 131.08164  95.11277 11.323480 94.366250 #> 2008-10-26 0.449884307 21.6867611 160.35199 124.49868  6.029385  0.000000 #> 2008-11-23 0.006007126 10.8105310 133.53244  88.48566 23.506256  5.897891 #> 2008-12-17 1.203547188 22.1197943  69.21556  74.14118 22.058727  5.897891 #> 2009-02-03 0.115422630  9.3184280  34.18375  19.90802  6.470560  5.897891 #> 2009-04-07 0.520617562  8.9273390  80.00313  73.55253 42.352756 13.940469 #> 2009-05-16 0.000000000  1.2456435  30.25209  23.40852 29.117520 14.744727 #> 2009-06-23 0.000000000  0.7265230  17.79401  57.69299 36.710995  2.948945 #>                     6        7        8        9 10 11 12 13 14 15 16 17 18 19 #> 2008-07-17  57.799582  14.5857  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13   9.633264   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23 139.682324 145.8570 31.33826 43.02554  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  13.136269   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23   0.000000   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17   9.633264   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03   4.816632   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07  31.789770   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  24.083159   0.0000 10.44609  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23  40.685167   0.0000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #>            20 21 22 23 24 25 26 27 28 29 30 #> 2008-07-17  0  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  0  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23  0  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  0  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23  0  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  0  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  0  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07  0  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  0  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23  0  0  0  0  0  0  0  0  0  0  0 #>  #> $taxaSummary$Bsd #>                  0.5          1         2         3        4         5 #> 2008-07-17 0.0000000  1.1040302  10.82612  19.51375 72.66387 89.499937 #> 2008-08-13 0.0000000  0.9145551  31.45248 108.61887 91.08177 27.976152 #> 2008-09-23 0.5761338 23.8486848 197.36394 119.04687 10.91824 98.101384 #> 2008-10-26 1.2154045 16.1647259 122.23000 103.80648 14.31585  0.000000 #> 2008-11-23 0.0189962  7.2728313  83.87267  77.22104 66.94258 12.433845 #> 2008-12-17 2.2427404 27.8710270  83.99598  82.02779 25.64984 18.650768 #> 2009-02-03 0.2567516 19.9344664  76.01766  38.31815 11.31063 18.650768 #> 2009-04-07 1.2811029 14.8664317 118.32990 122.42575 91.57001 26.382223 #> 2009-05-16 0.0000000  3.8047243  61.43560  41.49113 49.88816 31.852250 #> 2009-06-23 0.0000000  1.1782000  22.43021  76.64248 49.72581  9.325384 #>                    6         7        8        9 10 11 12 13 14 15 16 17 18 19 #> 2008-07-17  71.08046  30.74935  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  20.30870   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23 260.32597 225.43702 50.45939 96.80008  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  41.54053   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23   0.00000   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  30.46305   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  15.23153   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07 100.52808   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  52.02557   0.00000 33.03342  0.00000  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23 112.75457   0.00000  0.00000  0.00000  0  0  0  0  0  0  0  0  0  0 #>            20 21 22 23 24 25 26 27 28 29 30 #> 2008-07-17  0  0  0  0  0  0  0  0  0  0  0 #> 2008-08-13  0  0  0  0  0  0  0  0  0  0  0 #> 2008-09-23  0  0  0  0  0  0  0  0  0  0  0 #> 2008-10-26  0  0  0  0  0  0  0  0  0  0  0 #> 2008-11-23  0  0  0  0  0  0  0  0  0  0  0 #> 2008-12-17  0  0  0  0  0  0  0  0  0  0  0 #> 2009-02-03  0  0  0  0  0  0  0  0  0  0  0 #> 2009-04-07  0  0  0  0  0  0  0  0  0  0  0 #> 2009-05-16  0  0  0  0  0  0  0  0  0  0  0 #> 2009-06-23  0  0  0  0  0  0  0  0  0  0  0 #>  #> $taxaSummary$datesInfo #>        dateID  N n_m2_mean afdm_mg_m2_mean #> 1  2008-07-17 10  178.1250        255.4436 #> 2  2008-08-13 10  246.6333        209.2380 #> 3  2008-09-23 10 1228.1304        706.9621 #> 4  2008-10-26 10 1507.7518        326.1530 #> 5  2008-11-23 10  987.4015        262.2388 #> 6  2008-12-17 10 1212.4149        204.2700 #> 7  2009-02-03 10  447.4826         80.7107 #> 8  2009-04-07 10  804.4733        251.0866 #> 9  2009-05-16 10  222.1467        133.2977 #> 10 2009-06-23 10  207.5540        156.5586 #> 11 2009-07-16 NA  192.8395        206.0011 calc_production(   taxaSampleListMass = acentrellaMass,   infoCols = c(1:3),   taxaInfo = acentrellaInfo,   bootNum = 10,   wrap = TRUE,   taxaSummary = 'short' ) #> $P.boots #>            [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     #> P.ann.samp 7638.285 5953.472 6808.544 7001.529 6931.222 5886.349 7537.099 #> B.ann.samp 258.6085 184.0436 230.1941 239.7841 238.6413 222.7535 251.3112 #> N.ann.samp 694.8811 519.1493 631.0977 625.8657 645.2675 520.0243 600.9715 #>            [,8]     [,9]     [,10]    #> P.ann.samp 6706.993 6279.584 8175.819 #> B.ann.samp 204.3447 225.6384 283.3806 #> N.ann.samp 601.2926 587.8376 756.6771 #>  #> $taxaSummary #> $taxaSummary$summaryType #> [1] \"short\" #>  #> $taxaSummary$taxonID #> [1] \"Acentrella sp.\" #>  #> $taxaSummary$method #> [1] \"sf\" #>  #> $taxaSummary$P.ann.samp #> [1] 7370.212 #>  #> $taxaSummary$cpi #> [1] 350 #>  #> $taxaSummary$pb #> [1] 29.03778 #>  #> $taxaSummary$meanN #> [1] 657.723 #>  #> $taxaSummary$meanB #> [1] 253.8146 #>  #> $taxaSummary$meanIndMass #> [1] 0.3858989 #>  #> $taxaSummary$datesInfo #>        dateID  N n_m2_mean afdm_mg_m2_mean #> 1  2008-07-17 10  178.1250        255.4436 #> 2  2008-08-13 10  246.6333        209.2380 #> 3  2008-09-23 10 1228.1304        706.9621 #> 4  2008-10-26 10 1507.7518        326.1530 #> 5  2008-11-23 10  987.4015        262.2388 #> 6  2008-12-17 10 1212.4149        204.2700 #> 7  2009-02-03 10  447.4826         80.7107 #> 8  2009-04-07 10  804.4733        251.0866 #> 9  2009-05-16 10  222.1467        133.2977 #> 10 2009-06-23 10  207.5540        156.5586 #> 11 2009-07-16 NA  192.8395        206.0011"},{"path":"https://jimjunker1.github.io/secpRod/articles/simple-example.html","id":"an-example-using-the-pb-method","dir":"Articles","previous_headings":"Examples","what":"An example using the PB method","title":"simple-example","text":"pb method allows multiple options set production biomass ratio: single value. use value bootstrap sample. variability derived entirely resampling sample units (e.g. surbers). character string distribution sample excluding n=, rnorm(mean = 5, sd = 0.5). function automatically sample bootNum values. numeric vector length bootNum. explicit option set values pb used. future, length \\(\\neq\\) bootNum error returned taxa.","code":"acentrellaInfo$method = \"pb\" acentrellaInfo$pb = \"runif(min = 3, max = 8)\"  calc_production(   taxaSampleListMass = acentrellaMass,   infoCols = c(1:3),   taxaInfo = acentrellaInfo,   bootNum = 10,   wrap = TRUE,   taxaSummary = 'short' ) #> $P.boots #>            [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     #> P.ann.samp 1945.721 1279.923 1410.183 2016.761 1360.982 1651.855 1093.351 #> B.ann.samp 245.491  206.8923 250.9123 259.3683 245.772  263.4295 216.793  #> N.ann.samp 712.2668 517.997  601.6738 640.9463 596.3733 689.7779 562.305  #>            [,8]     [,9]     [,10]    #> P.ann.samp 1631.908 1835.312 2101.392 #> B.ann.samp 253.2109 279.4416 265.0093 #> N.ann.samp 692.022  682.4098 630.0012 #>  #> $taxaSummary #> $taxaSummary$summaryType #> [1] \"short\" #>  #> $taxaSummary$taxonID #> [1] \"Acentrella sp.\" #>  #> $taxaSummary$method #> [1] \"pb\" #>  #> $taxaSummary$P.ann.samp #> [1] 1585.84 #>  #> $taxaSummary$pb #> [1] 6.248027 #>  #> $taxaSummary$meanN #> [1] 657.723 #>  #> $taxaSummary$meanB #> [1] 253.8146 #>  #> $taxaSummary$meanIndMass #> [1] 0.3858989 #>  #> $taxaSummary$datesInfo #>        dateID  N n_m2_mean afdm_mg_m2_mean #> 1  2008-07-17 10  178.1250        255.4436 #> 2  2008-08-13 10  246.6333        209.2380 #> 3  2008-09-23 10 1228.1304        706.9621 #> 4  2008-10-26 10 1507.7518        326.1530 #> 5  2008-11-23 10  987.4015        262.2388 #> 6  2008-12-17 10 1212.4149        204.2700 #> 7  2009-02-03 10  447.4826         80.7107 #> 8  2009-04-07 10  804.4733        251.0866 #> 9  2009-05-16 10  222.1467        133.2977 #> 10 2009-06-23 10  207.5540        156.5586 #> 11 2009-07-16 NA  192.8395        206.0011"},{"path":"https://jimjunker1.github.io/secpRod/articles/simple-example.html","id":"applying-this-to-multiple-taxa","dir":"Articles","previous_headings":"","what":"Applying this to multiple taxa","title":"simple-example","text":"current internal code just calc_production still buggy. can run production splitting full sampleInfo list taxa using apply functions (purrr package)[https://purrr.tidyverse.org/] code shows accomplish . , size frequency pb accepted currently.","code":"# load needed packages library(magrittr) library(purrr)  # The sampleInfo is already a list by taxonID str(wbtData[['sampleInfo']], list.len = 5) #> list<tibble[,5]> [1:32]  #> $ Acentrella sp.    : tibble [3,100 × 5] (S3: tbl_df/tbl/data.frame) #>  ..$ taxonID    : chr [1:3100] \"Acentrella sp.\" \"Acentrella sp.\" \"Acentrella sp.\" \"Acentrella sp.\" ... #>  ..$ repID      : num [1:3100] 1 1 1 1 1 1 1 1 1 1 ... #>  ..$ dateID     : POSIXct[1:3100], format: \"2008-07-17\" \"2008-07-17\" ... #>  ..$ lengthClass: num [1:3100] 0.5 1 2 3 4 5 6 7 8 9 ... #>  ..$ n_m2       : num [1:3100] 0 0 62.5 72.9 72.9 ... #> $ Ameletus spp.     : tibble [3,038 × 5] (S3: tbl_df/tbl/data.frame) #>  ..$ taxonID    : chr [1:3038] \"Ameletus spp.\" \"Ameletus spp.\" \"Ameletus spp.\" \"Ameletus spp.\" ... #>  ..$ repID      : num [1:3038] 1 1 1 1 1 1 1 1 1 1 ... #>  ..$ dateID     : POSIXct[1:3038], format: \"2008-07-17\" \"2008-07-17\" ... #>  ..$ lengthClass: num [1:3038] 0.5 1 2 3 4 5 6 7 8 9 ... #>  ..$ n_m2       : num [1:3038] 0 0 0 0 0 0 0 0 0 0 ... #> $ Attenella spp.    : tibble [3,038 × 5] (S3: tbl_df/tbl/data.frame) #>  ..$ taxonID    : chr [1:3038] \"Attenella spp.\" \"Attenella spp.\" \"Attenella spp.\" \"Attenella spp.\" ... #>  ..$ repID      : num [1:3038] 1 1 1 1 1 1 1 1 1 1 ... #>  ..$ dateID     : POSIXct[1:3038], format: \"2008-07-17\" \"2008-07-17\" ... #>  ..$ lengthClass: num [1:3038] 0.5 1 2 3 4 5 6 7 8 9 ... #>  ..$ n_m2       : num [1:3038] 0 0 41.7 20.8 0 ... #> $ Baetis spp.       : tibble [3,100 × 5] (S3: tbl_df/tbl/data.frame) #>  ..$ taxonID    : chr [1:3100] \"Baetis spp.\" \"Baetis spp.\" \"Baetis spp.\" \"Baetis spp.\" ... #>  ..$ repID      : num [1:3100] 1 1 1 1 1 1 1 1 1 1 ... #>  ..$ dateID     : POSIXct[1:3100], format: \"2008-07-17\" \"2008-07-17\" ... #>  ..$ lengthClass: num [1:3100] 0.5 1 2 3 4 5 6 7 8 9 ... #>  ..$ n_m2       : num [1:3100] 0 0 20.8 31.2 93.8 ... #> $ Barbaetis spp.    : tibble [3,100 × 5] (S3: tbl_df/tbl/data.frame) #>  ..$ taxonID    : chr [1:3100] \"Barbaetis spp.\" \"Barbaetis spp.\" \"Barbaetis spp.\" \"Barbaetis spp.\" ... #>  ..$ repID      : num [1:3100] 1 1 1 1 1 1 1 1 1 1 ... #>  ..$ dateID     : POSIXct[1:3100], format: \"2008-07-17\" \"2008-07-17\" ... #>  ..$ lengthClass: num [1:3100] 0.5 1 2 3 4 5 6 7 8 9 ... #>  ..$ n_m2       : num [1:3100] 0 0 20.8 0 0 ... #>  [list output truncated] #> @ ptype: tibble [0 × 5] (S3: tbl_df/tbl/data.frame) #>  ..$ taxonID    : chr(0)  #>  ..$ repID      : num(0)  #>  ..$ dateID     : 'POSIXct' num(0)  #>  - attr(*, \"tzone\")= chr \"UTC\" #>  ..$ lengthClass: num(0)  #>  ..$ n_m2       : num(0)  # if you have a large data frame with all taxa the code below shows how to do this: ## install a package to split into a named_list # devtools::install_github('jimjunker1/junkR') # library(junkR) ## Convert to data frame # sampleInfoDf = wbtData[['sampleInfo']] %>% bind_rows ## Convert back to named list split by taxonID # sampleInfoList = sampleInfoDf %>% junkR::named_group_split(taxonID)  sampleInfoList = wbtData[['sampleInfo']]  sampleInfoListMass = sampleInfoList %>%    purrr::map(     ~convert_length_to_mass(.x,                             taxaInfo = taxaInfo)   )  fullProduction = sampleInfoListMass %>%    purrr::map2(., list(taxaInfo),                      ~calc_production(.x,                                       infoCols = c(1:3),                                       taxaInfo = .y,                                        bootNum = 10,                                        wrap = TRUE,                                       taxaSummary = 'short'                                       )                      )  str(fullProduction, list.len = 5) #> List of 32 #>  $ Acentrella sp.    :List of 2 #>   ..$ P.boots    :List of 30 #>   .. ..$ : num 7030 #>   .. ..$ : num 241 #>   .. ..$ : num 630 #>   .. ..$ : num 7998 #>   .. ..$ : num 253 #>   .. .. [list output truncated] #>   .. ..- attr(*, \"dim\")= int [1:2] 3 10 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:3] \"P.ann.samp\" \"B.ann.samp\" \"N.ann.samp\" #>   .. .. ..$ : NULL #>   ..$ taxaSummary:List of 10 #>   .. ..$ summaryType: chr \"short\" #>   .. ..$ taxonID    : chr \"Acentrella sp.\" #>   .. ..$ method     : chr \"sf\" #>   .. ..$ P.ann.samp : num 7370 #>   .. ..$ cpi        : num 350 #>   .. .. [list output truncated] #>  $ Ameletus spp.     :List of 2 #>   ..$ P.boots    :List of 30 #>   .. ..$ : num 673 #>   .. ..$ : num 34.7 #>   .. ..$ : num 35.8 #>   .. ..$ : num 565 #>   .. ..$ : num 27 #>   .. .. [list output truncated] #>   .. ..- attr(*, \"dim\")= int [1:2] 3 10 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:3] \"P.ann.samp\" \"B.ann.samp\" \"N.ann.samp\" #>   .. .. ..$ : NULL #>   ..$ taxaSummary:List of 10 #>   .. ..$ summaryType: chr \"short\" #>   .. ..$ taxonID    : chr \"Ameletus spp.\" #>   .. ..$ method     : chr \"sf\" #>   .. ..$ P.ann.samp : num 660 #>   .. ..$ cpi        : num 350 #>   .. .. [list output truncated] #>  $ Attenella spp.    :List of 2 #>   ..$ P.boots    :List of 30 #>   .. ..$ : num 2512 #>   .. ..$ : num 117 #>   .. ..$ : num 71.2 #>   .. ..$ : num 2811 #>   .. ..$ : num 131 #>   .. .. [list output truncated] #>   .. ..- attr(*, \"dim\")= int [1:2] 3 10 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:3] \"P.ann.samp\" \"B.ann.samp\" \"N.ann.samp\" #>   .. .. ..$ : NULL #>   ..$ taxaSummary:List of 10 #>   .. ..$ summaryType: chr \"short\" #>   .. ..$ taxonID    : chr \"Attenella spp.\" #>   .. ..$ method     : chr \"sf\" #>   .. ..$ P.ann.samp : num 2534 #>   .. ..$ cpi        : num 350 #>   .. .. [list output truncated] #>  $ Baetis spp.       :List of 2 #>   ..$ P.boots    :List of 30 #>   .. ..$ : num 3795 #>   .. ..$ : num 136 #>   .. ..$ : num 251 #>   .. ..$ : num 4343 #>   .. ..$ : num 148 #>   .. .. [list output truncated] #>   .. ..- attr(*, \"dim\")= int [1:2] 3 10 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:3] \"P.ann.samp\" \"B.ann.samp\" \"N.ann.samp\" #>   .. .. ..$ : NULL #>   ..$ taxaSummary:List of 10 #>   .. ..$ summaryType: chr \"short\" #>   .. ..$ taxonID    : chr \"Baetis spp.\" #>   .. ..$ method     : chr \"sf\" #>   .. ..$ P.ann.samp : num 3833 #>   .. ..$ cpi        : num 350 #>   .. .. [list output truncated] #>  $ Barbaetis spp.    :List of 2 #>   ..$ P.boots    :List of 30 #>   .. ..$ : num 1163 #>   .. ..$ : num 42.3 #>   .. ..$ : num 55.1 #>   .. ..$ : num 1262 #>   .. ..$ : num 48.4 #>   .. .. [list output truncated] #>   .. ..- attr(*, \"dim\")= int [1:2] 3 10 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:3] \"P.ann.samp\" \"B.ann.samp\" \"N.ann.samp\" #>   .. .. ..$ : NULL #>   ..$ taxaSummary:List of 10 #>   .. ..$ summaryType: chr \"short\" #>   .. ..$ taxonID    : chr \"Barbaetis spp.\" #>   .. ..$ method     : chr \"sf\" #>   .. ..$ P.ann.samp : num 1512 #>   .. ..$ cpi        : num 350 #>   .. .. [list output truncated] #>   [list output truncated]"},{"path":"https://jimjunker1.github.io/secpRod/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jim Junker. Author, maintainer.","code":""},{"path":"https://jimjunker1.github.io/secpRod/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jim Junker (2023). secpRod: R package calculating secondary production animal populations. URL https://www.github.io/jimjunker1/secpRod","code":"@Manual{,   title = {{secpRod}: An {R} package for calculating secondary production of animal populations.},   author = {Jim Junker},   url = {https://www.github.io/jimjunker1/secpRod}, }"},{"path":"https://jimjunker1.github.io/secpRod/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Workflow Functions for estimating Secondary Production","text":"secpRod open source package analysis calculation secondary production populations communities R. secpRod uses data repeated sampling population abundance size structure tall data structure taxon information sheet base objects. addition estimating secondary production communities multiple methods, secpRod also allows user visualize population data assess best methods secondary production estimation.","code":""},{"path":"https://jimjunker1.github.io/secpRod/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Workflow Functions for estimating Secondary Production","text":"","code":"# To install the latest version Github: # install.packges('devtools') devtools::install_github(\"jimjunker1/secpRod\")"},{"path":"https://jimjunker1.github.io/secpRod/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"Workflow Functions for estimating Secondary Production","text":"sequence actions calculation community secondary production split taxa production method convert length mass determine date wrap around split taxa bootstrapped sample lists run production methods","code":""},{"path":"https://jimjunker1.github.io/secpRod/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Workflow Functions for estimating Secondary Production","text":"calc_production main function. function estimates bootstrapped secondary production multiple methods determined taxaInfo object. Please note ‘secpRod’ project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_igr.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_prod_igr — calc_prod_igr","title":"calc_prod_igr — calc_prod_igr","text":"function calculates production using instantaneous growth rate method.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_igr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_prod_igr — calc_prod_igr","text":"","code":"calc_prod_igr(   taxaSampleListMass = NULL,   taxaInfo = NULL,   bootNum = NULL,   dateDf = NULL,   taxaSummary = \"full\",   wrap = TRUE,   massValue = NULL,   massLabel = NULL,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_igr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_prod_igr — calc_prod_igr","text":"taxaSampleListMass description taxaInfo taxa info data.frame bootNum integer. number bootstrap samples produce. dateDf data frame date information external predictors month. column name identical variables growth equation found taxaInfo data.frame. taxaSummary string 'short', 'full', 'none'. type summary information returned. wrap logical. dates wrap create full year? massValue string. mass value units production massLabel string. label output units . possible default 'massValue' future. ... additional arguments pass function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_igr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_prod_igr — calc_prod_igr","text":"returns list 2 objects","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_igr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"calc_prod_igr — calc_prod_igr","text":"Additional details...","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_pb.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_prod_sf — calc_prod_pb","title":"calc_prod_sf — calc_prod_pb","text":"function calculates secondary production Production:Biomass method.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_pb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_prod_sf — calc_prod_pb","text":"","code":"calc_prod_pb(   taxaSampleListMass = NULL,   taxaInfo = NULL,   bootNum = NULL,   dateDf = NULL,   taxaSummary = \"full\",   wrap = TRUE,   massValue = NULL,   massLabel = NULL,   bootList = NULL,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_pb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_prod_sf — calc_prod_pb","text":"taxaSampleListMass description taxaInfo data frame taxonomic information calculating production bootNum integer. many bootstrap samples constructed dateDf data frame date information external predictors month. column name identical variables growth equation found taxaInfo data.frame. taxaSummary string 'short', 'full', 'none'. type summary information returned. wrap logical. dates wrap create full year? massValue string. mass value units production massLabel string. label output units . possible default 'massValue' future. ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_pb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_prod_sf — calc_prod_pb","text":"returns list 2 objects: P.boots: boostrapped estimates production, abundance, biomass. taxaSummary: summary sample production, abundance, biomass","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_prod_sf — calc_prod_sf","title":"calc_prod_sf — calc_prod_sf","text":"function calculates secondary production size-frequency method.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_prod_sf — calc_prod_sf","text":"","code":"calc_prod_sf(   taxaSampleListMass = NULL,   taxaInfo = NULL,   bootNum = NULL,   dateDf = NULL,   taxaSummary = \"full\",   wrap = TRUE,   massValue = NULL,   massLabel = NULL,   bootList = NULL,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_prod_sf — calc_prod_sf","text":"taxaSampleListMass description taxaInfo data frame taxonomic information calculating production bootNum integer. many bootstrap samples constructed dateDf data frame date information external predictors month. column name identical variables growth equation found taxaInfo data.frame. taxaSummary string 'short', 'full', 'none'. type summary information returned. wrap logical. dates wrap create full year? massValue string. mass value units production massLabel string. label output units . possible default 'massValue' future. bootList list. bootstrapped samples passed `calc_production()` ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_prod_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_prod_sf — calc_prod_sf","text":"returns list 2 objects: P.boots: boostrapped estimates production, abundance, biomass. taxaSummary: summary sample production, abundance, biomass","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_production.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_production — calc_production","title":"calc_production — calc_production","text":"main function secpRod package. calculate secondary production groups based methods described taxa information object. Depending input values varying summaries returned.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_production.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_production — calc_production","text":"","code":"calc_production(   taxaSampleListMass = NULL,   infoCols = NULL,   taxaInfo = NULL,   bootNum = 100,   wrap = 1L,   taxaSummary = \"full\",   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/calc_production.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_production — calc_production","text":"taxaSampleListMass data.frame sample length-masses abundances infoCols integer vector; columns sizeInfo object taxonomic ID, sampling metadata, size class columns taxaInfo dataframe (coercible); taxonomic information calculating secondary production. must include taxonomic ID column name taxaSampleListMass bootNum integer. number bootstrapped samples create wrap logical extra date added make full calendar year? taxaSummary string 'short', 'full', 'none' distinguish information returned ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/convert_length_to_mass.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_length_to_mass — convert_length_to_mass","title":"convert_length_to_mass — convert_length_to_mass","text":"function convert species-specific lengths mass based user-provided length-mass equation form variable values","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/convert_length_to_mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_length_to_mass — convert_length_to_mass","text":"","code":"convert_length_to_mass(   taxaSampleList = NULL,   taxaInfo = NULL,   reduce = TRUE,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/convert_length_to_mass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_length_to_mass — convert_length_to_mass","text":"taxaSampleList data.frame long format single taxa. data.frame contain species identifier column `taxonID` column length bin categories `lengthClass`. `lengthClass` values must numeric coercible. taxaInfo data.frame information convert length mass taxa. taxa specified `taxaSampleList` subset . data.frame must contain `taxonID` column, length--mass equation formula, `massForm`, must contain `lengthClass` variable (e.g., `afdm_mg~*lengthClass^b`). Additional columns necessary based length-mass formula. non-`lengthClass` variables right hand side (RHS) must unique columns named variable name. example, formula structure, `afdm_mg~*lengthClass^b`, RHS `*lengthClass^b`. `lengthClass` required column, optionally necessary columns `` `b` variables. formula parsed species-specific `` `b` coefficients inserted conversion. reduce logical. TRUE (default) mass column added `taxaSampleList`. name mass column parsed left hand side (LHS) `massForm` provided `taxaInfo`. example, `afdm_mg~*lengthClass^b` mass column named `afdm_mg`. data.frame returned reduce == TRUE ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/convert_length_to_mass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert_length_to_mass — convert_length_to_mass","text":"taxaSampleList mass column added.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/findreps.html","id":null,"dir":"Reference","previous_headings":"","what":"findreps — findreps","title":"findreps — findreps","text":"function finds sets breaks repeated runs similar character types. used parse formula structure variables `massForm` converting lengths mass convert_length_to_mass().","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/findreps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"findreps — findreps","text":"","code":"findreps(x, counter = NULL)"},{"path":"https://jimjunker1.github.io/secpRod/reference/findreps.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"findreps — findreps","text":"https://stackoverflow.com/questions/33155662/find--break--repeated-runs","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/findreps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"findreps — findreps","text":"x character string formula structure counter stuff","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/grapes-ni-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"%ni% — %ni%","title":"%ni% — %ni%","text":"function opposite %% finds items vector","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/grapes-ni-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"%ni% — %ni%","text":"","code":"x %ni% table"},{"path":"https://jimjunker1.github.io/secpRod/reference/grapes-ni-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"%ni% — %ni%","text":"x vector NULL: values exclude. Long vectors supported. table vector NULL: values excluded . Long vectors supported. #' @returns logical vector, indicating match located element x: thus values TRUE FALSE never NA.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/igr_prod.sample.html","id":null,"dir":"Reference","previous_headings":"","what":"igr_prod.sample — igr_prod.sample","title":"igr_prod.sample — igr_prod.sample","text":"function calculates taxa production based instantaneous growth method","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/igr_prod.sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"igr_prod.sample — igr_prod.sample","text":"","code":"igr_prod.sample(   df = NULL,   sizesDf = NULL,   massValue = NULL,   massLabel = NULL,   full = TRUE,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/igr_prod.sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"igr_prod.sample — igr_prod.sample","text":"df data.frame long format returned convert_length_to_mass() function sizesDf data.frame massValue character string identifying column name mass value massLabel character string identifying column name mass value full logical. full summary returned mean sd. ... additional arguments passed function, including variables predict growth rate growth function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/igr_prod.sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"igr_prod.sample — igr_prod.sample","text":"list object taxa summary sampled data","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/inv.logit.html","id":null,"dir":"Reference","previous_headings":"","what":"inv.logit — inv.logit","title":"inv.logit — inv.logit","text":"inv.logit","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/inv.logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inv.logit — inv.logit","text":"","code":"inv.logit(eta)"},{"path":"https://jimjunker1.github.io/secpRod/reference/inv.logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inv.logit — inv.logit","text":"eta mixtools","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/my_boot.comp.html","id":null,"dir":"Reference","previous_headings":"","what":"my_boot.comp — my_boot.comp","title":"my_boot.comp — my_boot.comp","text":"my_boot.comp","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/my_boot.comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"my_boot.comp — my_boot.comp","text":"","code":"my_boot.comp(   y,   x = NULL,   N = NULL,   max.comp = 2,   B = 100,   sig = 0.05,   arbmean = TRUE,   arbvar = TRUE,   mix.type = c(\"logisregmix\", \"multmix\", \"mvnormalmix\", \"normalmix\", \"poisregmix\",     \"regmix\", \"regmix.mixed\", \"repnormmix\"),   hist = TRUE,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/my_boot.comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"my_boot.comp — my_boot.comp","text":"y raw data multmix, mvnormalmix, normalmix, repnormmix response values logisregmix, poisregmix, regmix. See documentation concerning respective EM algorithms specific structure raw data. x predictor values required regression mixtures logisregmix, poisregmix, regmix. column 1s intercept term must included! See documentation concerning respective EM algorithms specific structure predictor values. N n-vector number trials logistic regression type logisregmix. NULL, N n-vector 1s binary logistic regression. max.comp maximum number components test . default 2. function perform test k-components versus (k+1)-components sequentially fail reject null hypothesis. decision rule governed calculated p-value sig. B number bootstrap realizations likelihood ratio statistic produce. default 100, ideally, values 1000 acceptable. sig significance level compare p-value performing test k-components versus (k+1)-components. arbmean FALSE, scale mixture analysis can performed mvnormalmix, normalmix, regmix, repnormmix. default TRUE. arbvar FALSE, location mixture analysis can performed mvnormalmix, normalmix, regmix, repnormmix. default TRUE. mix.type type mixture analysis wish perform. data inputted y x depend type mixture selected. logisregmix corresponds mixture logistic regressions. multmix corresponds mixture multinomials data determined cut-point method. mvnormalmix corresponds mixture multivariate normals. normalmix corresponds mixture univariate normals. poisregmix corresponds mixture Poisson regressions. regmix corresponds mixture regressions normal components. regmix.mixed corresponds mixture regressions random mixed effects. repnormmix corresponds mixture normals repeated measurements. hist argument provide matrix plot histograms boostrapped likelihood ratio statistic. ... Additional arguments passed various EM algorithms mixture interest","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/my_boot.comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"my_boot.comp — my_boot.comp","text":"boot.comp returns list items: p.values p-values test k-components versus (k+1)-components. log.lik B bootstrap realizations likelihood ratio statistic. obs.log.lik observed likelihood ratio statistic test used determining p-values.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/pb_prod.sample.html","id":null,"dir":"Reference","previous_headings":"","what":"pb_prod.sample — pb_prod.sample","title":"pb_prod.sample — pb_prod.sample","text":"function calculates taxa production based production:biomass method","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/pb_prod.sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pb_prod.sample — pb_prod.sample","text":"","code":"pb_prod.sample(   df = NULL,   sizesDf = NULL,   massValue = NULL,   massLabel = NULL,   pb = NULL,   full = TRUE,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/pb_prod.sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pb_prod.sample — pb_prod.sample","text":"df data.frame long format returned convert_length_to_mass() function sizesDf data.frame massValue character string identifying column name mass value massLabel character string identifying column name mass value pb numeric. production:biomass ratio. full logical. full summary returned mean sd ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/pb_prod.sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pb_prod.sample — pb_prod.sample","text":"list object taxa summary sampled data","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://jimjunker1.github.io/secpRod/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/plot_cohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_cohorts — plot_cohorts","title":"plot_cohorts — plot_cohorts","text":"function plots size-frequency data single taxon time","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/plot_cohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_cohorts — plot_cohorts","text":"","code":"plot_cohorts(   taxaSampleListMass = NULL,   param = c(\"length\", \"mass\"),   massClass = \"afdm_mg\",   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/plot_cohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_cohorts — plot_cohorts","text":"taxaSampleListMass data.frame long format returned convert_length_to_mass() function param character. string 'length' 'mass' describes measurement plotted massClass character. column name mass measurement (e.g., afdm_mg, dm_mg, etc.) ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/plot_cohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_cohorts — plot_cohorts","text":"returns histogram plot relative frequency size mass classes single taxon sampling dates","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/prep_boots.html","id":null,"dir":"Reference","previous_headings":"","what":"prep_boots — prep_boots","title":"prep_boots — prep_boots","text":"function prepares bootstrap samples.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/prep_boots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prep_boots — prep_boots","text":"","code":"prep_boots(df = NULL, bootNum = bootNum)"},{"path":"https://jimjunker1.github.io/secpRod/reference/prep_boots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prep_boots — prep_boots","text":"df data.frame. dataframe species size, mass, frequency data. bootNum integer. number bootstrapped data sets created.","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/sf_prod.sample.html","id":null,"dir":"Reference","previous_headings":"","what":"sf_prod.sample — sf_prod.sample","title":"sf_prod.sample — sf_prod.sample","text":"function calculates taxa production based size-frequency method","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/sf_prod.sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sf_prod.sample — sf_prod.sample","text":"","code":"sf_prod.sample(   df = NULL,   sizesDf = NULL,   massValue = NULL,   massLabel = NULL,   cpi = NULL,   full = TRUE,   ... )"},{"path":"https://jimjunker1.github.io/secpRod/reference/sf_prod.sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sf_prod.sample — sf_prod.sample","text":"df data.frame long format returned convert_length_to_mass() function sizesDf data.frame massValue character string identifying column name mass value massLabel character string identifying column name mass value cpi integer. cohort production interval. full logical. full summary returned mean sd ... additional arguments passed function","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/sf_prod.sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sf_prod.sample — sf_prod.sample","text":"list object taxa summary sampled data","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/wbtData.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for community secondary production analysis — wbtData","title":"Sample data for community secondary production analysis — wbtData","text":"collection community macroinvertebrate data estimating secondary production","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/wbtData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for community secondary production analysis — wbtData","text":"","code":"wbtData"},{"path":"https://jimjunker1.github.io/secpRod/reference/wbtData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for community secondary production analysis — wbtData","text":"`wbtData` list two objects. 'sampleInfo' list 32 data frames taxonomic entity second, 'taxaInfo' data frame 32 rows 13 columns: taxonID taxonomic identifier repID replicate identifier dateID date identifier .Date format lengthClass numeric (coercible) description individual length n_m2 count density individuals lengthClass","code":""},{"path":"https://jimjunker1.github.io/secpRod/reference/wbtData.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for community secondary production analysis — wbtData","text":"<https://doi.org/10.4319/lo.2014.59.2.0507>","code":""}]
